import { type ParsedMail, type Headers } from 'mailparser';
import { inspect } from 'node:util';
import type { AgentContext, AgentRequest, Data, DataType } from '../types';
/**
 * An attachment to an incoming email
 */
export interface IncomingEmailAttachment {
    /**
     * the filename of the attachment
     */
    filename: string;
    /**
     * the data payload of the attachment. This is a promise that resolves to a Data object.
     */
    data(): Promise<Data>;
    /**
     * the content disposition of the attachment. if not provided, it will be 'attachment'.
     */
    contentDisposition: 'attachment' | 'inline';
}
/**
 * An attachment to an outgoing email
 */
export interface OutgoingEmailAttachment {
    /**
     * the filename of the attachment
     */
    filename: string;
    /**
     * the data of the attachment
     */
    data: DataType;
    /**
     * the content disposition of the attachment. if not provided, it will be 'attachment'.
     */
    contentDisposition?: 'attachment' | 'inline' | undefined;
}
/**
 * A reply to an email
 */
export interface EmailReply {
    /**
     * the subject of the reply. If not provided, it will be 'RE: <original subject>'.
     */
    subject?: string;
    /**
     * the text body of the reply
     */
    text: string;
    /**
     * the optional html body of the reply
     */
    html?: string;
    /**
     * the optional attachments to the email
     */
    attachments?: OutgoingEmailAttachment[];
}
/**
 * A class representing an email with the common information so processing can be done on it.
 */
export declare class Email {
    private readonly _message;
    constructor(data: ParsedMail);
    [inspect.custom](): string;
    toString(): string;
    /**
     * The date of the email.
     */
    date(): Date | null;
    /**
     * The message ID of the email.
     */
    messageId(): string | null;
    /**
     * The headers of the email.
     */
    headers(): Headers;
    /**
     * The email address of the recipient or null if there is no recipient.
     *
     * If the email has multiple recipients, the email addresses are comma separated.
     */
    to(): string | null;
    /**
     * The email address of the sender or null if there is no sender.
     */
    fromEmail(): string | null;
    /**
     * The name of the sender or null if there is no name.
     */
    fromName(): string | null;
    /**
     * The subject of the email or null if there is no subject.
     */
    subject(): string | null;
    /**
     * The plain text body of the email or null if there is no plain text body.
     */
    text(): string | null;
    /**
     * The HTML body of the email or null if there is no HTML body.
     */
    html(): string | null;
    /**
     * The attachments of the email or an empty array if there are no attachments.
     */
    attachments(): IncomingEmailAttachment[];
    private makeReplySubject;
    /**
     * send a reply to the email
     */
    sendReply(req: AgentRequest, context: AgentContext, reply: EmailReply): Promise<string>;
}
/**
 * Parse an email from a buffer and return an Email object.
 */
export declare function parseEmail(data: Buffer): Promise<Email>;
//# sourceMappingURL=email.d.ts.map