{"version":3,"sources":["../src/server/otel.ts","../src/server/util.ts","../src/types.ts","../src/router/response.ts","../src/server/agents.ts","../src/router/router.ts","../src/apis/api.ts","../src/io/email.ts","../src/router/data.ts","../src/router/request.ts","../src/server/bun.ts","../src/server/node.ts","../src/server/server.ts","../src/apis/keyvalue.ts","../src/server/gzip.ts","../src/apis/vector.ts","../src/apis/email.ts","../src/apis/objectstore.ts","../src/index.ts","../src/autostart/index.ts","../src/otel/index.ts","../node_modules/@opentelemetry/otlp-exporter-base/src/configuration/legacy-node-configuration.ts","../src/otel/logger.ts","../src/logger/console.ts","../src/otel/console.ts","../src/otel/fetch.ts"],"sourcesContent":["import { context, propagation } from '@opentelemetry/api';\nimport type { IncomingMessage, ServerResponse } from 'node:http';\n\n/**\n * Injects trace context into response headers using the OpenTelemetry propagation API\n *\n * @param headers - Optional existing headers to include\n * @returns A record of headers with trace context injected\n */\nexport function injectTraceContextToHeaders(\n\theaders: Record<string, string> | Headers = {}\n): Record<string, string> {\n\tlet _headers = headers;\n\tif (headers instanceof Headers) {\n\t\t_headers = headers.toJSON() as Record<string, string>;\n\t}\n\t// Create a carrier object for the headers\n\tconst carrier: Record<string, string> = { ..._headers } as Record<\n\t\tstring,\n\t\tstring\n\t>;\n\n\t// Get the current context\n\tconst currentContext = context.active();\n\n\t// Inject trace context into the carrier\n\tpropagation.inject(currentContext, carrier);\n\n\treturn carrier;\n}\n\n/**\n * Injects trace context into Node.js ServerResponse headers\n *\n * @param res - The Node.js ServerResponse object\n */\nexport function injectTraceContextToNodeResponse(res: ServerResponse): void {\n\t// Create a carrier object for the headers\n\tconst carrier: Record<string, string> = {};\n\n\t// Get the current context\n\tconst currentContext = context.active();\n\n\t// Inject trace context into the carrier\n\tpropagation.inject(currentContext, carrier);\n\n\t// Add the headers to the response\n\tfor (const [key, value] of Object.entries(carrier)) {\n\t\tres.setHeader(key, value);\n\t}\n}\n\n/**\n * Extracts trace context from incoming request headers\n *\n * @param headers - The request headers\n * @returns The context with trace information\n */\nexport function extractTraceContextFromHeaders(\n\theaders: Record<string, string>\n): ReturnType<typeof propagation.extract> {\n\t// Create a carrier object from the headers\n\tconst carrier: Record<string, string> = {};\n\n\t// Convert headers to lowercase for case-insensitive matching\n\tfor (const [key, value] of Object.entries(headers)) {\n\t\tcarrier[key.toLowerCase()] = value;\n\t}\n\n\t// Extract the context using the global propagator\n\tconst activeContext = context.active();\n\treturn propagation.extract(activeContext, carrier);\n}\n\n/**\n * Extracts trace context from Node.js IncomingMessage headers\n *\n * @param req - The Node.js IncomingMessage object\n * @returns The context with trace information\n */\nexport function extractTraceContextFromNodeRequest(\n\treq: IncomingMessage\n): ReturnType<typeof propagation.extract> {\n\t// Create a carrier object from the headers\n\tconst carrier: Record<string, string> = {};\n\n\t// Convert headers to the format expected by the propagator\n\tfor (const [key, value] of Object.entries(req.headers)) {\n\t\tif (typeof value === 'string') {\n\t\t\tcarrier[key.toLowerCase()] = value;\n\t\t} else if (Array.isArray(value)) {\n\t\t\tcarrier[key.toLowerCase()] = value[0] || '';\n\t\t}\n\t}\n\n\t// Extract the context using the global propagator\n\tconst activeContext = context.active();\n\treturn propagation.extract(activeContext, carrier);\n}\n\n/**\n * Extracts trace context from Bun Request headers\n *\n * @param req - The Bun Request object\n * @returns The context with trace information\n */\nexport function extractTraceContextFromBunRequest(\n\treq: Request\n): ReturnType<typeof propagation.extract> {\n\t// Create a carrier object from the headers\n\tconst carrier: Record<string, string> = {};\n\n\t// Convert headers to the format expected by the propagator\n\treq.headers.forEach((value, key) => {\n\t\tcarrier[key.toLowerCase()] = value;\n\t});\n\n\t// Extract the context using the global propagator\n\tconst activeContext = context.active();\n\treturn propagation.extract(activeContext, carrier);\n}\n","import { SpanStatusCode } from '@opentelemetry/api';\nimport type { Span } from '@opentelemetry/api';\nimport { DataHandler } from '../router/data';\nimport type {\n\tAgentResponseData,\n\tDataType,\n\tJsonObject,\n\tReadableDataType,\n\tTriggerType,\n\tAgentWelcomePrompt,\n\tAgentInvocationScope,\n} from '../types';\nimport { injectTraceContextToHeaders } from './otel';\nimport type { IncomingRequest, ServerRoute } from './types';\nimport { ReadableStream } from 'node:stream/web';\n\nexport function safeStringify(obj: unknown) {\n\tconst seen = new WeakSet();\n\treturn JSON.stringify(obj, (key, value) => {\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tif (seen.has(value)) {\n\t\t\t\treturn '[Circular]';\n\t\t\t}\n\t\t\tseen.add(value);\n\t\t}\n\t\treturn value;\n\t});\n}\n\nexport function safeParse(text: string, defaultValue?: unknown) {\n\ttry {\n\t\tif (!text || text.trim() === '') {\n\t\t\treturn defaultValue;\n\t\t}\n\t\treturn JSON.parse(text);\n\t} catch (error) {\n\t\treturn defaultValue;\n\t}\n}\n\nexport function getRoutesHelpText(host: string, routes: ServerRoute[]) {\n\tconst buffer = ['The following Agent routes are available:', ''];\n\tfor (const route of routes) {\n\t\tbuffer.push(`${route.method} ${route.path} [${route.agent.name}]`);\n\t}\n\tbuffer.push('');\n\tif (process.platform === 'darwin' || process.platform === 'linux') {\n\t\tbuffer.push('Example usage:');\n\t\tbuffer.push('');\n\t\tbuffer.push(\n\t\t\t`curl http://${host}${routes[0].path} \\\\\\n\\t--json '{\"prompt\":\"Hello\"}'`\n\t\t);\n\t\tbuffer.push('');\n\t}\n\treturn buffer.join('\\n');\n}\n\nexport async function toBuffer(data: ReadableDataType) {\n\tif (data instanceof Buffer) {\n\t\treturn data;\n\t}\n\tif (data instanceof Uint8Array) {\n\t\treturn Buffer.from(data);\n\t}\n\tif (data instanceof ArrayBuffer) {\n\t\treturn Buffer.from(data);\n\t}\n\tif (typeof data === 'string') {\n\t\treturn Buffer.from(data, 'utf-8');\n\t}\n\tif (data instanceof Blob) {\n\t\treturn Buffer.from(await data.arrayBuffer());\n\t}\n\tthrow new Error('Invalid data type (toBuffer)');\n}\n\nconst isBase64 =\n\t/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\n\nexport async function toWelcomePrompt({\n\tdata,\n\tcontentType,\n}: AgentWelcomePrompt): Promise<{ data: string; contentType: string }> {\n\tif (data instanceof Buffer) {\n\t\treturn {\n\t\t\tdata: data.toString('base64'),\n\t\t\tcontentType,\n\t\t};\n\t}\n\tif (data instanceof Uint8Array) {\n\t\treturn {\n\t\t\tdata: Buffer.from(data).toString('base64'),\n\t\t\tcontentType,\n\t\t};\n\t}\n\tif (data instanceof ArrayBuffer) {\n\t\treturn {\n\t\t\tdata: Buffer.from(data).toString('base64'),\n\t\t\tcontentType,\n\t\t};\n\t}\n\tif (data instanceof Blob) {\n\t\treturn {\n\t\t\tdata: Buffer.from(await data.arrayBuffer()).toString('base64'),\n\t\t\tcontentType,\n\t\t};\n\t}\n\tif (data instanceof ReadableStream) {\n\t\tconst reader = data.getReader();\n\t\tlet buffer = Buffer.alloc(0);\n\t\twhile (true) {\n\t\t\tconst { done, value } = await reader.read();\n\t\t\tif (done) break;\n\t\t\tbuffer = Buffer.concat([buffer, value]);\n\t\t}\n\t\treturn {\n\t\t\tdata: buffer.toString('base64'),\n\t\t\tcontentType,\n\t\t};\n\t}\n\tif (typeof data === 'string') {\n\t\tif (\n\t\t\t(contentType.includes('text/') || contentType.includes('json')) &&\n\t\t\t!isBase64.test(data)\n\t\t) {\n\t\t\treturn {\n\t\t\t\tdata: Buffer.from(data).toString('base64'),\n\t\t\t\tcontentType,\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tdata,\n\t\t\tcontentType,\n\t\t};\n\t}\n\tif (typeof data === 'object') {\n\t\treturn {\n\t\t\tdata: Buffer.from(safeStringify(data)).toString('base64'),\n\t\t\tcontentType,\n\t\t};\n\t}\n\tthrow new Error('Invalid data type (toWelcomePrompt');\n}\n\nexport async function dataTypeToBuffer(args: DataType): Promise<Buffer> {\n\tif (args instanceof DataHandler) {\n\t\tconst payload = args as DataHandler;\n\t\treturn payload.buffer();\n\t}\n\tif (args === null || args === undefined) {\n\t\treturn Buffer.alloc(0);\n\t}\n\tif (typeof args === 'string') {\n\t\treturn Buffer.from(args, 'utf-8');\n\t}\n\tif (typeof args === 'object') {\n\t\tif (args instanceof DataHandler) {\n\t\t\treturn args.buffer();\n\t\t}\n\t\tif (args instanceof ArrayBuffer) {\n\t\t\treturn Buffer.from(args);\n\t\t}\n\t\tif (args instanceof Buffer) {\n\t\t\treturn args;\n\t\t}\n\t\tif (args instanceof Blob) {\n\t\t\tconst blob = await args.arrayBuffer();\n\t\t\treturn Buffer.from(blob);\n\t\t}\n\t\tif (args instanceof Uint8Array) {\n\t\t\treturn Buffer.from(args);\n\t\t}\n\t\tif (args instanceof ReadableStream) {\n\t\t\tconst reader = args.getReader();\n\t\t\tlet buffer = Buffer.alloc(0);\n\t\t\twhile (true) {\n\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\tif (done) break;\n\t\t\t\tbuffer = Buffer.concat([buffer, value]);\n\t\t\t}\n\t\t\treturn buffer;\n\t\t}\n\t\treturn Buffer.from(safeStringify(args));\n\t}\n\tthrow new Error('Invalid data type (toDataType)');\n}\n\nexport async function fromDataType(\n\tdata: DataType,\n\tcontentType?: string,\n\tmetadata?: JsonObject\n): Promise<AgentResponseData> {\n\tif (data instanceof DataHandler) {\n\t\treturn {\n\t\t\tdata,\n\t\t\tmetadata,\n\t\t};\n\t}\n\tconst response: AgentResponseData = {\n\t\tdata: null as unknown as DataHandler, // Will be set in each case\n\t\tmetadata, // Always include metadata\n\t};\n\n\tif (data === null || data === undefined) {\n\t\tresponse.data = new DataHandler('', 'text/plain');\n\t\treturn response;\n\t}\n\n\tif (typeof data === 'string') {\n\t\tresponse.data = new DataHandler(data, contentType ?? 'text/plain');\n\t\treturn response;\n\t}\n\n\tif (typeof data === 'object') {\n\t\tif (data instanceof DataHandler) {\n\t\t\tresponse.data = data;\n\t\t\treturn response;\n\t\t}\n\n\t\tif (data instanceof ArrayBuffer) {\n\t\t\tresponse.data = new DataHandler(\n\t\t\t\tBuffer.from(data),\n\t\t\t\tcontentType ?? 'application/octet-stream'\n\t\t\t);\n\t\t\treturn response;\n\t\t}\n\n\t\tif (data instanceof Buffer) {\n\t\t\tresponse.data = new DataHandler(\n\t\t\t\tdata,\n\t\t\t\tcontentType ?? 'application/octet-stream'\n\t\t\t);\n\t\t\treturn response;\n\t\t}\n\n\t\tif (data instanceof Blob) {\n\t\t\tconst buffer = await data.arrayBuffer();\n\t\t\tresponse.data = new DataHandler(\n\t\t\t\tBuffer.from(buffer),\n\t\t\t\tcontentType ?? 'application/octet-stream'\n\t\t\t);\n\t\t\treturn response;\n\t\t}\n\n\t\tif (data instanceof Uint8Array) {\n\t\t\tresponse.data = new DataHandler(\n\t\t\t\tBuffer.from(data),\n\t\t\t\tcontentType ?? 'application/octet-stream'\n\t\t\t);\n\t\t\treturn response;\n\t\t}\n\n\t\tif (data instanceof ReadableStream) {\n\t\t\tresponse.data = new DataHandler(\n\t\t\t\tdata as unknown as ReadableStream<ReadableDataType>,\n\t\t\t\tcontentType ?? 'application/octet-stream'\n\t\t\t);\n\t\t\treturn response;\n\t\t}\n\n\t\tresponse.data = new DataHandler(\n\t\t\tsafeStringify(data),\n\t\t\tcontentType ?? 'application/json'\n\t\t);\n\t\treturn response;\n\t}\n\n\tthrow new Error('Invalid data type (fromDataType)');\n}\n\nconst devmode = process.env.AGENTUITY_SDK_DEV_MODE === 'true';\n\nexport async function createStreamingResponse(\n\torigin: string | null,\n\tserver: string,\n\tspan: Span,\n\trouteResult: Promise<AgentResponseData>\n): Promise<Response> {\n\tconst responseheaders = injectTraceContextToHeaders({\n\t\tServer: server,\n\t});\n\tlet resp: AgentResponseData;\n\n\ttry {\n\t\tresp = await routeResult;\n\t} catch (error) {\n\t\tconst { stack, message } = error as Error;\n\t\tlet errorMessage = message;\n\t\tif (devmode) {\n\t\t\terrorMessage = stack ?? errorMessage;\n\t\t}\n\t\tresponseheaders['Content-Type'] = 'text/plain';\n\t\treturn new Response(errorMessage, {\n\t\t\tstatus: 500,\n\t\t\theaders: responseheaders,\n\t\t});\n\t}\n\tif (resp.metadata) {\n\t\tfor (const key in resp.metadata) {\n\t\t\tlet value = resp.metadata[key];\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tvalue = safeParseIfLooksLikeJson(value) ?? value;\n\t\t\t} else {\n\t\t\t\tvalue = JSON.stringify(value);\n\t\t\t}\n\t\t\tresponseheaders[`x-agentuity-${key}`] = value as string;\n\t\t}\n\t}\n\tif (resp.data?.contentType) {\n\t\tresponseheaders['Content-Type'] = resp.data.contentType;\n\t}\n\tif (origin) {\n\t\tresponseheaders['Access-Control-Allow-Origin'] = origin;\n\t\tresponseheaders['Access-Control-Allow-Methods'] =\n\t\t\t'GET, PUT, DELETE, PATCH, OPTIONS, POST';\n\t\tresponseheaders['Access-Control-Allow-Headers'] =\n\t\t\t'Content-Type, Authorization';\n\t}\n\n\tif (resp instanceof Response) {\n\t\tfor (const [key, value] of Object.entries(responseheaders)) {\n\t\t\tresp.headers.set(key, value);\n\t\t}\n\t\treturn resp;\n\t}\n\n\tconst stream = await resp.data.stream();\n\n\tspan.setStatus({ code: SpanStatusCode.OK });\n\n\treturn new Response(stream as unknown as BodyInit, {\n\t\tstatus: 200,\n\t\theaders: responseheaders,\n\t});\n}\n\nexport function getRequestFromHeaders(\n\theaders: Record<string, string>,\n\trunId: string\n): IncomingRequest {\n\tconst metadata = metadataFromHeaders(headers);\n\tlet trigger = metadata.trigger as TriggerType;\n\tlet scope: AgentInvocationScope = 'local';\n\tif ('scope' in metadata) {\n\t\tscope = metadata.scope as AgentInvocationScope;\n\t\t// biome-ignore lint/performance/noDelete: deleting scope\n\t\tdelete metadata.scope;\n\t}\n\tif ('trigger' in metadata) {\n\t\ttrigger = metadata.trigger as TriggerType;\n\t\t// biome-ignore lint/performance/noDelete: deleting scope\n\t\tdelete metadata.trigger;\n\t}\n\t// biome-ignore lint/performance/noDelete: deleting trigger\n\tdelete metadata.trigger;\n\treturn {\n\t\tcontentType: headers['content-type'] ?? 'application/octet-stream',\n\t\tmetadata,\n\t\trunId,\n\t\ttrigger: trigger ?? 'manual',\n\t\tscope,\n\t};\n}\n\nfunction safeParseIfLooksLikeJson(value: unknown) {\n\tif (typeof value !== 'string') {\n\t\treturn value;\n\t}\n\tconst trimmed = value.trim();\n\tif (\n\t\t(trimmed.startsWith('{') && trimmed.endsWith('}')) ||\n\t\t(trimmed.startsWith('[') && trimmed.endsWith(']'))\n\t) {\n\t\treturn safeParse(trimmed, value);\n\t}\n\treturn value;\n}\n\n/**\n * Extracts metadata from headers\n *\n * @param headers - The headers to extract metadata from\n * @returns The metadata\n */\nexport function metadataFromHeaders(headers: Record<string, string>) {\n\tconst metadata: JsonObject = {};\n\tfor (const [key, value] of Object.entries(headers)) {\n\t\tif (key.startsWith('x-agentuity-')) {\n\t\t\tswitch (key) {\n\t\t\t\tcase 'x-agentuity-metadata': {\n\t\t\t\t\tconst md = safeParse(value) as JsonObject;\n\t\t\t\t\tif (md && typeof md === 'object' && !Array.isArray(md)) {\n\t\t\t\t\t\tfor (const [k, v] of Object.entries(md)) {\n\t\t\t\t\t\t\tmetadata[k] = safeParseIfLooksLikeJson(v as string);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcase 'x-agentuity-headers': {\n\t\t\t\t\tconst md = safeParse(value) as JsonObject;\n\t\t\t\t\tconst kv: Record<string, string> = {};\n\t\t\t\t\tif ('content-type' in headers) {\n\t\t\t\t\t\tkv['content-type'] = headers['content-type'];\n\t\t\t\t\t}\n\t\t\t\t\tif (md && typeof md === 'object' && !Array.isArray(md)) {\n\t\t\t\t\t\tfor (const [k, v] of Object.entries(md)) {\n\t\t\t\t\t\t\tif (k.startsWith('x-agentuity-')) {\n\t\t\t\t\t\t\t\tmetadata[k.substring(12)] = safeParseIfLooksLikeJson(\n\t\t\t\t\t\t\t\t\tv as string\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tkv[k] = safeParseIfLooksLikeJson(v as string);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmetadata.headers = kv;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tconst mdkey = key.substring(12);\n\t\t\t\t\tmetadata[mdkey] = safeParseIfLooksLikeJson(value);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn metadata;\n}\n\nexport function setMetadataInHeaders(\n\theaders: Record<string, string>,\n\tmetadata: JsonObject\n) {\n\tfor (const [key, value] of Object.entries(metadata)) {\n\t\tif (value === null || value === undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tswitch (typeof value) {\n\t\t\tcase 'string':\n\t\t\t\theaders[`x-agentuity-${key}`] = value;\n\t\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\t\theaders[`x-agentuity-${key}`] = value.toString();\n\t\t\t\tbreak;\n\t\t\tcase 'boolean':\n\t\t\t\theaders[`x-agentuity-${key}`] = value.toString();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\theaders[`x-agentuity-${key}`] = safeStringify(value);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport function headersToRecord(headers: Headers): Record<string, string> {\n\t// Try using toJSON if available\n\tif (typeof headers.toJSON === 'function') {\n\t\treturn headers.toJSON();\n\t}\n\n\t// Fallback for environments where toJSON is not available\n\tconst record: Record<string, string> = {};\n\theaders.forEach((value, key) => {\n\t\trecord[key] = value;\n\t});\n\treturn record;\n}\n\n/**\n * these are a set of files that should be ignored by the server if not served by the agent\n */\nexport function shouldIgnoreStaticFile(pathname: string) {\n\treturn (\n\t\tpathname === '/favicon.ico' ||\n\t\tpathname === '/robots.txt' ||\n\t\tpathname === '/humans.txt' ||\n\t\tpathname === '/security.txt' ||\n\t\tpathname === '/sitemap.xml' ||\n\t\tpathname === '/favicon.png' ||\n\t\tpathname === '/apple-touch-icon.png' ||\n\t\tpathname === '/apple-touch-icon-precomposed.png' ||\n\t\tpathname === '/crossdomain.xml' ||\n\t\tpathname === '/browserconfig.xml' ||\n\t\tpathname === '/manifest.json'\n\t);\n}\n","import type { Meter, Tracer } from '@opentelemetry/api';\nimport type { Logger } from './logger';\nimport type { ReadableStream } from 'node:stream/web';\nimport type { Email } from './io/email';\n\n/**\n * Types of triggers that can initiate an agent request\n */\nexport type TriggerType =\n\t| 'webhook'\n\t| 'cron'\n\t| 'manual'\n\t| 'agent'\n\t| 'sms'\n\t| 'queue'\n\t| 'voice'\n\t| 'email'\n\t| 'agent';\n\n/**\n * The scope of the agent invocation\n */\nexport type AgentInvocationScope = 'local' | 'remote';\n\n/**\n * Data is a generic container for data and provides easy access to the data in different formats. Internally\n * the data is stored as a base64 encoded string so that it can be easily converted to different formats\n * (both textual and binary).\n */\nexport interface Data {\n\t/**\n\t * the content type of the data such as 'text/plain', 'application/json', 'image/png', etc. if no content type is provided, it will be inferred from the data.\n\t * if it cannot be inferred, it will be 'application/octet-stream'.\n\t */\n\tcontentType: string;\n\n\t/**\n\t * an base64 encoded string of the data\n\t */\n\tbase64(): Promise<string>;\n\n\t/**\n\t * the data represented as a string\n\t */\n\ttext(): Promise<string>;\n\n\t/**\n\t * the JSON data. If the data is not JSON, this will throw an error.\n\t */\n\tjson(): Promise<Json>;\n\n\t/**\n\t * get the data as an object of the given type T. If the data is not JSON, this will throw an error.\n\t */\n\tobject<T>(): Promise<T>;\n\n\t/**\n\t * the binary data represented as a Uint8Array<ArrayBuffer>\n\t */\n\tbinary(): Promise<Uint8Array>;\n\n\t/**\n\t * the binary data represented as a Buffer\n\t */\n\tbuffer(): Promise<Buffer>;\n\n\t/**\n\t * the stream of the data\n\t */\n\tstream(): Promise<ReadableStream<ReadableDataType>>;\n\n\t/**\n\t * the email data represented as a Email. If the data is not an email in rfc822 format, this will throw an error.\n\t */\n\temail(): Promise<Email>;\n}\n\n/**\n * check if a value is a Data object\n */\nexport function isDataObject(value: unknown): value is Data {\n\tif (value && typeof value === 'object' && 'contentType' in value) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nexport type ReadableDataType =\n\t| Buffer\n\t| Uint8Array\n\t| ArrayBuffer\n\t| string\n\t| Blob;\n\n/**\n * The type of data that can be passed to an agent as a payload\n */\nexport type DataType =\n\t| Buffer\n\t| Uint8Array\n\t| ArrayBuffer\n\t| string\n\t| Json\n\t| Blob\n\t| ReadableStream\n\t| Data;\n\n/**\n * check if a value is a ReadableStream\n */\nfunction isReadableStream(value: unknown): value is ReadableStream {\n\tif (typeof value === 'object' && value !== null) {\n\t\treturn 'getReader' in value;\n\t}\n\treturn false;\n}\n\n/**\n * check if a value is a valid DataType\n */\nexport function isDataType(value: unknown): value is DataType {\n\tif (value === null || value === undefined) {\n\t\treturn false;\n\t}\n\tif (typeof value === 'string') {\n\t\treturn true;\n\t}\n\tif (isDataObject(value)) {\n\t\treturn true;\n\t}\n\tif (typeof value === 'object') {\n\t\tif (\n\t\t\tvalue instanceof Buffer ||\n\t\t\tvalue instanceof Uint8Array ||\n\t\t\tvalue instanceof ArrayBuffer ||\n\t\t\tvalue instanceof Blob\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tif (isReadableStream(value)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn isJsonObject(value);\n}\n\n/**\n * Primitive JSON value types\n */\nexport type JsonPrimitive =\n\t| string\n\t| number\n\t| boolean\n\t| null\n\t| JsonArray\n\t| JsonObject;\n\n/**\n * JSON array type\n */\nexport interface JsonArray extends Array<JsonPrimitive> {}\n\n/**\n * valid keys for a JSON object\n */\nexport type JsonKey = string | number;\n\n/**\n * JSON object type\n */\nexport type JsonObject = {\n\t[key in JsonKey]: JsonPrimitive;\n};\n\n/**\n * Composite JSON type (array or object)\n */\nexport type JsonComposite = JsonArray | JsonObject;\n\n/**\n * Any valid JSON value\n */\nexport type Json = JsonPrimitive | JsonComposite;\n\n// Runtime type guard to check if unknown is a JsonObject\nexport function isJsonObject(value: unknown): value is JsonObject {\n\tif (value === null || value === undefined) {\n\t\treturn true; // these will be filtered out so they are ok\n\t}\n\t// validate all array elements are json objects\n\tif (Array.isArray(value)) {\n\t\treturn value.every(isJsonObject);\n\t}\n\t// if primitive types, they are ok\n\tif (\n\t\ttypeof value === 'string' ||\n\t\ttypeof value === 'number' ||\n\t\ttypeof value === 'boolean'\n\t) {\n\t\treturn true;\n\t}\n\t// validate all object values are json objects\n\tif (typeof value === 'object') {\n\t\treturn Object.keys(value).every((key) =>\n\t\t\tisJsonObject(value[key as keyof typeof value])\n\t\t);\n\t}\n\treturn false;\n}\n\n/**\n * the result of a data operation when the data is found\n */\nexport interface DataResultFound {\n\t/**\n\t * the data from the result of the operation\n\t */\n\tdata: Data;\n\n\t/**\n\t * the data was found\n\t */\n\texists: true;\n}\n\n/**\n * the result of a data operation when the data is not found\n */\nexport interface DataResultNotFound {\n\tdata: never;\n\t/**\n\t * the data was not found\n\t */\n\texists: false;\n}\n\n/**\n * the result of a data operation\n */\nexport type DataResult = DataResultFound | DataResultNotFound;\n\nexport interface KeyValueStorageSetParams {\n\t/**\n\t * the number of milliseconds to keep the value in the cache\n\t */\n\tttl?: number;\n\t/**\n\t * the content type of the value\n\t */\n\tcontentType?: string;\n}\n\nexport interface KeyValueStorage {\n\t/**\n\t * get a value from the key value storage\n\t *\n\t * @param name - the name of the key value storage\n\t * @param key - the key to get the value of\n\t * @returns the DataResult object\n\t */\n\tget(name: string, key: string): Promise<DataResult>;\n\n\t/**\n\t * set a value in the key value storage\n\t *\n\t * @param name - the name of the key value storage\n\t * @param key - the key to set the value of\n\t * @param value - the value to set in any of the supported data types\n\t * @param params - the KeyValueStorageSetParams\n\t */\n\tset<T = unknown>(\n\t\tname: string,\n\t\tkey: string,\n\t\tvalue: T,\n\t\tparams?: KeyValueStorageSetParams\n\t): Promise<void>;\n\n\t/**\n\t * delete a value from the key value storage\n\t *\n\t * @param name - the name of the key value storage\n\t * @param key - the key to delete\n\t */\n\tdelete(name: string, key: string): Promise<void>;\n}\n\ntype VectorUpsertEmbeddings = {\n\t/**\n\t * the embeddings to upsert\n\t */\n\tembeddings: Array<number>;\n};\n\ntype VectorUpsertText = {\n\t/**\n\t * the text to use for the embedding\n\t */\n\tdocument: string;\n};\n\ntype VectorUpsertBase = {\n\t/**\n\t * the metadata to upsert\n\t */\n\tmetadata?: JsonObject;\n\n\t/**\n\t * the key of the vector object which can be used as a reference. the value of this key is opaque to the vector storage.\n\t */\n\tkey: string;\n};\n\nexport type VectorUpsertParams = VectorUpsertBase &\n\t(VectorUpsertEmbeddings | VectorUpsertText);\n\nexport interface VectorSearchParams<T = unknown> {\n\t/**\n\t * the query to search for\n\t */\n\tquery: string;\n\t/**\n\t * the limit of the number of results to return\n\t */\n\tlimit?: number;\n\t/**\n\t * the similarity of the results to return from 0.0-1.0. The higher the number, the more similar the results will be.\n\t */\n\tsimilarity?: number;\n\t/**\n\t * the metadata to filter the results by\n\t */\n\tmetadata?: T;\n}\n\n/**\n * the result of a vector search\n */\nexport interface VectorSearchResult {\n\t/**\n\t * the unique id of the object in vector storage\n\t */\n\tid: string;\n\t/**\n\t * the key used when the vector object was added to vector storage\n\t */\n\tkey: string;\n\t/**\n\t * the metadata of the vector object when it was stored\n\t */\n\tmetadata?: JsonObject;\n\t/**\n\t * the distance of the vector object from the query from 0-1. The larger the number, the more similar the vector object is to the query.\n\t */\n\tsimilarity: number;\n}\n\n/**\n * VectorStorage provides a way to store and search for data using vector embeddings\n */\nexport interface VectorStorage {\n\t/**\n\t * upsert a vector into the vector storage\n\t *\n\t * @param name - the name of the vector storage\n\t * @param documents - the documents for the vector upsert\n\t * @returns the ids of the vectors that were upserted\n\t */\n\tupsert(name: string, ...documents: VectorUpsertParams[]): Promise<string[]>;\n\n\t/**\n\t * get a vector from the vector storage by key\n\t *\n\t * @param name - the name of the vector storage\n\t * @param key - the key of the vector to get\n\t * @returns the results of the vector search\n\t */\n\tget(name: string, key: string): Promise<VectorSearchResult | null>;\n\n\t/**\n\t * search for vectors in the vector storage\n\t *\n\t * @param name - the name of the vector storage\n\t * @param params - the parameters for the vector search\n\t * @returns the results of the vector search\n\t */\n\tsearch(\n\t\tname: string,\n\t\tparams: VectorSearchParams\n\t): Promise<VectorSearchResult[]>;\n\n\t/**\n\t * delete a vector from the vector storage\n\t *\n\t * @param name - the name of the vector storage\n\t * @param key - the key of the vector to delete\n\t * @returns the number of vector objects that were deleted\n\t */\n\tdelete(name: string, key: string): Promise<number>;\n}\n\n/**\n * EmailService provides a way to send email replies to incoming emails\n */\nexport interface EmailService {\n\t/**\n\t * send an email reply to an incoming email\n\t *\n\t * @param agentId - the id of the agent to send the reply to\n\t * @param email - the email to send the reply to in RFC822 format\n\t * @param authToken - the authorization token to use to send the reply\n\t * @param messageId - the message id of the email\n\t */\n\tsendReply(\n\t\tagentId: string,\n\t\temail: string,\n\t\tauthToken: string,\n\t\tmessageId: string\n\t): Promise<void>;\n}\n\nexport interface ObjectStorePutParams {\n\t/**\n\t * the content type of the object\n\t */\n\tcontentType?: string;\n\n\t/**\n\t * the content encoding of the object\n\t */\n\tcontentEncoding?: string;\n\n\t/**\n\t * the cache control header for the object\n\t */\n\tcacheControl?: string;\n\n\t/**\n\t * the content disposition header for the object\n\t */\n\tcontentDisposition?: string;\n\n\t/**\n\t * the content language header for the object\n\t */\n\tcontentLanguage?: string;\n\n\t/**\n\t * arbitrary metadata to attach to the object but not returned as part of the object when fetched via HTTP\n\t */\n\tmetadata?: Record<string, string>;\n}\n\nexport interface ObjectStore {\n\t/**\n\t * get an object from the object store\n\t *\n\t * @param bucket - the bucket to get the object from\n\t * @param key - the key of the object to get\n\t * @returns the data result from the object store\n\t */\n\tget(bucket: string, key: string): Promise<DataResult>;\n\n\t/**\n\t * put an object into the object store\n\t */\n\tput(\n\t\tbucket: string,\n\t\tkey: string,\n\t\tdata: DataType,\n\t\tparams?: ObjectStorePutParams\n\t): Promise<void>;\n\n\t/**\n\t * delete an object from the object store\n\t *\n\t * @param bucket - the bucket to delete the object from\n\t * @param key - the key of the object to delete\n\t * @returns true if the object was deleted, false if the object did not exist\n\t */\n\tdelete(bucket: string, key: string): Promise<boolean>;\n\n\t/**\n\t * create a public URL for an object. This URL can be used to access the object without authentication.\n\t *\n\t * @param bucket - the bucket to create the signed URL for\n\t * @param key - the key of the object to create the signed URL for\n\t * @param expiresDuration - the duration of the signed URL in milliseconds. If not provided, the default is 1 hour.\n\t * @returns the public URL\n\t */\n\tcreatePublicURL(\n\t\tbucket: string,\n\t\tkey: string,\n\t\texpiresDuration?: number\n\t): Promise<string>;\n}\n\nexport interface InvocationArguments<T = unknown> {\n\t/**\n\t * the data to pass to the agent\n\t */\n\tdata?: DataType;\n\t/**\n\t * the content type of the data\n\t */\n\tcontentType?: string;\n\t/**\n\t * the metadata to pass to the agent\n\t */\n\tmetadata?: T;\n}\n\nexport interface RemoteAgentResponse {\n\t/**\n\t * the response data from the agent\n\t */\n\tdata: Data;\n\t/**\n\t * the metadata from the agent\n\t */\n\tmetadata?: JsonObject;\n}\n\nexport interface RemoteAgent {\n\t/**\n\t * the unique id for the agent\n\t */\n\tid: string;\n\n\t/**\n\t * the name of the agent\n\t */\n\tname: string;\n\n\t/**\n\t * the project id of the agent\n\t */\n\tprojectId: string;\n\n\t/**\n\t * run the agent with data and get a response\n\t *\n\t * @param args - the arguments to pass to the agent\n\t * @returns the response from the agent\n\t */\n\trun<T = unknown>(args: InvocationArguments<T>): Promise<RemoteAgentResponse>;\n}\n\ninterface GetAgentRequestParamsById {\n\t/**\n\t * the unique agent id\n\t */\n\tid: string;\n}\n\ninterface GetAgentRequestParamsByName {\n\t/**\n\t * the agent name in the project\n\t */\n\tname: string;\n\t/**\n\t * the project id\n\t */\n\tprojectId?: string;\n}\n\nexport type GetAgentRequestParams =\n\t| GetAgentRequestParamsById\n\t| GetAgentRequestParamsByName;\n\nexport interface AgentContext {\n\t/**\n\t * the version of the Agentuity SDK\n\t */\n\tsdkVersion: string;\n\n\t/**\n\t * returns true if the agent is running in devmode\n\t */\n\tdevmode: boolean;\n\n\t/**\n\t * the run id\n\t */\n\trunId: string;\n\n\t/**\n\t * the org id\n\t */\n\torgId: string;\n\n\t/**\n\t * the deployment id\n\t */\n\tdeploymentId: string;\n\n\t/**\n\t * the project id\n\t */\n\tprojectId: string;\n\n\t/**\n\t * scope of the agent invocation\n\t */\n\tscope: AgentInvocationScope;\n\n\t/**\n\t * the agent configuration\n\t */\n\tagent: AgentConfig;\n\n\t/**\n\t * the logger\n\t */\n\tlogger: Logger;\n\n\t/**\n\t * the tracer\n\t */\n\ttracer: Tracer;\n\n\t/**\n\t * the meter\n\t */\n\tmeter: Meter;\n\n\t/**\n\t * return a list of all the agents in the project\n\t */\n\tagents: AgentConfig[];\n\n\t/**\n\t * get a handle to a remote agent that you can invoke\n\t */\n\tgetAgent(params: GetAgentRequestParams): Promise<RemoteAgent>;\n\n\t/**\n\t * the key value storage\n\t */\n\tkv: KeyValueStorage;\n\n\t/**\n\t * the vector storage\n\t */\n\tvector: VectorStorage;\n\n\t/**\n\t * the email service\n\t */\n\temail: EmailService;\n\n\t/**\n\t * the object store\n\t */\n\tobjectstore: ObjectStore;\n}\n\n/**\n * The request that triggered the agent invocation\n */\nexport interface AgentRequest {\n\t/**\n\t * get the trigger of the request\n\t */\n\tget trigger(): TriggerType;\n\n\t/**\n\t * get the data of the request\n\t */\n\tget data(): Data;\n\n\t/**\n\t * get the metadata object of the request\n\t */\n\tget metadata(): JsonObject;\n\n\t/**\n\t * get the metadata value of the request\n\t */\n\tget(key: string, defaultValue?: Json): Json;\n}\n\nexport interface AgentResponseData {\n\t/**\n\t * the data from the agent\n\t */\n\tdata: Data;\n\t/**\n\t * the metadata from the agent\n\t */\n\tmetadata?: JsonObject;\n}\n\nexport interface AgentRedirectResponse {\n\t/**\n\t * if this is a redirect response\n\t */\n\tredirect: true;\n\t/**\n\t * the agent to redirect to\n\t */\n\tagent: GetAgentRequestParams;\n\t/**\n\t * the invocation arguments\n\t */\n\tinvocation?: InvocationArguments<JsonObject>;\n}\n\n/**\n * The response from an agent invocation. This is a convenience object that can be used to return a response from an agent.\n */\nexport interface AgentResponse {\n\t/**\n\t * handoff the current request another agent within the same project\n\t *\n\t * @param agent - the agent to handoff the request to\n\t * @param args - the arguments to pass to the agent. if undefined, will pass the current request data\n\t * @returns the response from the agent\n\t */\n\thandoff<M = unknown>(\n\t\tagent: GetAgentRequestParams,\n\t\targs?: InvocationArguments<M>\n\t): Promise<AgentRedirectResponse>;\n\n\t/**\n\t * return an empty response with optional metadata\n\t */\n\tempty<M = unknown>(metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a JSON response with optional metadata\n\t */\n\tjson<T = unknown, M = unknown>(\n\t\tdata: T,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData>;\n\n\t/**\n\t * return a text response with optional metadata\n\t */\n\ttext<M = unknown>(data: string, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a binary response with optional metadata\n\t */\n\tbinary<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a PDF response with optional metadata\n\t */\n\tpdf<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a PNG response with optional metadata\n\t */\n\tpng<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a JPEG response with optional metadata\n\t */\n\tjpeg<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a GIF response with optional metadata\n\t */\n\tgif<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a WebP response with optional metadata\n\t */\n\twebp<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a MP3 response with optional metadata\n\t */\n\tmp3<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a MP4 response with optional metadata\n\t */\n\tmp4<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a M4A response with optional metadata\n\t */\n\tm4a<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a M4P response with optional metadata\n\t */\n\tm4p<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a WebM response with optional metadata\n\t */\n\twebm<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a HTML response with optional metadata\n\t */\n\thtml<M = unknown>(data: string, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a WAV response with optional metadata\n\t */\n\twav<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return an OGG response with optional metadata\n\t */\n\togg<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData>;\n\n\t/**\n\t * return a response with specific data and content type with optional metadata\n\t *\n\t * @param data - the data to return\n\t * @param contentType - the content type of the data\n\t * @param metadata - the metadata to return\n\t * @returns the response data\n\t */\n\tdata<M = unknown>(\n\t\tdata: DataType,\n\t\tcontentType: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData>;\n\n\t/**\n\t * return a markdown response with optional metadata\n\t */\n\tmarkdown<M = unknown>(\n\t\tcontent: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData>;\n\n\t/**\n\t * stream a response to the client. the content type will default to application/octet-stream if not provided.\n\t *\n\t * @param stream - the stream to return\n\t * @param contentType - the content type of the stream\n\t * @param metadata - the metadata to return as headers\n\t * @returns the response data\n\t */\n\tstream<M = unknown>(\n\t\tstream: ReadableStream<ReadableDataType> | AsyncIterable<ReadableDataType>,\n\t\tcontentType?: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData>;\n}\n\n/**\n * the handler for the agent\n */\nexport type AgentHandler = (\n\trequest: AgentRequest,\n\tresponse: AgentResponse,\n\tcontext: AgentContext\n) => Promise<AgentResponseData | Response>;\n\nexport interface AgentWelcomePrompt {\n\t/**\n\t * The data as a DataType\n\t */\n\tdata: DataType;\n\t/**\n\t * The data format\n\t */\n\tcontentType: string;\n}\n\nexport interface AgentWelcomeResult {\n\t/**\n\t * The welcome prompt to display to the user\n\t */\n\twelcome: string;\n\t/**\n\t * The example prompts to display to the user\n\t */\n\tprompts?: AgentWelcomePrompt[];\n}\n\n/**\n * The welcome function for the agent\n */\nexport type AgentWelcome = () =>\n\t| AgentWelcomeResult\n\t| Promise<AgentWelcomeResult>;\n\n/**\n * the config for the agent\n */\nexport interface AgentConfig {\n\t/**\n\t * the unique id of the agent\n\t */\n\tid: string;\n\t/**\n\t * the name of the agent\n\t */\n\tname: string;\n\t/**\n\t * the description of the agent\n\t */\n\tdescription?: string;\n\t/**\n\t * the file name to the agent relative to the dist directory\n\t */\n\tfilename: string;\n}\n\n/**\n * Session information for an agent request\n */\nexport interface Session {\n\t/**\n\t * the request\n\t */\n\trequest: AgentRequest;\n\t/**\n\t * the context\n\t */\n\tcontext: AgentContext;\n}\n\nexport interface DataPayload {\n\t/**\n\t * the trigger that caused the invocation\n\t */\n\ttrigger: TriggerType;\n\t/**\n\t * the content type\n\t */\n\tcontentType: string;\n\t/**\n\t * the metadata\n\t */\n\tmetadata?: JsonObject;\n}\n","import type {\n\tAgentResponse,\n\tInvocationArguments,\n\tGetAgentRequestParams,\n\tAgentResponseData,\n\tJsonObject,\n\tDataType,\n\tAgentRedirectResponse,\n\tReadableDataType,\n} from '../types';\nimport { isJsonObject } from '../types';\nimport type { ReadableStream } from 'node:stream/web';\nimport { DataHandler } from './data';\nimport { safeStringify, fromDataType } from '../server/util';\n\n/**\n * The AgentResponse class implements the AgentResponseHandler interface.\n * It is used to create and return responses from an agent.\n */\nexport default class AgentResponseHandler implements AgentResponse {\n\t/**\n\t * redirect the current request another agent within the same project\n\t */\n\tasync handoff<M = unknown>(\n\t\tagent: GetAgentRequestParams,\n\t\targs?: InvocationArguments\n\t): Promise<AgentRedirectResponse> {\n\t\tif (isJsonObject(args?.metadata)) {\n\t\t\tconst result: AgentRedirectResponse = {\n\t\t\t\tredirect: true,\n\t\t\t\tagent,\n\t\t\t\tinvocation: args as JsonObject,\n\t\t\t};\n\t\t\treturn result;\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return an empty response with optional metadata\n\t */\n\tasync empty<M = unknown>(metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn {\n\t\t\t\tdata: new DataHandler('', 'text/plain'),\n\t\t\t\tmetadata,\n\t\t\t};\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a JSON response with optional metadata\n\t */\n\tasync json<T = unknown, M = unknown>(\n\t\tdata: T,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData> {\n\t\tif (!isJsonObject(data)) {\n\t\t\tthrow new Error('data must be a JsonObject');\n\t\t}\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn {\n\t\t\t\tdata: new DataHandler(safeStringify(data), 'application/json'),\n\t\t\t\tmetadata,\n\t\t\t};\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a text response with optional metadata\n\t */\n\tasync text<M = unknown>(\n\t\tdata: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn {\n\t\t\t\tdata: new DataHandler(data, 'text/plain'),\n\t\t\t\tmetadata,\n\t\t\t};\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a binary response with optional metadata\n\t */\n\tbinary<M = unknown>(\n\t\tdata: DataType,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'application/octet-stream', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a PDF response with optional metadata\n\t */\n\tpdf<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'application/pdf', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a PNG response with optional metadata\n\t */\n\tpng<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'image/png', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a JPEG response with optional metadata\n\t */\n\tjpeg<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'image/jpeg', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a GIF response with optional metadata\n\t */\n\tgif<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'image/gif', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a WebP response with optional metadata\n\t */\n\twebp<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'image/webp', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a MP3 response with optional metadata\n\t */\n\tmp3<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'audio/mpeg', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a MP4 response with optional metadata\n\t */\n\tmp4<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'audio/mp4', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a M4A response with optional metadata\n\t */\n\tm4a<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'audio/m4a', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a M4P response with optional metadata\n\t */\n\tm4p<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'audio/m4p', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a WebM response with optional metadata\n\t */\n\twebm<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'audio/webm', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a HTML response with optional metadata\n\t */\n\tasync html<M = unknown>(\n\t\tdata: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn {\n\t\t\t\tdata: new DataHandler(data, 'text/html'),\n\t\t\t\tmetadata,\n\t\t\t};\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a WAV response with optional metadata\n\t */\n\twav<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'audio/wav', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return an OGG response with optional metadata\n\t */\n\togg<M = unknown>(data: DataType, metadata?: M): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, 'audio/ogg', metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * stream a response to the client\n\t */\n\tasync stream<M = unknown>(\n\t\tstream: ReadableStream<ReadableDataType> | AsyncIterable<ReadableDataType>,\n\t\tcontentType?: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn {\n\t\t\t\tdata: new DataHandler(\n\t\t\t\t\tstream,\n\t\t\t\t\tcontentType ?? 'application/octet-stream'\n\t\t\t\t),\n\t\t\t\tmetadata,\n\t\t\t};\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a response with specific data and content type with optional metadata\n\t */\n\tdata<M = unknown>(\n\t\tdata: DataType,\n\t\tcontentType: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn fromDataType(data, contentType, metadata);\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n\n\t/**\n\t * return a markdown response with optional metadata\n\t */\n\tasync markdown<M = unknown>(\n\t\tcontent: string,\n\t\tmetadata?: M\n\t): Promise<AgentResponseData> {\n\t\tif (isJsonObject(metadata)) {\n\t\t\treturn {\n\t\t\t\tdata: new DataHandler(content, 'text/markdown'),\n\t\t\t\tmetadata,\n\t\t\t};\n\t\t}\n\t\tthrow new Error('metadata must be a JsonObject');\n\t}\n}\n","import type {\n\tGetAgentRequestParams,\n\tRemoteAgent,\n\tInvocationArguments,\n\tRemoteAgentResponse,\n\tReadableDataType,\n} from '../types';\nimport { isJsonObject } from '../types';\nimport type { ReadableStream } from 'node:stream/web';\nimport { POST } from '../apis/api';\nimport type { Logger } from '../logger';\nimport type { AgentConfig } from '../types';\nimport {\n\tsafeStringify,\n\tmetadataFromHeaders,\n\tsetMetadataInHeaders,\n\tdataTypeToBuffer,\n\theadersToRecord,\n} from './util';\nimport { injectTraceContextToHeaders } from './otel';\nimport { DataHandler } from '../router/data';\nimport { getSDKVersion, getTracer, recordException } from '../router/router';\nimport { context, trace, SpanStatusCode } from '@opentelemetry/api';\n\n/**\n * Invokes local agents within the same server\n */\nclass LocalAgentInvoker implements RemoteAgent {\n\tprivate readonly port: number;\n\tpublic readonly id: string;\n\tpublic readonly name: string;\n\tpublic readonly description?: string;\n\tpublic readonly projectId: string;\n\n\t/**\n\t * Creates a new local agent invoker\n\t *\n\t * @param port - The port the agent is running on\n\t * @param id - The agent ID\n\t * @param name - The agent name\n\t * @param projectId - The project ID\n\t * @param description - Optional description of the agent\n\t */\n\tconstructor(\n\t\tport: number,\n\t\tid: string,\n\t\tname: string,\n\t\tprojectId: string,\n\t\tdescription?: string\n\t) {\n\t\tthis.port = port;\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.projectId = projectId;\n\t\tthis.description = description;\n\t}\n\n\tasync run<T = unknown>(\n\t\targs?: InvocationArguments<T>\n\t): Promise<RemoteAgentResponse> {\n\t\tif (!isJsonObject(args?.metadata)) {\n\t\t\tthrow new Error('args.metadata must be a JsonObject');\n\t\t}\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'remoteagent.run',\n\t\t\t{\n\t\t\t\tattributes: {\n\t\t\t\t\t'remote.agentId': this.id,\n\t\t\t\t\t'remote.agentName': this.name,\n\t\t\t\t\t'@agentuity/scope': 'local',\n\t\t\t\t},\n\t\t\t},\n\t\t\tcurrentContext\n\t\t);\n\n\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t// Execute the operation within the new context\n\t\treturn await context.with(spanContext, async () => {\n\t\t\ttry {\n\t\t\t\tconst body = args?.data ? await dataTypeToBuffer(args.data) : undefined;\n\t\t\t\tconst headers: Record<string, string> = {\n\t\t\t\t\t'Content-Type': args?.contentType ?? 'application/octet-stream',\n\t\t\t\t\t'x-agentuity-trigger': 'agent',\n\t\t\t\t};\n\t\t\t\tif (args?.metadata) {\n\t\t\t\t\tsetMetadataInHeaders(headers, args.metadata);\n\t\t\t\t}\n\t\t\t\tinjectTraceContextToHeaders(headers);\n\t\t\t\tconst resp = await fetch(`http://127.0.0.1:${this.port}/${this.id}`, {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody,\n\t\t\t\t\theaders,\n\t\t\t\t});\n\t\t\t\tif (resp.ok) {\n\t\t\t\t\tspan.setAttribute('http.status_code', resp.status.toString());\n\t\t\t\t\tif (resp.body) {\n\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: new DataHandler(\n\t\t\t\t\t\t\t\tresp.body as unknown as ReadableStream<ReadableDataType>,\n\t\t\t\t\t\t\t\tresp.headers.get('content-type') ?? 'application/octet-stream'\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\tcontentType:\n\t\t\t\t\t\t\t\tresp.headers.get('content-type') ?? 'application/octet-stream',\n\t\t\t\t\t\t\tmetadata: metadataFromHeaders(headersToRecord(resp.headers)),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new Error(await resp.text());\n\t\t\t} catch (ex) {\n\t\t\t\trecordException(span, ex, true);\n\t\t\t\tthrow ex;\n\t\t\t} finally {\n\t\t\t\tspan.end();\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Invokes remote agents through the API\n */\nclass RemoteAgentInvoker implements RemoteAgent {\n\tprivate readonly logger: Logger;\n\tpublic readonly id: string;\n\tpublic readonly name: string;\n\tpublic readonly projectId: string;\n\tpublic readonly orgId: string;\n\tprivate readonly url: string;\n\tprivate readonly authorization: string;\n\tprivate readonly transactionId: string;\n\n\t/**\n\t * Creates a new remote agent invoker\n\t *\n\t * @param logger - The logger to use\n\t * @param url - The agent url endpoint to use\n\t * @param authorization - The agent authorization token\n\t * @param id - The agent id\n\t * @param name - The agent name\n\t * @param projectId - The project id\n\t * @param orgId - The organization id\n\t * @param transactionId - The transaction id\n\t */\n\tconstructor(\n\t\tlogger: Logger,\n\t\turl: string,\n\t\tauthorization: string,\n\t\tid: string,\n\t\tname: string,\n\t\tprojectId: string,\n\t\torgId: string,\n\t\ttransactionId: string\n\t) {\n\t\tthis.logger = logger;\n\t\tthis.url = url;\n\t\tthis.authorization = authorization;\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.projectId = projectId;\n\t\tthis.orgId = orgId;\n\t\tthis.transactionId = transactionId;\n\t}\n\n\tasync run<T = unknown>(\n\t\targs?: InvocationArguments<T>\n\t): Promise<RemoteAgentResponse> {\n\t\tif (!isJsonObject(args?.metadata)) {\n\t\t\tthrow new Error('args.metadata must be a JsonObject');\n\t\t}\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'remoteagent.run',\n\t\t\t{\n\t\t\t\tattributes: {\n\t\t\t\t\t'@agentuity/agentId': this.id,\n\t\t\t\t\t'@agentuity/agentName': this.name,\n\t\t\t\t\t'@agentuity/orgId': this.orgId,\n\t\t\t\t\t'@agentuity/projectId': this.projectId,\n\t\t\t\t\t'@agentuity/transactionId': this.transactionId,\n\t\t\t\t\t'@agentuity/scope': 'remote',\n\t\t\t\t},\n\t\t\t},\n\t\t\tcurrentContext\n\t\t);\n\n\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t// Execute the operation within the new context\n\t\treturn await context.with(spanContext, async () => {\n\t\t\ttry {\n\t\t\t\tconst sdkVersion = getSDKVersion();\n\t\t\t\tconst headers: Record<string, string> = {\n\t\t\t\t\tAuthorization: `Bearer ${this.authorization}`,\n\t\t\t\t\t'Content-Type': args?.contentType ?? 'application/octet-stream',\n\t\t\t\t\t'User-Agent': `Agentuity JS SDK/${sdkVersion}`,\n\t\t\t\t\t'x-agentuity-scope': 'remote',\n\t\t\t\t\t'x-agentuity-trigger': 'agent',\n\t\t\t\t};\n\t\t\t\tif (args?.metadata) {\n\t\t\t\t\tsetMetadataInHeaders(headers, args.metadata);\n\t\t\t\t}\n\t\t\t\tinjectTraceContextToHeaders(headers);\n\t\t\t\tconst body = args?.data ? await dataTypeToBuffer(args.data) : undefined;\n\t\t\t\tthis.logger.info('invoking remote agent');\n\t\t\t\tconst resp = await fetch(this.url, {\n\t\t\t\t\theaders,\n\t\t\t\t\tbody,\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t});\n\t\t\t\tthis.logger.info('invoked remote agent, returned: %d', resp.status);\n\t\t\t\tspan.setAttribute('http.status_code', resp.status);\n\t\t\t\tif (resp.ok) {\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t} else {\n\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\tmessage: await resp.text(),\n\t\t\t\t\t});\n\t\t\t\t\tthrow new Error(await resp.text());\n\t\t\t\t}\n\t\t\t\tconst metadata = metadataFromHeaders(headersToRecord(resp.headers));\n\t\t\t\tconst contentType =\n\t\t\t\t\tresp.headers.get('content-type') ?? 'application/octet-stream';\n\t\t\t\tthis.logger.debug(\n\t\t\t\t\t'invoked remote agent, returned metadata: %s, content-type: %s',\n\t\t\t\t\tmetadata,\n\t\t\t\t\tcontentType\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tdata: new DataHandler(\n\t\t\t\t\t\tresp.body as unknown as ReadableStream<ReadableDataType>,\n\t\t\t\t\t\tcontentType\n\t\t\t\t\t),\n\t\t\t\t\tmetadata,\n\t\t\t\t};\n\t\t\t} catch (ex) {\n\t\t\t\trecordException(span, ex);\n\t\t\t\tthrow ex;\n\t\t\t} finally {\n\t\t\t\tspan.end();\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Resolves agent references to concrete agent implementations\n */\nexport default class AgentResolver {\n\tprivate readonly logger: Logger;\n\tprivate readonly agents: AgentConfig[];\n\tprivate readonly port: number;\n\tprivate readonly projectId: string;\n\tprivate readonly currentAgentId: string;\n\n\t/**\n\t * Creates a new agent resolver\n\t *\n\t * @param logger - The logger to use\n\t * @param agents - List of available server agents\n\t * @param port - The port the server is running on\n\t * @param projectId - The project ID\n\t * @param currentAgentId - The ID of the current agent\n\t */\n\tconstructor(\n\t\tlogger: Logger,\n\t\tagents: AgentConfig[],\n\t\tport: number,\n\t\tprojectId: string,\n\t\tcurrentAgentId: string\n\t) {\n\t\tthis.logger = logger;\n\t\tthis.agents = agents;\n\t\tthis.port = port;\n\t\tthis.projectId = projectId;\n\t\tthis.currentAgentId = currentAgentId;\n\t}\n\n\t/**\n\t * Gets an agent implementation based on the provided parameters\n\t *\n\t * @param params - Parameters to identify the agent\n\t * @returns A promise that resolves to the agent implementation\n\t * @throws Error if the agent is not found or if there's an agent loop\n\t */\n\tasync getAgent(params: GetAgentRequestParams): Promise<RemoteAgent> {\n\t\tconst agent = this.agents.find((a) => {\n\t\t\tif ('id' in params && a.id === params.id) {\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'name' in params &&\n\t\t\t\ta.name === params.name &&\n\t\t\t\t(this.projectId === params.projectId || !params.projectId)\n\t\t\t) {\n\t\t\t\treturn a;\n\t\t\t}\n\t\t\treturn null;\n\t\t});\n\t\tif (agent) {\n\t\t\tif (agent.id === this.currentAgentId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'agent loop detected trying to redirect to the current active agent. if you are trying to redirect to another agent in a different project with the same name, you must specify the projectId parameter along with the name parameter'\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn new LocalAgentInvoker(\n\t\t\t\tthis.port,\n\t\t\t\tagent.id,\n\t\t\t\tagent.name,\n\t\t\t\tthis.projectId,\n\t\t\t\tagent.description\n\t\t\t);\n\t\t}\n\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan('remoteagent.resolve', {}, currentContext);\n\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t// Execute the operation within the new context\n\t\treturn await context.with(spanContext, async () => {\n\t\t\tif ('id' in params) {\n\t\t\t\tspan.setAttribute('remote.agentId', params.id);\n\t\t\t}\n\t\t\tif ('name' in params) {\n\t\t\t\tspan.setAttribute('remote.agentName', params.name);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst resp = await POST(\n\t\t\t\t\t'/agent/2025-03-17/resolve',\n\t\t\t\t\tsafeStringify(params),\n\t\t\t\t\t{\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tspan.setAttribute('http.status_code', resp.status);\n\t\t\t\tif (resp.status === 404) {\n\t\t\t\t\tif ('id' in params) {\n\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\t\tmessage: `agent ${params.id} not found or you don't have access to it`,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`agent ${params.id} not found or you don't have access to it`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif ('name' in params) {\n\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\t\tmessage: `agent ${params.name} not found or you don't have access to it`,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`agent ${params.name} not found or you don't have access to it`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\tmessage: \"agent not found or you don't have access to it\",\n\t\t\t\t\t});\n\t\t\t\t\tthrow new Error(\"agent not found or you don't have access to it\");\n\t\t\t\t}\n\t\t\t\tconst payload = resp.json as {\n\t\t\t\t\tsuccess: boolean;\n\t\t\t\t\tmessage?: string;\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tid: string;\n\t\t\t\t\t\tname: string;\n\t\t\t\t\t\tprojectId: string;\n\t\t\t\t\t\turl: string;\n\t\t\t\t\t\tauthorization: string;\n\t\t\t\t\t\torgId: string;\n\t\t\t\t\t\ttransactionId: string;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\tif (!payload?.success) {\n\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\tmessage: payload?.message ?? 'unknown error from agent response',\n\t\t\t\t\t});\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\tpayload?.message ?? 'unknown error from agent response'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\treturn new RemoteAgentInvoker(\n\t\t\t\t\tthis.logger,\n\t\t\t\t\tpayload.data.url,\n\t\t\t\t\tpayload.data.authorization,\n\t\t\t\t\tpayload.data.id,\n\t\t\t\t\tpayload.data.name,\n\t\t\t\t\tpayload.data.projectId,\n\t\t\t\t\tpayload.data.orgId,\n\t\t\t\t\tpayload.data.transactionId\n\t\t\t\t);\n\t\t\t} catch (ex) {\n\t\t\t\trecordException(span, ex);\n\t\t\t\tthrow ex;\n\t\t\t} finally {\n\t\t\t\tspan.end();\n\t\t\t}\n\t\t});\n\t}\n}\n","import { AsyncLocalStorage } from 'node:async_hooks';\nimport { ReadableStream } from 'node:stream/web';\nimport {\n\tSpanStatusCode,\n\ttype Exception,\n\ttype Tracer,\n\ttype Span,\n\tcontext,\n\ttrace,\n\ttype Meter,\n\tValueType,\n} from '@opentelemetry/api';\nimport type { ServerRoute, ServerRequest } from '../server/types';\nimport type {\n\tAgentHandler,\n\tAgentContext,\n\tAgentResponseData,\n\tGetAgentRequestParams,\n\tRemoteAgent,\n\tAgentConfig,\n\tAgentRedirectResponse,\n\tReadableDataType,\n} from '../types';\nimport AgentRequestHandler from './request';\nimport AgentResponseHandler from './response';\nimport type { Logger } from '../logger';\nimport AgentResolver from '../server/agents';\n\ninterface RouterConfig {\n\thandler: AgentHandler;\n\tcontext: AgentContext;\n\tport: number;\n}\n\ninterface AgentContextStore {\n\tagentId?: string;\n\tagentName?: string;\n\tprojectId?: string;\n\tdeploymentId?: string;\n\torgId?: string;\n\tlogger?: Logger;\n}\n\nexport const asyncStorage = new AsyncLocalStorage<AgentContextStore>();\n\n// Globals to store context values\nlet globalTracer: Tracer | undefined;\nlet globalMeter: Meter | undefined;\nlet globalSDKVersion: string | undefined;\n\n/**\n * Gets the tracer from the global context\n *\n * @returns The tracer instance\n * @throws Error if not set\n */\nexport function getTracer(): Tracer {\n\tif (!globalTracer) {\n\t\tthrow new Error('tracer not set');\n\t}\n\treturn globalTracer;\n}\n\n/**\n * Gets the meter from the global context\n *\n * @returns The meter instance\n * @throws Error if not set\n */\nexport function getMeter(): Meter {\n\tif (!globalMeter) {\n\t\tthrow new Error('meter not set');\n\t}\n\treturn globalMeter;\n}\n\n/**\n * get the version of the Agentuity SDK\n */\nexport function getSDKVersion(): string {\n\tif (!globalSDKVersion) {\n\t\tthrow new Error('sdkVersion not set');\n\t}\n\treturn globalSDKVersion;\n}\n\n/**\n * get the current executing agent details (agentId, agentName) or\n * null if not executing in an agent context\n */\nexport function getAgentDetail(): Record<string, string | undefined> | null {\n\tconst store = asyncStorage.getStore();\n\tif (!store) return null;\n\tconst { logger: _logger, ...details } = store;\n\treturn Object.keys(details).length > 0 ? details : null;\n}\n\n/**\n * Records an exception in the span and logs it\n *\n * @param span - The span to record the exception in\n * @param ex - The exception to record\n */\nexport function recordException(span: Span, ex: unknown, skipLog = false) {\n\t// annotate the exception with a flag to avoid double logging\n\tconst __exception = ex as { __exception_recorded?: true };\n\tif (__exception?.__exception_recorded) {\n\t\treturn;\n\t}\n\tif (!skipLog) {\n\t\tconst store = asyncStorage.getStore() as { logger?: Logger } | undefined;\n\t\tif (store?.logger) {\n\t\t\tstore.logger.error('%s', ex);\n\t\t} else {\n\t\t\tconsole.error(ex);\n\t\t}\n\t}\n\t__exception.__exception_recorded = true;\n\tspan.recordException(ex as Exception);\n\tspan.setStatus({\n\t\tcode: SpanStatusCode.ERROR,\n\t\tmessage: (ex as { message: string }).message,\n\t});\n}\n\nasync function agentRedirectRun(\n\tlogger: Logger,\n\tconfig: RouterConfig,\n\tfromAgent: AgentConfig,\n\tremoteAgent: RemoteAgent,\n\tparams: Parameters<RemoteAgent['run']>\n): Promise<ReturnType<RemoteAgent['run']>> {\n\t// Get the current active context\n\tconst currentContext = context.active();\n\n\t// Create a child span using the current context\n\tconst span = config.context.tracer.startSpan(\n\t\t'agent.redirect',\n\t\t{\n\t\t\tattributes: {\n\t\t\t\tfromAgentName: fromAgent.name,\n\t\t\t\tfromAgentId: fromAgent.id,\n\t\t\t\ttoAgentName: remoteAgent.name,\n\t\t\t\ttoAgentId: remoteAgent.id,\n\t\t\t},\n\t\t},\n\t\tcurrentContext\n\t);\n\n\ttry {\n\t\t// Create a new context with the child span\n\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\tconst agentDetail: AgentContextStore = {\n\t\t\tagentId: remoteAgent.id,\n\t\t\tagentName: remoteAgent.name,\n\t\t\tprojectId: config.context.projectId,\n\t\t\tdeploymentId: config.context.deploymentId,\n\t\t\torgId: config.context.orgId,\n\t\t\tlogger,\n\t\t};\n\n\t\t// Use asyncStorage for agent details\n\t\treturn await asyncStorage.run(agentDetail, async () => {\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst res = await remoteAgent.run(...params);\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn res;\n\t\t\t\t} catch (err) {\n\t\t\t\t\trecordException(span, err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t} finally {\n\t\tspan.end();\n\t}\n}\n\nfunction createEmptyStream() {\n\treturn new ReadableStream({\n\t\tstart(controller) {\n\t\t\tcontroller.close();\n\t\t},\n\t});\n}\n\n/**\n * Creates a router handler for the specified configuration\n *\n * @param config - The router configuration\n * @returns A handler function for server routes\n */\nexport function createRouter(config: RouterConfig): ServerRoute['handler'] {\n\tconst requests = config.context.meter.createCounter('requests', {\n\t\tdescription: 'The number of requests to the agent',\n\t\tunit: 'requests',\n\t\tvalueType: ValueType.INT,\n\t});\n\n\tlet executingCount = 0;\n\n\tconst executing = config.context.meter.createGauge('executing', {\n\t\tdescription: 'The number of requests being processed',\n\t\tunit: 'concurrent',\n\t\tvalueType: ValueType.INT,\n\t});\n\n\t// Set globals for this router\n\tglobalTracer = config.context.tracer;\n\tglobalMeter = config.context.meter;\n\tglobalSDKVersion = config.context.sdkVersion;\n\n\treturn async (req: ServerRequest): Promise<AgentResponseData | Response> => {\n\t\tconst agentId = config.context.agent.id;\n\t\tlet runId = req.request.runId;\n\t\tif (req.headers['x-agentuity-runid']) {\n\t\t\trunId = req.headers['x-agentuity-runid'];\n\t\t\tif (runId) {\n\t\t\t\t// biome-ignore lint/performance/noDelete:\n\t\t\t\tdelete req.headers['x-agentuity-runid'];\n\t\t\t\tif (req.request?.metadata?.['runid'] === runId) {\n\t\t\t\t\t// biome-ignore lint/performance/noDelete:\n\t\t\t\t\tdelete req.request.metadata['runid'];\n\t\t\t\t}\n\t\t\t}\n\t\t\treq.request.runId = runId;\n\t\t}\n\t\tconst logger = config.context.logger.child({\n\t\t\t'@agentuity/agentId': agentId,\n\t\t\t'@agentuity/agentName': config.context.agent.name,\n\t\t});\n\n\t\tconst resolver = new AgentResolver(\n\t\t\tlogger,\n\t\t\tconfig.context.agents,\n\t\t\tconfig.port,\n\t\t\tconfig.context.projectId,\n\t\t\tagentId\n\t\t);\n\n\t\t// Get the current active context\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = config.context.tracer.startSpan(\n\t\t\t'agent.run',\n\t\t\t{\n\t\t\t\tattributes: {\n\t\t\t\t\t'@agentuity/agentName': config.context.agent.name,\n\t\t\t\t\t'@agentuity/agentId': agentId,\n\t\t\t\t},\n\t\t\t},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\tif (!runId) {\n\t\t\t\trunId = span.spanContext().traceId;\n\t\t\t\treq.request.runId = runId;\n\t\t\t}\n\n\t\t\texecutingCount++;\n\n\t\t\trequests.add(1, {\n\t\t\t\t'@agentuity/projectId': config.context.projectId,\n\t\t\t\t'@agentuity/deploymentId': config.context.deploymentId,\n\t\t\t\t'@agentuity/orgId': config.context.orgId,\n\t\t\t});\n\n\t\t\texecuting.record(executingCount, {\n\t\t\t\t'@agentuity/projectId': config.context.projectId,\n\t\t\t\t'@agentuity/deploymentId': config.context.deploymentId,\n\t\t\t\t'@agentuity/orgId': config.context.orgId,\n\t\t\t});\n\n\t\t\tconst agentDetail: AgentContextStore = {\n\t\t\t\tagentId: config.context.agent.id,\n\t\t\t\tagentName: config.context.agent.name,\n\t\t\t\tprojectId: config.context.projectId,\n\t\t\t\tdeploymentId: config.context.deploymentId,\n\t\t\t\torgId: config.context.orgId,\n\t\t\t\tlogger,\n\t\t\t};\n\n\t\t\treturn await asyncStorage.run(agentDetail, async () => {\n\t\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\t\tconst body = req.body\n\t\t\t\t\t\t? (req.body as unknown as ReadableStream<ReadableDataType>)\n\t\t\t\t\t\t: createEmptyStream();\n\t\t\t\t\tconst request = new AgentRequestHandler(\n\t\t\t\t\t\treq.request.trigger,\n\t\t\t\t\t\tbody,\n\t\t\t\t\t\treq.request.contentType,\n\t\t\t\t\t\treq.request.metadata ?? { headers: req.headers }\n\t\t\t\t\t);\n\t\t\t\t\tconst response = new AgentResponseHandler();\n\t\t\t\t\tconst contextObj = {\n\t\t\t\t\t\t...config.context,\n\t\t\t\t\t\tlogger,\n\t\t\t\t\t\trunId,\n\t\t\t\t\t\tgetAgent: (params: GetAgentRequestParams) =>\n\t\t\t\t\t\t\tresolver.getAgent(params),\n\t\t\t\t\t\tscope: req.request.scope,\n\t\t\t\t\t} as AgentContext;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet handlerResponse = await config.handler(\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\tresponse,\n\t\t\t\t\t\t\tcontextObj\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (handlerResponse === undefined) {\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t'handler returned undefined instead of a response'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (handlerResponse === null) {\n\t\t\t\t\t\t\tthrow new Error('handler returned null instead of a response');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (handlerResponse instanceof Response) {\n\t\t\t\t\t\t\treturn await handlerResponse;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof handlerResponse === 'string') {\n\t\t\t\t\t\t\thandlerResponse = await response.text(handlerResponse);\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t'contentType' in handlerResponse &&\n\t\t\t\t\t\t\t'payload' in handlerResponse\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst r = handlerResponse as AgentResponseData;\n\t\t\t\t\t\t\thandlerResponse = {\n\t\t\t\t\t\t\t\tdata: r.data,\n\t\t\t\t\t\t\t\tmetadata: r.metadata,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t'redirect' in handlerResponse &&\n\t\t\t\t\t\t\thandlerResponse.redirect &&\n\t\t\t\t\t\t\t'agent' in handlerResponse\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst redirect = handlerResponse as AgentRedirectResponse;\n\t\t\t\t\t\t\tconst agent = await contextObj.getAgent(redirect.agent);\n\t\t\t\t\t\t\treq.setTimeout(255); // increase the timeout for the redirect\n\t\t\t\t\t\t\tconst redirectResponse = await agentRedirectRun(\n\t\t\t\t\t\t\t\tlogger,\n\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\tconfig.context.agent,\n\t\t\t\t\t\t\t\tagent,\n\t\t\t\t\t\t\t\t[redirect.invocation ?? req.request]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\t\treturn redirectResponse;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\treturn handlerResponse;\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\trecordException(span, err);\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t} finally {\n\t\t\texecutingCount--;\n\t\t\texecuting.record(executingCount, {\n\t\t\t\t'@agentuity/projectId': config.context.projectId,\n\t\t\t\t'@agentuity/deploymentId': config.context.deploymentId,\n\t\t\t\t'@agentuity/orgId': config.context.orgId,\n\t\t\t});\n\t\t\tspan.end();\n\t\t}\n\t};\n}\n","import { getSDKVersion } from '../router/router';\n\n// allow the fetch function to be overridden\nlet apiFetch = globalThis.fetch;\n\n// only used in tests\nexport function setFetch(f: typeof fetch) {\n\tapiFetch = f;\n}\n\ninterface ApiRequestWithPath {\n\t/**\n\t * The path to send the request to\n\t */\n\tpath: string;\n}\ninterface ApiRequestWithUrl {\n\t/**\n\t * The full URL to send the request to\n\t */\n\turl: string;\n}\n\ntype ApiRequestOptions = ApiRequestWithPath | ApiRequestWithUrl;\n\ninterface ApiRequestBase {\n\tmethod: 'POST' | 'GET' | 'PUT' | 'DELETE';\n\ttimeout?: number;\n\theaders?: Record<string, string>;\n\tauthToken?: string;\n}\n\ntype BaseApiRequest = ApiRequestOptions & ApiRequestBase;\n\n/**\n * Represents the body of an API request\n */\nexport type Body = string | ArrayBuffer | ReadableStream | Blob | FormData;\n\ntype GetApiRequest = BaseApiRequest & {\n\tmethod: 'GET';\n\tbody?: never;\n};\n\ntype PostApiRequest = BaseApiRequest & {\n\tmethod: 'POST';\n\tbody: Body;\n};\n\ntype PutApiRequest = BaseApiRequest & {\n\tmethod: 'PUT';\n\tbody: Body;\n};\n\ntype DeleteApiRequest = BaseApiRequest & {\n\tmethod: 'DELETE';\n\tbody?: Body;\n};\n\ntype ApiRequest =\n\t| GetApiRequest\n\t| PostApiRequest\n\t| PutApiRequest\n\t| DeleteApiRequest;\n\ninterface APIResponse<T> {\n\tjson: T | null;\n\theaders: Response['headers'];\n\tstatus: number;\n\tresponse: Response;\n}\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n/**\n * Sends an API request\n *\n * @param request - The API request to send\n * @param forceBuffer - Whether to force the response to be treated as a buffer\n * @param attempt - The current attempt number (for retries)\n * @returns The API response\n * @throws Error if the API key is not set\n */\nexport async function send<K>(\n\trequest: ApiRequest,\n\tforceBuffer = false,\n\tattempt = 1\n): Promise<APIResponse<K>> {\n\tconst apiKey =\n\t\trequest.authToken ??\n\t\t(process.env.AGENTUITY_SDK_KEY || process.env.AGENTUITY_API_KEY);\n\tif (!apiKey) {\n\t\tthrow new Error('AGENTUITY_API_KEY or AGENTUITY_SDK_KEY is not set');\n\t}\n\tconst url =\n\t\t'path' in request\n\t\t\t? new URL(\n\t\t\t\t\trequest.path,\n\t\t\t\t\tprocess.env.AGENTUITY_TRANSPORT_URL || 'https://agentuity.ai/'\n\t\t\t\t)\n\t\t\t: new URL(request.url);\n\tconst sdkVersion = getSDKVersion();\n\tconst headers: Record<string, string> = {\n\t\tAccept: 'application/json',\n\t\t'Content-Type': 'application/json',\n\t\t'User-Agent': `Agentuity JS SDK/${sdkVersion}`,\n\t};\n\t// allow headers to be overridden\n\tfor (const key in request.headers) {\n\t\theaders[key] = request.headers[key];\n\t}\n\t// this shouldn't be overridden\n\theaders.Authorization = `Bearer ${apiKey}`;\n\tconst resp = await apiFetch(url, {\n\t\tmethod: request.method,\n\t\tbody: request.body,\n\t\theaders,\n\t\tkeepalive: true,\n\t\tsignal: AbortSignal.timeout(request.timeout || 20_000),\n\t});\n\tlet json: K | null = null;\n\tswitch (resp.status) {\n\t\tcase 429: {\n\t\t\tif (attempt < 3) {\n\t\t\t\tconst wait = 250 * 2 ** attempt;\n\t\t\t\tawait sleep(wait);\n\t\t\t\treturn send(request, forceBuffer, attempt + 1);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 200:\n\t\tcase 201:\n\t\tcase 202: {\n\t\t\tif (!forceBuffer) {\n\t\t\t\tconst contentType = resp.headers.get('content-type');\n\t\t\t\tif (contentType?.includes('/json')) {\n\t\t\t\t\tjson = (await resp.json()) as K;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\treturn {\n\t\tjson,\n\t\theaders: resp.headers,\n\t\tstatus: resp.status,\n\t\tresponse: resp,\n\t};\n}\n\n/**\n * Sends a GET request\n *\n * @param path - The path to send the request to\n * @param forceBuffer - Whether to force the response to be treated as a buffer\n * @param headers - Additional headers for the request\n * @param timeout - The timeout for the request\n * @returns The API response\n */\nexport async function GET<K>(\n\tpath: string,\n\tforceBuffer?: boolean,\n\theaders?: Record<string, string>,\n\ttimeout?: number\n) {\n\treturn send<K>(\n\t\t{\n\t\t\tmethod: 'GET',\n\t\t\tpath,\n\t\t\theaders,\n\t\t\ttimeout,\n\t\t} as GetApiRequest,\n\t\tforceBuffer\n\t);\n}\n\n/**\n * Sends a POST request\n *\n * @param path - The path to send the request to\n * @param body - The body of the request\n * @param headers - Additional headers for the request\n * @param timeout - The timeout for the request\n * @returns The API response\n */\nexport async function POST<K>(\n\tpath: string,\n\tbody: Body,\n\theaders?: Record<string, string>,\n\ttimeout?: number,\n\tauthToken?: string\n) {\n\treturn send<K>({\n\t\tmethod: 'POST',\n\t\tpath,\n\t\tbody,\n\t\theaders,\n\t\ttimeout,\n\t\tauthToken,\n\t} as PostApiRequest);\n}\n\n/**\n * Sends a PUT request\n *\n * @param path - The path to send the request to\n * @param body - The body of the request\n * @param headers - Additional headers for the request\n * @param timeout - The timeout for the request\n * @returns The API response\n */\nexport async function PUT<K>(\n\tpath: string,\n\tbody: Body,\n\theaders?: Record<string, string>,\n\ttimeout?: number\n) {\n\treturn send<K>({\n\t\tmethod: 'PUT',\n\t\tpath,\n\t\tbody,\n\t\ttimeout,\n\t\theaders,\n\t} as PutApiRequest);\n}\n\n/**\n * Sends a DELETE request\n *\n * @param path - The path to send the request to\n * @param body - The body of the request\n * @param headers - Additional headers for the request\n * @param timeout - The timeout for the request\n * @returns The API response\n */\nexport async function DELETE<K>(\n\tpath: string,\n\tbody?: Body,\n\theaders?: Record<string, string>,\n\ttimeout?: number\n) {\n\treturn send<K>({\n\t\tmethod: 'DELETE',\n\t\tpath,\n\t\tbody,\n\t\ttimeout,\n\t\theaders,\n\t} as DeleteApiRequest);\n}\n","import type { ReadableStream } from 'node:stream/web';\nimport { type ParsedMail, type Headers, simpleParser } from 'mailparser';\nimport { inspect } from 'node:util';\nimport MailComposer from 'nodemailer/lib/mail-composer';\nimport type { Address, Attachment } from 'nodemailer/lib/mailer';\nimport type {\n\tAgentContext,\n\tAgentRequest,\n\tData,\n\tDataType,\n\tReadableDataType,\n} from '../types';\nimport { fromDataType } from '../server/util';\nimport { DataHandler } from '../router/data';\nimport { send } from '../apis/api';\nimport { getTracer, recordException } from '../router/router';\nimport { context, trace, SpanStatusCode } from '@opentelemetry/api';\n\n/**\n * An attachment to an incoming email\n */\nexport interface IncomingEmailAttachment {\n\t/**\n\t * the filename of the attachment\n\t */\n\tfilename: string;\n\n\t/**\n\t * the data payload of the attachment. This is a promise that resolves to a Data object.\n\t */\n\tdata(): Promise<Data>;\n\n\t/**\n\t * the content disposition of the attachment. if not provided, it will be 'attachment'.\n\t */\n\tcontentDisposition: 'attachment' | 'inline';\n}\n\n/**\n * An attachment to an outgoing email\n */\nexport interface OutgoingEmailAttachment {\n\t/**\n\t * the filename of the attachment\n\t */\n\tfilename: string;\n\n\t/**\n\t * the data of the attachment\n\t */\n\tdata: DataType;\n\n\t/**\n\t * the content disposition of the attachment. if not provided, it will be 'attachment'.\n\t */\n\tcontentDisposition?: 'attachment' | 'inline' | undefined;\n}\n\nclass RemoteEmailAttachment implements IncomingEmailAttachment {\n\tpublic readonly filename: string;\n\tpublic readonly contentDisposition: 'attachment' | 'inline';\n\tprivate readonly _url: string;\n\n\tconstructor(\n\t\tfilename: string,\n\t\turl: string,\n\t\tcontentDisposition?: 'attachment' | 'inline'\n\t) {\n\t\tthis.filename = filename;\n\t\tthis.contentDisposition = contentDisposition ?? 'attachment';\n\t\tthis._url = url;\n\t}\n\n\tasync data(): Promise<Data> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.email.attachment',\n\t\t\t{},\n\t\t\tcurrentContext\n\t\t);\n\t\ttry {\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst res = await send({ url: this._url, method: 'GET' }, true);\n\t\t\t\tif (res.status === 200) {\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn new DataHandler(\n\t\t\t\t\t\tres.response.body as unknown as ReadableStream<ReadableDataType>,\n\t\t\t\t\t\tres.headers.get('content-type') ?? 'application/octet-stream'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tthrow new Error(`Failed to fetch attachment: ${res.status}`);\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n}\n\n/**\n * A reply to an email\n */\nexport interface EmailReply {\n\t/**\n\t * the subject of the reply. If not provided, it will be 'RE: <original subject>'.\n\t */\n\tsubject?: string;\n\n\t/**\n\t * the text body of the reply\n\t */\n\ttext: string;\n\n\t/**\n\t * the optional html body of the reply\n\t */\n\thtml?: string;\n\n\t/**\n\t * the optional attachments to the email\n\t */\n\tattachments?: OutgoingEmailAttachment[];\n}\n\n/**\n * A class representing an email with the common information so processing can be done on it.\n */\nexport class Email {\n\tprivate readonly _message: ParsedMail;\n\n\tconstructor(data: ParsedMail) {\n\t\tthis._message = data;\n\t}\n\n\t[inspect.custom]() {\n\t\treturn this.toString();\n\t}\n\n\ttoString() {\n\t\treturn `[Email id=${this.messageId()},from=${this.fromEmail()},subject=${this.subject()}]`;\n\t}\n\n\t/**\n\t * The date of the email.\n\t */\n\tdate(): Date | null {\n\t\treturn this._message.date ?? null;\n\t}\n\n\t/**\n\t * The message ID of the email.\n\t */\n\tmessageId(): string | null {\n\t\treturn this._message.messageId ?? null;\n\t}\n\n\t/**\n\t * The headers of the email.\n\t */\n\theaders(): Headers {\n\t\treturn this._message.headers;\n\t}\n\n\t/**\n\t * The email address of the recipient or null if there is no recipient.\n\t *\n\t * If the email has multiple recipients, the email addresses are comma separated.\n\t */\n\tto(): string | null {\n\t\tif (!this._message.to) {\n\t\t\treturn null;\n\t\t}\n\t\tif (Array.isArray(this._message.to)) {\n\t\t\treturn this._message.to.map((addr) => addr.text.trim()).join(', ');\n\t\t}\n\t\tif (typeof this._message.to === 'object' && 'text' in this._message.to) {\n\t\t\treturn this._message.to.text;\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * The email address of the sender or null if there is no sender.\n\t */\n\tfromEmail(): string | null {\n\t\treturn this._message.from?.value[0]?.address ?? null;\n\t}\n\n\t/**\n\t * The name of the sender or null if there is no name.\n\t */\n\tfromName(): string | null {\n\t\treturn this._message.from?.value[0]?.name ?? null;\n\t}\n\n\t/**\n\t * The subject of the email or null if there is no subject.\n\t */\n\tsubject(): string | null {\n\t\treturn this._message.subject ?? null;\n\t}\n\n\t/**\n\t * The plain text body of the email or null if there is no plain text body.\n\t */\n\ttext(): string | null {\n\t\treturn this._message.text ?? null;\n\t}\n\n\t/**\n\t * The HTML body of the email or null if there is no HTML body.\n\t */\n\thtml(): string | null {\n\t\treturn this._message.html ? this._message.html : null;\n\t}\n\n\t/**\n\t * The attachments of the email or an empty array if there are no attachments.\n\t */\n\tattachments(): IncomingEmailAttachment[] {\n\t\tif (!this._message.attachments || this._message.attachments.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._message.attachments.map((att) => {\n\t\t\tconst hv = att.headers.get('content-disposition') as {\n\t\t\t\tvalue: string;\n\t\t\t\tparams: Record<string, string>;\n\t\t\t};\n\t\t\tif (!hv || !hv.params) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Invalid attachment headers: missing content-disposition'\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (!hv.params.filename || !hv.params.url) {\n\t\t\t\tthrow new Error('Invalid attachment headers: missing filename or url');\n\t\t\t}\n\t\t\treturn new RemoteEmailAttachment(\n\t\t\t\thv.params.filename,\n\t\t\t\thv.params.url,\n\t\t\t\thv.value as 'attachment' | 'inline' | undefined\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate makeReplySubject(subject: string | undefined): string {\n\t\tif (subject) {\n\t\t\treturn subject;\n\t\t}\n\t\tconst _subject = this.subject();\n\t\tif (_subject) {\n\t\t\tif (_subject.toUpperCase().startsWith('RE:')) {\n\t\t\t\treturn _subject;\n\t\t\t}\n\t\t\treturn `RE: ${_subject}`;\n\t\t}\n\t\treturn '';\n\t}\n\n\t/**\n\t * send a reply to the email\n\t */\n\tasync sendReply(\n\t\treq: AgentRequest,\n\t\tcontext: AgentContext,\n\t\treply: EmailReply\n\t): Promise<string> {\n\t\tconst authToken = req.metadata?.['email-auth-token'] as string;\n\t\tif (!authToken) {\n\t\t\tthrow new Error(\n\t\t\t\t'email authorization token is required but not found in metadata'\n\t\t\t);\n\t\t}\n\t\t// biome-ignore lint/suspicious/noAsyncPromiseExecutor: <explanation>\n\t\treturn new Promise<string>(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tlet attachments: Attachment[] = [];\n\t\t\t\tif (reply.attachments) {\n\t\t\t\t\tattachments = await Promise.all(\n\t\t\t\t\t\treply.attachments.map(async (attachment) => {\n\t\t\t\t\t\t\tconst resp = await fromDataType(attachment.data);\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tfilename: attachment.filename,\n\t\t\t\t\t\t\t\tcontent: await resp.data.buffer(),\n\t\t\t\t\t\t\t\tcontentType: resp.data.contentType,\n\t\t\t\t\t\t\t\tcontentDisposition:\n\t\t\t\t\t\t\t\t\tattachment.contentDisposition ?? ('attachment' as const),\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst mail = new MailComposer({\n\t\t\t\t\tinReplyTo: this.messageId() ?? undefined,\n\t\t\t\t\treferences: this.messageId() ?? undefined,\n\t\t\t\t\tdate: new Date(),\n\t\t\t\t\tfrom: {\n\t\t\t\t\t\tname: context.agent.name,\n\t\t\t\t\t\taddress: this.to() as string,\n\t\t\t\t\t},\n\t\t\t\t\tto: {\n\t\t\t\t\t\tname: this.fromName() ?? undefined,\n\t\t\t\t\t\taddress: this.fromEmail() ?? undefined,\n\t\t\t\t\t} as Address,\n\t\t\t\t\tsubject: this.makeReplySubject(reply.subject),\n\t\t\t\t\ttext: reply.text,\n\t\t\t\t\thtml: reply.html,\n\t\t\t\t\tattachments,\n\t\t\t\t});\n\t\t\t\tconst newemail = mail.compile();\n\t\t\t\tnewemail.build(async (err, message) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait context.email.sendReply(\n\t\t\t\t\t\t\t\tcontext.agent.id,\n\t\t\t\t\t\t\t\tmessage.toString(),\n\t\t\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\t\t\tnewemail.messageId()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(newemail.messageId());\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\treject(ex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (ex) {\n\t\t\t\treject(ex);\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * Parse an email from a buffer and return an Email object.\n */\nexport async function parseEmail(data: Buffer): Promise<Email> {\n\ttry {\n\t\tconst message = await simpleParser(data);\n\t\treturn new Email(message);\n\t} catch (error) {\n\t\tthrow new Error(\n\t\t\t`Failed to parse email: ${error instanceof Error ? error.message : 'Unknown error'}`\n\t\t);\n\t}\n}\n","import { ReadableStream } from 'node:stream/web';\nimport type { Data, ReadableDataType, Json } from '../types';\nimport { safeParse } from '../server/util';\nimport { parseEmail, type Email } from '../io/email';\n\nconst invalidJsonSymbol = Symbol('invalid json');\n\n// regex to split the data into chunks\nconst chunkingRegexp = {\n\tword: /\\S+\\s+/m,\n\tline: /\\n+/m,\n};\n\n// milliseconds to wait between chunks to smooth out the stream\nconst chunkSmoothing = 10;\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nconst toBuffer = async (\n\tbuffer: Buffer,\n\tvalue: ReadableDataType\n): Promise<Buffer> => {\n\tif (value instanceof Uint8Array) {\n\t\treturn Buffer.concat([buffer, value]);\n\t}\n\tif (value instanceof ArrayBuffer) {\n\t\treturn Buffer.concat([buffer, Buffer.from(value)]);\n\t}\n\tif (value instanceof Blob) {\n\t\tconst buf = await value.arrayBuffer();\n\t\treturn Buffer.concat([buffer, Buffer.from(buf)]);\n\t}\n\tif (typeof value === 'string') {\n\t\treturn Buffer.concat([buffer, Buffer.from(value)]);\n\t}\n\tthrow new Error(`Unsupported value type: ${typeof value}`);\n};\n\n/**\n * The implementation of the Data interface\n */\nexport class DataHandler implements Data {\n\tprivate readonly _type: string;\n\tprivate _readstream?:\n\t\t| ReadableStream<ReadableDataType>\n\t\t| AsyncIterable<ReadableDataType>;\n\tprivate _buffer: Buffer;\n\tprivate _email?: Email;\n\n\tconstructor(\n\t\tstream:\n\t\t\t| string\n\t\t\t| Buffer\n\t\t\t| ReadableStream<ReadableDataType>\n\t\t\t| AsyncIterable<ReadableDataType>,\n\t\tcontentType: string\n\t) {\n\t\tthis._type = contentType ?? 'application/octet-stream';\n\t\tif (typeof stream === 'string') {\n\t\t\tthis._buffer = Buffer.from(stream);\n\t\t} else if (stream instanceof Buffer) {\n\t\t\tthis._buffer = stream;\n\t\t} else {\n\t\t\tthis._readstream = stream as unknown as\n\t\t\t\t| ReadableStream<ReadableDataType>\n\t\t\t\t| AsyncIterable<ReadableDataType>;\n\t\t\tthis._buffer = Buffer.alloc(0);\n\t\t}\n\t}\n\n\tprivate async ensureStreamLoaded(): Promise<Buffer> {\n\t\tif (this._buffer.length === 0 && this._readstream) {\n\t\t\tlet buffer: Buffer = Buffer.alloc(0);\n\t\t\tif (this._readstream instanceof ReadableStream) {\n\t\t\t\tconst reader = this._readstream.getReader();\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\t\tif (value) {\n\t\t\t\t\t\tbuffer = await toBuffer(buffer, value);\n\t\t\t\t\t}\n\t\t\t\t\tif (done) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor await (const chunk of this._readstream) {\n\t\t\t\t\tbuffer = await toBuffer(buffer, chunk);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._buffer = buffer;\n\t\t\tthis._readstream = undefined;\n\t\t}\n\t\treturn this._buffer;\n\t}\n\n\tpublic toString() {\n\t\treturn `[Data ${this._type}]`;\n\t}\n\n\tprivate async data(): Promise<Buffer> {\n\t\treturn this.ensureStreamLoaded();\n\t}\n\n\tget contentType(): string {\n\t\treturn this._type;\n\t}\n\n\tasync base64(): Promise<string> {\n\t\tconst data = await this.data();\n\t\treturn data.toString('base64');\n\t}\n\n\tasync text(): Promise<string> {\n\t\tconst data = await this.data();\n\t\tif (!data || data.length === 0) {\n\t\t\treturn '';\n\t\t}\n\t\treturn data.toString('utf-8');\n\t}\n\n\tasync json(): Promise<Json> {\n\t\tconst text = await this.text();\n\t\tif (!text || text.trim() === '') {\n\t\t\tthrow new Error('Cannot parse empty JSON');\n\t\t}\n\t\tconst res = safeParse(text, invalidJsonSymbol);\n\t\tif (res === invalidJsonSymbol) {\n\t\t\tthrow new Error('The content type is not valid JSON');\n\t\t}\n\t\treturn res as Json;\n\t}\n\n\tasync object<T>(): Promise<T> {\n\t\ttry {\n\t\t\tconst res = await this.json();\n\t\t\treturn res as T;\n\t\t} catch (error) {\n\t\t\tthrow new Error(\n\t\t\t\t`Failed to parse object: ${error instanceof Error ? error.message : String(error)}`\n\t\t\t);\n\t\t}\n\t}\n\n\tasync binary(): Promise<Uint8Array> {\n\t\tconst data = await this.data();\n\t\treturn new Uint8Array(data);\n\t}\n\n\tasync blob(): Promise<Blob> {\n\t\tconst data = await this.data();\n\t\treturn new Blob([data], { type: this.contentType });\n\t}\n\n\tasync arrayBuffer(): Promise<ArrayBuffer> {\n\t\tconst data = await this.data();\n\t\treturn data.buffer as ArrayBuffer;\n\t}\n\n\tasync stream(): Promise<ReadableStream<ReadableDataType>> {\n\t\tif (this._readstream) {\n\t\t\tif (this._readstream instanceof ReadableStream) {\n\t\t\t\treturn this._readstream;\n\t\t\t}\n\t\t\tconst iterator = this._readstream;\n\t\t\treturn new ReadableStream({\n\t\t\t\tasync start(controller) {\n\t\t\t\t\tfor await (const chunk of iterator) {\n\t\t\t\t\t\tcontroller.enqueue(chunk);\n\t\t\t\t\t}\n\t\t\t\t\tcontroller.close();\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t\tconst dataPromise = this.data();\n\t\tconst chunkable = this.isTextChunkable();\n\t\tconst contentType = this.contentType;\n\t\treturn new ReadableStream({\n\t\t\tasync start(controller) {\n\t\t\t\tconst data = await dataPromise;\n\t\t\t\tif (!chunkable) {\n\t\t\t\t\tcontroller.enqueue(data);\n\t\t\t\t\tcontroller.close();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst chunkby = contentType.startsWith('text/') ? 'word' : 'line';\n\t\t\t\tconst re = chunkingRegexp[chunkby];\n\t\t\t\tlet match: RegExpExecArray | null;\n\t\t\t\tlet buffer = data.toString('utf-8');\n\t\t\t\tmatch = re.exec(buffer);\n\t\t\t\twhile (match !== null) {\n\t\t\t\t\tconst chunk = match[0];\n\t\t\t\t\tcontroller.enqueue(Buffer.from(chunk));\n\t\t\t\t\tbuffer = buffer.slice(chunk.length);\n\t\t\t\t\tmatch = re.exec(buffer);\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tawait sleep(chunkSmoothing);\n\t\t\t\t}\n\t\t\t\t// in case we have a partial chunk remaining, we need to enqueue it\n\t\t\t\tif (buffer.length > 0) {\n\t\t\t\t\tcontroller.enqueue(Buffer.from(buffer));\n\t\t\t\t}\n\t\t\t\tcontroller.close();\n\t\t\t},\n\t\t});\n\t}\n\n\tasync email(): Promise<Email> {\n\t\tif (this.contentType !== 'message/rfc822') {\n\t\t\tthrow new Error('The content type is not a valid email');\n\t\t}\n\t\tif (this._email) {\n\t\t\treturn this._email;\n\t\t}\n\t\tconst data = await this.data();\n\t\tthis._email = await parseEmail(data);\n\t\treturn this._email;\n\t}\n\n\tprivate isTextChunkable() {\n\t\treturn (\n\t\t\tthis.contentType.startsWith('text/') ||\n\t\t\tthis.contentType === 'application/json'\n\t\t);\n\t}\n\n\tasync buffer(): Promise<Buffer> {\n\t\treturn this.data();\n\t}\n}\n","import type { ReadableStream } from 'node:stream/web';\nimport type {\n\tAgentRequest,\n\tJson,\n\tJsonObject,\n\tReadableDataType,\n\tTriggerType,\n} from '../types';\nimport { DataHandler } from './data';\n\n/**\n * Handles agent requests and provides methods to access request data in various formats\n */\nexport default class AgentRequestHandler implements AgentRequest {\n\tprivate readonly _trigger: TriggerType;\n\tprivate readonly _datahandler: DataHandler;\n\tprivate readonly _metadata: JsonObject;\n\n\t/**\n\t * constructor\n\t *\n\t * @param trigger - The trigger of the request\n\t * @param stream - The stream of the request\n\t * @param contentType - The content type of the request\n\t * @param metadata - The metadata of the request\n\t */\n\tconstructor(\n\t\ttrigger: TriggerType,\n\t\tstream: ReadableStream<ReadableDataType> | AsyncIterable<ReadableDataType>,\n\t\tcontentType: string,\n\t\tmetadata: JsonObject\n\t) {\n\t\tthis._trigger = trigger;\n\t\tthis._datahandler = new DataHandler(stream, contentType);\n\t\tthis._metadata = metadata;\n\t}\n\n\t/**\n\t * get the trigger of the request\n\t */\n\tget trigger(): TriggerType {\n\t\treturn this._trigger;\n\t}\n\n\t/**\n\t * get the data of the request\n\t */\n\tget data(): DataHandler {\n\t\treturn this._datahandler;\n\t}\n\n\t/**\n\t * get the metadata object of the request\n\t */\n\tget metadata(): JsonObject {\n\t\treturn this._metadata;\n\t}\n\n\t/**\n\t * get the metadata value of the request\n\t */\n\tget(key: string, defaultValue?: Json) {\n\t\tconst metadata = this._metadata;\n\t\tif (key in metadata) {\n\t\t\treturn metadata[key];\n\t\t}\n\t\treturn defaultValue ?? null;\n\t}\n}\n","import type { Server, UnifiedServerConfig, ServerRoute } from './types';\nimport type { ReadableStream } from 'node:stream/web';\nimport { context, trace, SpanKind, SpanStatusCode } from '@opentelemetry/api';\nimport {\n\textractTraceContextFromBunRequest,\n\tinjectTraceContextToHeaders,\n} from './otel';\nimport {\n\tgetRoutesHelpText,\n\tcreateStreamingResponse,\n\ttoWelcomePrompt,\n\tgetRequestFromHeaders,\n\tshouldIgnoreStaticFile,\n} from './util';\nimport type {\n\tAgentResponseData,\n\tAgentWelcomeResult,\n\tReadableDataType,\n} from '../types';\n\nconst idleTimeout = 255; // expressed in seconds\n\n/**\n * Bun implementation of the Server interface\n */\nexport class BunServer implements Server {\n\tprivate server: ReturnType<typeof Bun.serve> | null = null;\n\tprivate config: UnifiedServerConfig;\n\n\t/**\n\t * Creates a new Bun server\n\t *\n\t * @param config - The server configuration\n\t */\n\tconstructor(config: UnifiedServerConfig) {\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Starts the server\n\t *\n\t * @throws Error if the server is already running\n\t */\n\tasync start(): Promise<void> {\n\t\tif (this.server) {\n\t\t\tthrow new Error('Server is already running');\n\t\t}\n\n\t\tconst routeMap = new Map<string, ServerRoute>();\n\n\t\t// Create a map of routes for faster lookup\n\t\tfor (const route of this.config.routes) {\n\t\t\tconst key = `${route.method}:${route.path}`;\n\t\t\trouteMap.set(key, route);\n\t\t}\n\n\t\tlet theserver: ReturnType<typeof Bun.serve> | null = null;\n\n\t\tconst devmode = process.env.AGENTUITY_SDK_DEV_MODE === 'true';\n\t\tconst { sdkVersion, logger } = this.config;\n\t\tconst hostname =\n\t\t\tprocess.env.AGENTUITY_ENV === 'development' ? '127.0.0.1' : '0.0.0.0';\n\n\t\tthis.server = theserver = Bun.serve({\n\t\t\tport: this.config.port,\n\t\t\thostname,\n\t\t\tidleTimeout: idleTimeout,\n\t\t\troutes: {\n\t\t\t\t'/': {\n\t\t\t\t\tGET: async (req) => {\n\t\t\t\t\t\tconst helpText = getRoutesHelpText(\n\t\t\t\t\t\t\treq.headers.get('host') ?? '127.0.0.1:3500',\n\t\t\t\t\t\t\tthis.config.routes\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn new Response(helpText, {\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'text/plain',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t'/_health': new Response('OK', {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'x-agentuity-version': sdkVersion,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t\t'/welcome': {\n\t\t\t\t\tGET: async () => {\n\t\t\t\t\t\tconst result: Record<string, AgentWelcomeResult> = {};\n\t\t\t\t\t\tfor (const route of this.config.routes) {\n\t\t\t\t\t\t\tif (route.welcome) {\n\t\t\t\t\t\t\t\tlet r = route.welcome();\n\t\t\t\t\t\t\t\tif (r instanceof Promise) {\n\t\t\t\t\t\t\t\t\tr = await r;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (r.prompts) {\n\t\t\t\t\t\t\t\t\tfor (let c = 0; c < r.prompts.length; c++) {\n\t\t\t\t\t\t\t\t\t\tconst p = r.prompts[c];\n\t\t\t\t\t\t\t\t\t\tr.prompts[c] = await toWelcomePrompt(p);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresult[route.agent.id] = r;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new Response(JSON.stringify(result), {\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t'/welcome/:id': {\n\t\t\t\t\tGET: async (req) => {\n\t\t\t\t\t\tconst url = new URL(req.url);\n\t\t\t\t\t\tconst id = url.pathname.slice(5);\n\t\t\t\t\t\tfor (const route of this.config.routes) {\n\t\t\t\t\t\t\tif (route.agent.id === id && route.welcome) {\n\t\t\t\t\t\t\t\tlet r = route.welcome();\n\t\t\t\t\t\t\t\tif (r instanceof Promise) {\n\t\t\t\t\t\t\t\t\tr = await r;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (r.prompts) {\n\t\t\t\t\t\t\t\t\tfor (let c = 0; c < r.prompts.length; c++) {\n\t\t\t\t\t\t\t\t\t\tconst p = r.prompts[c];\n\t\t\t\t\t\t\t\t\t\tr.prompts[c] = await toWelcomePrompt(p);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn new Response(JSON.stringify(r), {\n\t\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new Response('Not Found', {\n\t\t\t\t\t\t\tstatus: 404,\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tasync fetch(req) {\n\t\t\t\tconst method = req.method;\n\n\t\t\t\tif (method === 'OPTIONS') {\n\t\t\t\t\treturn new Response('OK', {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t\t\t'Access-Control-Allow-Methods':\n\t\t\t\t\t\t\t\t'GET, PUT, DELETE, PATCH, OPTIONS, POST',\n\t\t\t\t\t\t\t'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\ttheserver?.timeout(req, 0);\n\n\t\t\t\tconst url = new URL(req.url);\n\n\t\t\t\t// Extract trace context from headers\n\t\t\t\tconst extractedContext = extractTraceContextFromBunRequest(req);\n\n\t\t\t\t// Execute the request handler within the extracted context\n\t\t\t\treturn context.with(extractedContext, async (): Promise<Response> => {\n\t\t\t\t\t// Create a span for this incoming request\n\t\t\t\t\treturn trace.getTracer('http-server').startActiveSpan(\n\t\t\t\t\t\t`HTTP ${method}`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: SpanKind.SERVER,\n\t\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t\t'http.method': method,\n\t\t\t\t\t\t\t\t'http.url': req.url,\n\t\t\t\t\t\t\t\t'http.host': url.host,\n\t\t\t\t\t\t\t\t'http.user_agent': req.headers.get('user-agent') || '',\n\t\t\t\t\t\t\t\t'http.path': url.pathname,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tasync (span): Promise<Response> => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst agentId = url.pathname.split('/')[1]; // in case we have extra path segments, we need to get the first one for agents\n\t\t\t\t\t\t\t\tconst routeKey = `POST:/${agentId}`;\n\t\t\t\t\t\t\t\tconst route = routeMap.get(routeKey);\n\n\t\t\t\t\t\t\t\tif (!route) {\n\t\t\t\t\t\t\t\t\t// ignore common static files\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tmethod === 'GET' &&\n\t\t\t\t\t\t\t\t\t\tshouldIgnoreStaticFile(url.pathname)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tspan.setAttribute('http.status_code', '404');\n\t\t\t\t\t\t\t\t\t\treturn new Response('Not Found', {\n\t\t\t\t\t\t\t\t\t\t\tstatus: 404,\n\t\t\t\t\t\t\t\t\t\t\theaders: injectTraceContextToHeaders(),\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t\t\t\t'agent not found: %s for: %s',\n\t\t\t\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\t\t\t\turl.pathname\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\t\t\tmessage: `No Agent found at ${url.pathname}`,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\treturn new Response('Not Found', {\n\t\t\t\t\t\t\t\t\t\tstatus: 404,\n\t\t\t\t\t\t\t\t\t\theaders: injectTraceContextToHeaders(),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tspan.setAttribute('@agentuity/agentName', route.agent.name);\n\t\t\t\t\t\t\t\tspan.setAttribute('@agentuity/agentId', route.agent.id);\n\t\t\t\t\t\t\t\tlogger.debug('request: %s %s', method, url.pathname);\n\n\t\t\t\t\t\t\t\tconst runId = span.spanContext().traceId;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst routeResult = route.handler({\n\t\t\t\t\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\t\t\t\t\t(req.body as unknown as\n\t\t\t\t\t\t\t\t\t\t\t\t| ReadableStream<ReadableDataType>\n\t\t\t\t\t\t\t\t\t\t\t\t| AsyncIterable<ReadableDataType>) ?? undefined,\n\t\t\t\t\t\t\t\t\t\turl: req.url,\n\t\t\t\t\t\t\t\t\t\theaders: req.headers.toJSON(),\n\t\t\t\t\t\t\t\t\t\trequest: getRequestFromHeaders(req.headers.toJSON(), runId),\n\t\t\t\t\t\t\t\t\t\tsetTimeout: (val: number) => void 0,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\treturn createStreamingResponse(\n\t\t\t\t\t\t\t\t\t\treq.headers.get('origin'),\n\t\t\t\t\t\t\t\t\t\t`Agentuity BunJS/${sdkVersion}`,\n\t\t\t\t\t\t\t\t\t\tspan,\n\t\t\t\t\t\t\t\t\t\trouteResult as Promise<AgentResponseData>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\tspan.recordException(error as Error);\n\t\t\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\t\t\tmessage: (error as Error).message,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tspan.setAttribute('http.status_code', '500');\n\t\t\t\t\t\t\t\t\treturn new Response('Internal Server Error', {\n\t\t\t\t\t\t\t\t\t\tstatus: 500,\n\t\t\t\t\t\t\t\t\t\theaders: injectTraceContextToHeaders(),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t},\n\t\t\terror(error) {\n\t\t\t\tconst { stack, message } = error as Error;\n\t\t\t\tlet errorMessage = message;\n\t\t\t\tif (devmode) {\n\t\t\t\t\terrorMessage = stack ?? errorMessage;\n\t\t\t\t}\n\t\t\t\treturn new Response(errorMessage, {\n\t\t\t\t\tstatus: 500,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'text/plain',\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t},\n\t\t});\n\n\t\tthis.config.logger.info('Bun server started on port %d', this.config.port);\n\t}\n\n\t/**\n\t * Stops the server\n\t */\n\tasync stop(): Promise<void> {\n\t\tif (!this.server) {\n\t\t\treturn;\n\t\t}\n\t\tconst server = this.server;\n\t\tthis.server = null;\n\t\tthis.config.logger.debug('server stopping');\n\t\tawait server.stop();\n\t\tthis.config.logger.info('server stopped');\n\t}\n}\n","import type { Server, ServerRoute, UnifiedServerConfig } from './types';\nimport type { ReadableStream } from 'node:stream/web';\nimport type { Logger } from '../logger';\nimport {\n\tcreateServer as createHttpServer,\n\ttype IncomingMessage,\n} from 'node:http';\nimport { context, trace, SpanKind, SpanStatusCode } from '@opentelemetry/api';\nimport {\n\textractTraceContextFromNodeRequest,\n\tinjectTraceContextToHeaders,\n\tinjectTraceContextToNodeResponse,\n} from './otel';\nimport {\n\tsafeStringify,\n\tgetRoutesHelpText,\n\tcreateStreamingResponse,\n\ttoWelcomePrompt,\n\tgetRequestFromHeaders,\n\tshouldIgnoreStaticFile,\n} from './util';\nimport type { AgentResponseData, AgentWelcomeResult } from '../types';\nimport { Readable } from 'node:stream';\n\nexport const MAX_REQUEST_TIMEOUT = 60_000 * 10;\n\n/**\n * Node.js implementation of the Server interface\n */\nexport class NodeServer implements Server {\n\tprivate readonly logger: Logger;\n\tprivate readonly port: number;\n\tprivate readonly routes: ServerRoute[];\n\tprivate server: ReturnType<typeof createHttpServer> | null = null;\n\tprivate readonly sdkVersion: string;\n\n\t/**\n\t * Creates a new Node.js server\n\t *\n\t * @param config - The server configuration\n\t */\n\tconstructor({ logger, port, routes, sdkVersion }: UnifiedServerConfig) {\n\t\tthis.logger = logger;\n\t\tthis.port = port;\n\t\tthis.routes = routes;\n\t\tthis.sdkVersion = sdkVersion;\n\t}\n\n\t/**\n\t * Stops the server\n\t */\n\tasync stop(): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (this.server) {\n\t\t\t\tconst server = this.server;\n\t\t\t\tthis.server = null;\n\t\t\t\tserver.close((err?: Error | null) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getBufferAsStream(\n\t\treq: IncomingMessage\n\t): Promise<ReadableStream<Buffer>> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst chunks: Buffer[] = [];\n\t\t\treq.on('data', (chunk) => chunks.push(chunk));\n\t\t\treq.on('end', async () => {\n\t\t\t\tconst body = Buffer.concat(chunks);\n\t\t\t\tconst readable = Readable.from(body);\n\t\t\t\tresolve(Readable.toWeb(readable) as ReadableStream<Buffer>);\n\t\t\t});\n\t\t\treq.on('error', (err) => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Gets the headers from the request\n\t */\n\tprivate getHeaders(req: IncomingMessage) {\n\t\tconst headers: Record<string, string> = {};\n\t\tfor (const [key, value] of Object.entries(req.headers)) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\theaders[key] = value;\n\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\theaders[key] = value[0] || '';\n\t\t\t}\n\t\t}\n\t\treturn headers;\n\t}\n\n\t/**\n\t * Starts the server\n\t */\n\tasync start(): Promise<void> {\n\t\tconst { sdkVersion } = this;\n\t\tconst devmode = process.env.AGENTUITY_SDK_DEV_MODE === 'true';\n\t\tthis.server = createHttpServer(async (req, res) => {\n\t\t\tif (req.method === 'GET' && req.url === '/_health') {\n\t\t\t\tres.writeHead(200, {\n\t\t\t\t\t'x-agentuity-version': sdkVersion,\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (req.method === 'GET' && req.url === '/') {\n\t\t\t\tres.writeHead(200, {\n\t\t\t\t\t'Content-Type': 'text/plain',\n\t\t\t\t});\n\t\t\t\tres.end(\n\t\t\t\t\tgetRoutesHelpText(req.headers.host ?? '127.0.0.1:3500', this.routes)\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (req.method === 'OPTIONS') {\n\t\t\t\tres.writeHead(200, {\n\t\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t\t'Access-Control-Allow-Methods':\n\t\t\t\t\t\t'GET, PUT, DELETE, PATCH, OPTIONS, POST',\n\t\t\t\t\t'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n\t\t\t\t});\n\t\t\t\tres.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (req.method === 'GET' && req.url === '/welcome') {\n\t\t\t\tconst result: Record<string, AgentWelcomeResult> = {};\n\t\t\t\tfor (const route of this.routes) {\n\t\t\t\t\tif (route.welcome) {\n\t\t\t\t\t\tlet r = route.welcome();\n\t\t\t\t\t\tif (r instanceof Promise) {\n\t\t\t\t\t\t\tr = await r;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (r.prompts) {\n\t\t\t\t\t\t\tfor (let c = 0; c < r.prompts.length; c++) {\n\t\t\t\t\t\t\t\tconst p = r.prompts[c];\n\t\t\t\t\t\t\t\tr.prompts[c] = await toWelcomePrompt(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult[route.agent.id] = r;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tres.writeHead(200, {\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t});\n\t\t\t\tres.end(safeStringify(result));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (req.method === 'GET' && req.url === '/welcome/') {\n\t\t\t\tlet content: AgentWelcomeResult | null = null;\n\t\t\t\tfor (const route of this.routes) {\n\t\t\t\t\tif (route.welcome) {\n\t\t\t\t\t\tlet r = route.welcome();\n\t\t\t\t\t\tif (r instanceof Promise) {\n\t\t\t\t\t\t\tr = await r;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (r.prompts) {\n\t\t\t\t\t\t\tfor (let c = 0; c < r.prompts.length; c++) {\n\t\t\t\t\t\t\t\tconst p = r.prompts[c];\n\t\t\t\t\t\t\t\tr.prompts[c] = await toWelcomePrompt(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcontent = r;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (content) {\n\t\t\t\t\tres.writeHead(200, {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t});\n\t\t\t\t\tres.end(JSON.stringify(content));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tres.writeHead(404);\n\t\t\t\tres.end();\n\t\t\t}\n\n\t\t\t// Extract trace context from headers\n\t\t\tconst extractedContext = extractTraceContextFromNodeRequest(req);\n\n\t\t\t// Execute the request handler within the extracted context\n\t\t\tawait context.with(extractedContext, async () => {\n\t\t\t\t// Create a span for this incoming request\n\t\t\t\tawait trace.getTracer('http-server').startActiveSpan(\n\t\t\t\t\t`HTTP ${req.method}`,\n\t\t\t\t\t{\n\t\t\t\t\t\tkind: SpanKind.SERVER,\n\t\t\t\t\t\tattributes: {\n\t\t\t\t\t\t\t'http.method': req.method || 'UNKNOWN',\n\t\t\t\t\t\t\t'http.path': req.url,\n\t\t\t\t\t\t\t'http.url': req.url || '', // FIXME should be full url\n\t\t\t\t\t\t\t'http.host': req.headers.host || '',\n\t\t\t\t\t\t\t'http.user_agent': req.headers['user-agent'] || '',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tasync (span) => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst route = this.routes.find((r) => r.path === req.url);\n\t\t\t\t\t\t\tif (!route) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\treq.method === 'GET' &&\n\t\t\t\t\t\t\t\t\tshouldIgnoreStaticFile(req.url ?? '/')\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tspan.setAttribute('http.status_code', '404');\n\t\t\t\t\t\t\t\t\tres.writeHead(404, injectTraceContextToHeaders());\n\t\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.logger.error(\n\t\t\t\t\t\t\t\t\t'agent not found: %s for: %s',\n\t\t\t\t\t\t\t\t\treq.method,\n\t\t\t\t\t\t\t\t\treq.url\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tspan.setAttribute('http.status_code', '404');\n\t\t\t\t\t\t\t\tres.writeHead(404, injectTraceContextToHeaders());\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\t\tmessage: `No Agent found at ${req.url}`,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (req.method !== route.method) {\n\t\t\t\t\t\t\t\tthis.logger.error(\n\t\t\t\t\t\t\t\t\t'unsupported method: %s for: %s',\n\t\t\t\t\t\t\t\t\treq.method,\n\t\t\t\t\t\t\t\t\treq.url\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tspan.setAttribute('http.status_code', '405');\n\t\t\t\t\t\t\t\tres.writeHead(405, injectTraceContextToHeaders());\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\t\tmessage: `Method not allowed: ${req.method} ${req.url}`,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tspan.setAttribute('@agentuity/agentName', route.agent.name);\n\t\t\t\t\t\t\tspan.setAttribute('@agentuity/agentId', route.agent.id);\n\n\t\t\t\t\t\t\tconst runId = span.spanContext().traceId;\n\n\t\t\t\t\t\t\tthis.logger.debug('request: %s %s', req.method, req.url);\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst agentReq = {\n\t\t\t\t\t\t\t\t\tbody: await this.getBufferAsStream(req),\n\t\t\t\t\t\t\t\t\trequest: getRequestFromHeaders(\n\t\t\t\t\t\t\t\t\t\treq.headers as Record<string, string>,\n\t\t\t\t\t\t\t\t\t\trunId\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\turl: req.url ?? '',\n\t\t\t\t\t\t\t\t\theaders: this.getHeaders(req),\n\t\t\t\t\t\t\t\t\tsetTimeout: (val: number) => req.setTimeout(val),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tconst routeResult = route.handler(agentReq);\n\t\t\t\t\t\t\t\tconst response = await createStreamingResponse(\n\t\t\t\t\t\t\t\t\treq.headers.origin ?? null,\n\t\t\t\t\t\t\t\t\t`Agentuity NodeJS/${sdkVersion}`,\n\t\t\t\t\t\t\t\t\tspan,\n\t\t\t\t\t\t\t\t\trouteResult as Promise<AgentResponseData>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst outheaders: Record<string, string> = {};\n\t\t\t\t\t\t\t\tconst headers = response.headers as Headers;\n\t\t\t\t\t\t\t\theaders.forEach((value, key) => {\n\t\t\t\t\t\t\t\t\toutheaders[key] = value;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tres.writeHead(response.status, outheaders);\n\t\t\t\t\t\t\t\tres.flushHeaders();\n\t\t\t\t\t\t\t\tif (response.body) {\n\t\t\t\t\t\t\t\t\tconst reader = response.body.getReader();\n\t\t\t\t\t\t\t\t\twhile (true) {\n\t\t\t\t\t\t\t\t\t\tconst { done, value } = await reader.read();\n\t\t\t\t\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\t\t\t\t\tres.write(value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\tthis.logger.error('Server error', err);\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tinjectTraceContextToNodeResponse(res);\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\tthis.logger.error('Error injecting trace context: %s', err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres.setHeader('Content-Type', 'text/plain');\n\t\t\t\t\t\t\t\tres.writeHead(500);\n\t\t\t\t\t\t\t\tconst { stack, message } = err as Error;\n\t\t\t\t\t\t\t\tlet errorMessage = message;\n\t\t\t\t\t\t\t\tif (devmode) {\n\t\t\t\t\t\t\t\t\terrorMessage = stack ?? errorMessage;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tres.end(errorMessage);\n\t\t\t\t\t\t\t\tspan.recordException(err as Error);\n\t\t\t\t\t\t\t\tspan.setAttribute('http.status_code', '500');\n\t\t\t\t\t\t\t\tspan.setStatus({\n\t\t\t\t\t\t\t\t\tcode: SpanStatusCode.ERROR,\n\t\t\t\t\t\t\t\t\tmessage: (err as Error).message,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tspan.end();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\n\t\treturn new Promise((resolve) => {\n\t\t\tconst server = this.server as ReturnType<typeof createHttpServer>;\n\t\t\tserver.requestTimeout = MAX_REQUEST_TIMEOUT;\n\t\t\tserver.timeout = MAX_REQUEST_TIMEOUT;\n\t\t\tconst address =\n\t\t\t\tprocess.env.AGENTUITY_ENV === 'development' ? '127.0.0.1' : '0.0.0.0';\n\t\t\tserver.listen(this.port, address, () => {\n\t\t\t\tthis.logger.info(`Node server listening on port ${this.port}`);\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t}\n}\n","import { join } from 'node:path';\nimport { existsSync } from 'node:fs';\nimport type { Tracer, Meter } from '@opentelemetry/api';\nimport type { Server, UnifiedServerConfig } from './types';\nimport type {\n\tAgentConfig,\n\tAgentContext,\n\tAgentHandler,\n\tAgentWelcome,\n} from '../types';\nimport type { Logger } from '../logger';\nimport type { ServerRoute } from './types';\nimport { createRouter } from '../router';\nimport KeyValueAPI from '../apis/keyvalue';\nimport VectorAPI from '../apis/vector';\nimport EmailAPI from '../apis/email';\nimport ObjectStoreAPI from '../apis/objectstore';\n\n/**\n * Creates a unified server based on the runtime environment\n *\n * @param config - The server configuration\n * @returns A promise that resolves to a server instance\n */\nasync function createUnifiedServer(\n\tconfig: UnifiedServerConfig\n): Promise<Server> {\n\tif (process.env.AGENTUITY_BUNDLER_RUNTIME === 'bunjs') {\n\t\tconst server = await import('./bun');\n\t\treturn new server.BunServer(config);\n\t}\n\tconst server = await import('./node');\n\treturn new server.NodeServer(config);\n}\n\n/**\n * Creates a server route from a module file\n *\n * @param filename - The path to the module file\n * @param path - The URL path for the route\n * @param context - The agent context\n * @param port - The port the server is running on\n * @returns A promise that resolves to a server route\n * @throws Error if no handler is found in the module\n */\nasync function createRoute(\n\tfilename: string,\n\tpath: string,\n\tcontext: AgentContext,\n\tagent: AgentConfig,\n\tport: number\n): Promise<ServerRoute> {\n\tconst mod = await import(filename);\n\tlet thehandler: AgentHandler | undefined;\n\tlet thewelcome: AgentWelcome | undefined;\n\tif (mod.default) {\n\t\tthehandler = mod.default;\n\t} else {\n\t\tfor (const key in mod) {\n\t\t\tif (key !== 'default' && mod[key] instanceof Function) {\n\t\t\t\tthehandler = mod[key];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfor (const key in mod) {\n\t\tif (key === 'welcome' && mod[key] instanceof Function) {\n\t\t\tthewelcome = mod[key];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (!thehandler) {\n\t\tthrow new Error(`No handler found in ${filename}`);\n\t}\n\tconst handler = createRouter({\n\t\tcontext: { ...context, agent } as AgentContext,\n\t\thandler: thehandler,\n\t\tport,\n\t});\n\treturn {\n\t\tagent,\n\t\thandler,\n\t\twelcome: thewelcome,\n\t\tmethod: 'POST',\n\t\tpath,\n\t};\n}\n\n/**\n * Configuration for creating a server\n */\ninterface ServerConfig {\n\tcontext: AgentContext;\n\tdirectory: string;\n\tport: number;\n\tlogger: Logger;\n}\n\n/**\n * Creates a server with routes from agent modules in a directory\n *\n * @param config - The server configuration\n * @returns A promise that resolves to a server instance\n * @throws Error if no routes are found in the directory\n */\nexport async function createServer({\n\tcontext,\n\tdirectory,\n\tport,\n\tlogger,\n}: ServerConfig) {\n\tconst routes: ServerRoute[] = [];\n\tfor (const agent of context.agents) {\n\t\tconst filepath = join(directory, agent.filename);\n\t\tif (existsSync(filepath)) {\n\t\t\tconst route = await createRoute(\n\t\t\t\tfilepath,\n\t\t\t\t`/${agent.id}`,\n\t\t\t\tcontext,\n\t\t\t\tagent,\n\t\t\t\tport\n\t\t\t);\n\t\t\troutes.push(route);\n\t\t\tlogger.info('registered %s at /%s', agent.name, agent.id);\n\t\t} else {\n\t\t\tthrow new Error(`${filepath} does not exist for agent ${agent.name}`);\n\t\t}\n\t}\n\tif (routes.length === 0) {\n\t\tthrow new Error(`No routes found in ${directory}`);\n\t}\n\treturn createUnifiedServer({\n\t\tlogger,\n\t\tport,\n\t\troutes,\n\t\tsdkVersion: context.sdkVersion,\n\t});\n}\n\n/**\n * Request parameters for creating a server context\n */\ninterface ServerContextRequest {\n\ttracer: Tracer;\n\tmeter: Meter;\n\tlogger: Logger;\n\torgId?: string;\n\tprojectId?: string;\n\tdeploymentId?: string;\n\trunId?: string;\n\tdevmode?: boolean;\n\tsdkVersion: string;\n\tagents: AgentConfig[];\n}\n\nconst kv = new KeyValueAPI();\nconst vector = new VectorAPI();\nconst email = new EmailAPI();\nconst objectstore = new ObjectStoreAPI();\n\n/**\n * Creates an agent context for server operations\n *\n * @param req - The server context request parameters\n * @returns An agent context object\n */\nexport function createServerContext(req: ServerContextRequest): AgentContext {\n\treturn {\n\t\tdevmode: req.devmode,\n\t\trunId: req.runId,\n\t\tdeploymentId: req.deploymentId,\n\t\tprojectId: req.projectId,\n\t\torgId: req.orgId,\n\t\tlogger: req.logger,\n\t\ttracer: req.tracer,\n\t\tmeter: req.meter,\n\t\tkv,\n\t\tvector,\n\t\temail,\n\t\tobjectstore,\n\t\tsdkVersion: req.sdkVersion,\n\t\tagents: req.agents,\n\t\tscope: 'local',\n\t} as unknown as AgentContext;\n}\n","import type {\n\tDataResult,\n\tDataResultFound,\n\tDataResultNotFound,\n\tKeyValueStorage,\n\tKeyValueStorageSetParams,\n} from '../types';\nimport { isDataType } from '../types';\nimport { DELETE, GET, PUT } from './api';\nimport { getTracer, recordException } from '../router/router';\nimport { context, trace, SpanStatusCode } from '@opentelemetry/api';\nimport { fromDataType } from '../server/util';\nimport { DataHandler } from '../router/data';\nimport { gunzipBuffer, gzipBuffer } from '../server/gzip';\n\n/**\n * Implementation of the KeyValueStorage interface for interacting with the key-value storage API\n */\nexport default class KeyValueAPI implements KeyValueStorage {\n\t/**\n\t * get a value from the key value storage\n\t *\n\t * @param name - the name of the key value storage\n\t * @param key - the key to get the value of\n\t * @returns the value of the key\n\t */\n\tasync get(name: string, key: string): Promise<DataResult> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan('agentuity.keyvalue.get', {}, currentContext);\n\n\t\ttry {\n\t\t\tspan.setAttribute('name', name);\n\t\t\tspan.setAttribute('key', key);\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst resp = await GET(\n\t\t\t\t\t`/kv/2025-03-17/${encodeURIComponent(name)}/${encodeURIComponent(key)}`,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tif (resp.status === 404) {\n\t\t\t\t\tspan.addEvent('miss');\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn { exists: false } as DataResultNotFound;\n\t\t\t\t}\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tspan.addEvent('hit');\n\t\t\t\t\tlet body = Buffer.from(await resp.response.arrayBuffer());\n\t\t\t\t\tif (resp.headers.get('content-encoding') === 'gzip') {\n\t\t\t\t\t\tbody = await gunzipBuffer(body);\n\t\t\t\t\t}\n\t\t\t\t\tconst result: DataResultFound = {\n\t\t\t\t\t\texists: true,\n\t\t\t\t\t\tdata: new DataHandler(\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tresp.headers.get('content-type') ?? 'application/octet-stream'\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`error getting keyvalue: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t);\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * set a value in the key value storage\n\t *\n\t * @param name - the name of the key value storage\n\t * @param key - the key to set the value of\n\t * @param value - the value to set\n\t * @param ttl - the time to live of the key\n\t */\n\tasync set<T = unknown>(\n\t\tname: string,\n\t\tkey: string,\n\t\tvalue: T,\n\t\tparams?: KeyValueStorageSetParams\n\t): Promise<void> {\n\t\tif (!isDataType(value)) {\n\t\t\tthrow new Error('value must be a DataType');\n\t\t}\n\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan('agentuity.keyvalue.set', {}, currentContext);\n\n\t\ttry {\n\t\t\tspan.setAttribute('name', name);\n\t\t\tspan.setAttribute('key', key);\n\t\t\tif (params?.ttl) {\n\t\t\t\tspan.setAttribute('ttl', params.ttl);\n\t\t\t}\n\t\t\tif (params?.contentType) {\n\t\t\t\tspan.setAttribute('contentType', params.contentType);\n\t\t\t}\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\tawait context.with(spanContext, async () => {\n\t\t\t\tconst datavalue = await fromDataType(value, params?.contentType);\n\t\t\t\tlet ttlstr = '';\n\t\t\t\tif (params?.ttl) {\n\t\t\t\t\tif (params.ttl < 60) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`ttl for keyvalue set must be at least 60 seconds, got ${params.ttl}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tttlstr = `/${params.ttl}`;\n\t\t\t\t}\n\n\t\t\t\tlet buffer: Buffer;\n\n\t\t\t\tconst headers: Record<string, string> = {\n\t\t\t\t\t'Content-Type': datavalue.data.contentType,\n\t\t\t\t};\n\n\t\t\t\tif (\n\t\t\t\t\tdatavalue.data.contentType.includes('text') ||\n\t\t\t\t\tdatavalue.data.contentType.includes('json')\n\t\t\t\t) {\n\t\t\t\t\tconst compressed = await gzipBuffer(await datavalue.data.buffer());\n\t\t\t\t\tbuffer = compressed;\n\t\t\t\t\theaders['Content-Encoding'] = 'gzip';\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = await datavalue.data.buffer();\n\t\t\t\t}\n\n\t\t\t\tconst resp = await PUT(\n\t\t\t\t\t`/kv/2025-03-17/${encodeURIComponent(name)}/${encodeURIComponent(key)}${ttlstr}`,\n\t\t\t\t\tnew Blob([buffer], {\n\t\t\t\t\t\ttype: datavalue.data.contentType,\n\t\t\t\t\t}),\n\t\t\t\t\theaders\n\t\t\t\t);\n\n\t\t\t\tif (resp.status !== 201) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`error setting keyvalue: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * delete a value from the key value storage\n\t *\n\t * @param name - the name of the key value storage\n\t * @param key - the key to delete\n\t */\n\tasync delete(name: string, key: string): Promise<void> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.keyvalue.delete',\n\t\t\t{},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\tspan.setAttribute('name', name);\n\t\t\tspan.setAttribute('key', key);\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\tawait context.with(spanContext, async () => {\n\t\t\t\tconst resp = await DELETE(\n\t\t\t\t\t`/kv/2025-03-17/${encodeURIComponent(name)}/${encodeURIComponent(key)}`\n\t\t\t\t);\n\t\t\t\tif (resp.status !== 200) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`error deleting keyvalue: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n}\n","import { gzip, gunzip } from 'node:zlib';\nimport { promisify } from 'node:util';\n\n// Promisify the zlib functions\nconst gzipPromise = promisify(gzip);\nconst gunzipPromise = promisify(gunzip);\n\n/**\n * Compresses a Buffer using gzip and returns the gzipped version of the Buffer\n *\n * @param buffer - The Buffer data to compress\n * @returns A Promise that resolves to a Buffer containing the compressed data\n */\nexport async function gzipBuffer(buffer: Buffer): Promise<Buffer> {\n\tif (buffer.length === 0) {\n\t\treturn buffer;\n\t}\n\treturn gzipPromise(buffer);\n}\n\n/**\n * Decompresses a gzipped Buffer and returns the uncompressed Buffer\n *\n * @param buffer - The compressed Buffer to decompress\n * @returns A Promise that resolves to an uncompressed Buffer\n * @throws Error if the buffer is not valid gzipped data\n */\nexport async function gunzipBuffer(buffer: Buffer): Promise<Buffer> {\n\tif (!buffer || buffer.length === 0) {\n\t\treturn Buffer.alloc(0);\n\t}\n\t// check to make sure it has the zlib header before trying to decompress\n\t// GZIP magic numbers: 0x1f 0x8b\n\tif (buffer.length >= 2 && buffer[0] === 0x1f && buffer[1] === 0x8b) {\n\t\treturn gunzipPromise(buffer);\n\t}\n\treturn buffer;\n}\n","import type {\n\tVectorStorage,\n\tVectorUpsertParams,\n\tVectorSearchParams,\n\tVectorSearchResult,\n} from '../types';\nimport { isJsonObject } from '../types';\nimport { DELETE, GET, POST, PUT } from './api';\nimport { getTracer, recordException } from '../router/router';\nimport { context, trace, SpanStatusCode } from '@opentelemetry/api';\nimport { safeStringify } from '../server/util';\n\n/**\n * Response for a successful vector upsert operation\n */\ninterface VectorUpsertSuccessResponse {\n\tsuccess: true;\n\tids: string[];\n}\n\n/**\n * Response for a failed vector upsert operation\n */\ninterface VectorUpsertErrorResponse {\n\tsuccess: false;\n\tmessage: string;\n}\n\n/**\n * Response for a vector upsert operation\n */\ntype VectorUpsertResponse =\n\t| VectorUpsertSuccessResponse\n\t| VectorUpsertErrorResponse;\n\n/**\n * Response for a successful vector search operation\n */\ninterface VectorSearchSuccessResponse {\n\tsuccess: true;\n\tdata: VectorSearchResult[];\n}\n\n/**\n * Response for a failed vector search operation\n */\ninterface VectorSearchErrorResponse {\n\tsuccess: false;\n\tmessage: string;\n}\n\n/**\n * Response for a vector search operation\n */\ntype VectorSearchResponse =\n\t| VectorSearchSuccessResponse\n\t| VectorSearchErrorResponse;\n\n/**\n * Response for a successful vector delete operation\n */\ninterface VectorDeleteSuccessResponse {\n\tsuccess: true;\n\tdata: number;\n}\n\n/**\n * Response for a failed vector delete operation\n */\ninterface VectorDeleteErrorResponse {\n\tsuccess: false;\n\tmessage: string;\n}\n\n/**\n * Response for a vector delete operation\n */\ntype VectorDeleteResponse =\n\t| VectorDeleteSuccessResponse\n\t| VectorDeleteErrorResponse;\n\n/**\n * Response for a successful vector delete operation\n */\ninterface VectorGetSuccessResponse {\n\tsuccess: true;\n\tdata: VectorSearchResult | null;\n}\n\n/**\n * Response for a failed vector delete operation\n */\ninterface VectorGetErrorResponse {\n\tsuccess: false;\n\tmessage: string;\n}\n\n/**\n * Response for a vector get operation\n */\ntype VectorGetResponse = VectorGetSuccessResponse | VectorGetErrorResponse;\n\n/**\n * Implementation of the VectorStorage interface for interacting with the vector storage API\n */\nexport default class VectorAPI implements VectorStorage {\n\t/**\n\t * upsert a vector into the vector storage\n\t *\n\t * @param name - the name of the vector storage\n\t * @param documents - the documents for the vector upsert\n\t * @returns the ids of the vectors that were upserted\n\t */\n\tasync upsert(\n\t\tname: string,\n\t\t...documents: VectorUpsertParams[]\n\t): Promise<string[]> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.vector.upsert',\n\t\t\t{ attributes: { name } },\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst resp = await PUT<VectorUpsertResponse>(\n\t\t\t\t\t`/vector/2025-03-17/${encodeURIComponent(name)}`,\n\t\t\t\t\tsafeStringify(documents)\n\t\t\t\t);\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tif (resp.json?.success) {\n\t\t\t\t\t\tconst json = resp.json as unknown as { data: { id: string }[] };\n\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\treturn json.data.map((o) => o.id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!resp.json?.success && resp.json?.message) {\n\t\t\t\t\tthrow new Error(resp.json.message);\n\t\t\t\t}\n\t\t\t\tthrow new Error('unknown error');\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * get a vector from the vector storage by key\n\t *\n\t * @param name - the name of the vector storage\n\t * @param key - the key of the vector to get\n\t * @returns the result of the vector search\n\t */\n\tasync get(name: string, key: string): Promise<VectorSearchResult | null> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.vector.get',\n\t\t\t{ attributes: { name } },\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst resp = await GET<VectorGetResponse>(\n\t\t\t\t\t`/vector/2025-03-17/${encodeURIComponent(name)}/${encodeURIComponent(key)}`\n\t\t\t\t);\n\t\t\t\tif (resp.status === 404) {\n\t\t\t\t\tspan.addEvent('miss');\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tif (resp.json?.success) {\n\t\t\t\t\t\tspan.addEvent('hit');\n\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\treturn resp.json.data;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!resp.json?.success && resp.json?.message) {\n\t\t\t\t\tthrow new Error(resp.json.message);\n\t\t\t\t}\n\t\t\t\tthrow new Error('unknown error');\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * search for vectors in the vector storage\n\t *\n\t * @param name - the name of the vector storage\n\t * @param params - the parameters for the vector search\n\t * @returns the results of the vector search\n\t */\n\tasync search<T = unknown>(\n\t\tname: string,\n\t\tparams: VectorSearchParams<T>\n\t): Promise<VectorSearchResult[]> {\n\t\tif (!isJsonObject(params.metadata)) {\n\t\t\tthrow new Error('params.metadata must be a JsonObject');\n\t\t}\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.vector.search',\n\t\t\t{\n\t\t\t\tattributes: {\n\t\t\t\t\tname,\n\t\t\t\t\tquery: params.query,\n\t\t\t\t\tlimit: params.limit,\n\t\t\t\t\tsimilarity: params.similarity,\n\t\t\t\t},\n\t\t\t},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst resp = await POST<VectorSearchResponse>(\n\t\t\t\t\t`/vector/2025-03-17/search/${encodeURIComponent(name)}`,\n\t\t\t\t\tsafeStringify(params)\n\t\t\t\t);\n\t\t\t\tif (resp.status === 404) {\n\t\t\t\t\tspan.addEvent('miss');\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tif (resp.json?.success) {\n\t\t\t\t\t\tspan.addEvent('hit');\n\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\treturn resp.json.data;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!resp.json?.success && resp.json?.message) {\n\t\t\t\t\tthrow new Error(resp.json.message);\n\t\t\t\t}\n\t\t\t\tthrow new Error('unknown error');\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * delete a vector from the vector storage\n\t *\n\t * @param name - the name of the vector storage\n\t * @param key - the key of the vector to delete\n\t * @returns the number of vector objects that were deleted\n\t */\n\tasync delete(name: string, key: string): Promise<number> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.vector.delete',\n\t\t\t{ attributes: { name, key } },\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst resp = await DELETE<VectorDeleteResponse>(\n\t\t\t\t\t`/vector/2025-03-17/${encodeURIComponent(name)}/${encodeURIComponent(key)}`\n\t\t\t\t);\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tif (resp.json?.success) {\n\t\t\t\t\t\tspan.addEvent('delete_count', resp.json.data);\n\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\treturn resp.json.data;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!resp.json?.success && resp.json?.message) {\n\t\t\t\t\tthrow new Error(resp.json.message);\n\t\t\t\t}\n\t\t\t\tthrow new Error('unknown error');\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n}\n","import { POST } from './api';\nimport { getTracer, recordException } from '../router/router';\nimport { context, trace, SpanStatusCode } from '@opentelemetry/api';\nimport type { EmailService } from '../types';\n\nexport default class EmailApi implements EmailService {\n\t/**\n\t * send an email reply to an incoming email\n\t */\n\tasync sendReply(\n\t\tagentId: string,\n\t\temail: string,\n\t\tauthToken: string,\n\t\tmessageId: string\n\t): Promise<void> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan('agentuity.email.reply', {}, currentContext);\n\n\t\ttry {\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tspan.setAttribute('@agentuity/agentId', agentId);\n\t\t\t\tspan.setAttribute('@agentuity/emailMessageId', messageId);\n\n\t\t\t\tconst resp = await POST(\n\t\t\t\t\t`/email/2025-03-17/${agentId}/reply`,\n\t\t\t\t\temail,\n\t\t\t\t\t{\n\t\t\t\t\t\t'Content-Type': 'message/rfc822',\n\t\t\t\t\t\t'X-Agentuity-Message-Id': messageId,\n\t\t\t\t\t},\n\t\t\t\t\tundefined,\n\t\t\t\t\tauthToken\n\t\t\t\t);\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`error sending email reply: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t);\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n}\n","import type {\n\tDataResult,\n\tDataResultFound,\n\tDataResultNotFound,\n\tObjectStore,\n\tObjectStorePutParams,\n\tDataType,\n} from '../types';\nimport { isDataType } from '../types';\nimport { DELETE, GET, PUT, POST } from './api';\nimport { getTracer, recordException } from '../router/router';\nimport { context, trace, SpanStatusCode } from '@opentelemetry/api';\nimport { fromDataType } from '../server/util';\nimport { DataHandler } from '../router/data';\n\n/**\n * Response for a successful object store create public URL operation\n */\ninterface ObjectStoreCreatePublicURLSuccessResponse {\n\tsuccess: true;\n\turl: string;\n}\n\n/**\n * Response for a failed object store create public URL operation\n */\ninterface ObjectStoreCreatePublicURLErrorResponse {\n\tsuccess: false;\n\tmessage: string;\n}\n\n/**\n * Response for an object store create public URL operation\n */\ntype ObjectStoreCreatePublicURLResponse =\n\t| ObjectStoreCreatePublicURLSuccessResponse\n\t| ObjectStoreCreatePublicURLErrorResponse;\n\n/**\n * Implementation of the ObjectStore interface for interacting with the object storage API\n */\nexport default class ObjectStoreAPI implements ObjectStore {\n\t/**\n\t * get an object from the object store\n\t *\n\t * @param bucket - the bucket to get the object from\n\t * @param key - the key of the object to get\n\t * @returns the data result from the object store\n\t */\n\tasync get(bucket: string, key: string): Promise<DataResult> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.objectstore.get',\n\t\t\t{},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\tspan.setAttribute('bucket', bucket);\n\t\t\tspan.setAttribute('key', key);\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst resp = await GET(\n\t\t\t\t\t`/object/2025-03-17/${encodeURIComponent(bucket)}/${encodeURIComponent(key)}`,\n\t\t\t\t\ttrue\n\t\t\t\t);\n\t\t\t\tif (resp.status === 404) {\n\t\t\t\t\tspan.addEvent('miss');\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn { exists: false } as DataResultNotFound;\n\t\t\t\t}\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tspan.addEvent('hit');\n\t\t\t\t\tconst body = Buffer.from(await resp.response.arrayBuffer());\n\t\t\t\t\tconst result: DataResultFound = {\n\t\t\t\t\t\texists: true,\n\t\t\t\t\t\tdata: new DataHandler(\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\tresp.headers.get('content-type') ?? 'application/octet-stream'\n\t\t\t\t\t\t),\n\t\t\t\t\t};\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Handle error response - body contains error message as text\n\t\t\t\tconst errorMessage = await resp.response.text();\n\t\t\t\tthrow new Error(\n\t\t\t\t\terrorMessage ||\n\t\t\t\t\t\t`error getting object: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t);\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * put an object into the object store\n\t *\n\t * @param bucket - the bucket to put the object into\n\t * @param key - the key of the object to put\n\t * @param data - the data to put\n\t * @param params - the object store put parameters\n\t */\n\tasync put(\n\t\tbucket: string,\n\t\tkey: string,\n\t\tdata: DataType,\n\t\tparams?: ObjectStorePutParams\n\t): Promise<void> {\n\t\tif (!isDataType(data)) {\n\t\t\tthrow new Error('data must be a DataType');\n\t\t}\n\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.objectstore.put',\n\t\t\t{},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\tspan.setAttribute('bucket', bucket);\n\t\t\tspan.setAttribute('key', key);\n\t\t\tif (params?.contentType) {\n\t\t\t\tspan.setAttribute('contentType', params.contentType);\n\t\t\t}\n\t\t\tif (params?.contentEncoding) {\n\t\t\t\tspan.setAttribute('contentEncoding', params.contentEncoding);\n\t\t\t}\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\tawait context.with(spanContext, async () => {\n\t\t\t\tconst datavalue = await fromDataType(data, params?.contentType);\n\n\t\t\t\t// Get the stream directly instead of loading into memory\n\t\t\t\tconst stream = await datavalue.data.stream();\n\n\t\t\t\tconst headers: Record<string, string> = {\n\t\t\t\t\t'Content-Type': datavalue.data.contentType,\n\t\t\t\t};\n\n\t\t\t\tif (params?.contentEncoding) {\n\t\t\t\t\theaders['Content-Encoding'] = params.contentEncoding;\n\t\t\t\t}\n\n\t\t\t\tif (params?.cacheControl) {\n\t\t\t\t\theaders['Cache-Control'] = params.cacheControl;\n\t\t\t\t}\n\n\t\t\t\tif (params?.contentDisposition) {\n\t\t\t\t\theaders['Content-Disposition'] = params.contentDisposition;\n\t\t\t\t}\n\n\t\t\t\tif (params?.contentLanguage) {\n\t\t\t\t\theaders['Content-Language'] = params.contentLanguage;\n\t\t\t\t}\n\n\t\t\t\tif (params?.metadata) {\n\t\t\t\t\tfor (const [key, value] of Object.entries(params.metadata)) {\n\t\t\t\t\t\theaders[`x-metadata-${key}`] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst resp = await PUT(\n\t\t\t\t\t`/object/2025-03-17/${encodeURIComponent(bucket)}/${encodeURIComponent(key)}`,\n\t\t\t\t\tstream as unknown as ReadableStream,\n\t\t\t\t\theaders\n\t\t\t\t);\n\n\t\t\t\tif (resp.status >= 200 && resp.status < 300) {\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Handle error response - body contains error message as text\n\t\t\t\tlet errorMessage = '';\n\t\t\t\ttry {\n\t\t\t\t\terrorMessage = await resp.response.text();\n\t\t\t\t} catch (textError) {\n\t\t\t\t\t// If we can't read the response text, use the status text\n\t\t\t\t\terrorMessage = resp.response.statusText;\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\n\t\t\t\t\terrorMessage ||\n\t\t\t\t\t\t`error putting object: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t);\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * delete an object from the object store\n\t *\n\t * @param bucket - the bucket to delete the object from\n\t * @param key - the key of the object to delete\n\t * @returns true if the object was deleted, false if the object did not exist\n\t */\n\tasync delete(bucket: string, key: string): Promise<boolean> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.objectstore.delete',\n\t\t\t{},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\tspan.setAttribute('bucket', bucket);\n\t\t\tspan.setAttribute('key', key);\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst resp = await DELETE(\n\t\t\t\t\t`/object/2025-03-17/${encodeURIComponent(bucket)}/${encodeURIComponent(key)}`\n\t\t\t\t);\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tspan.addEvent('deleted', { deleted: true });\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif (resp.status === 404) {\n\t\t\t\t\tspan.addEvent('not_found', { deleted: false });\n\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Handle error response - body contains error message as text\n\t\t\t\tconst errorMessage = await resp.response.text();\n\t\t\t\tthrow new Error(\n\t\t\t\t\terrorMessage ||\n\t\t\t\t\t\t`error deleting object: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t);\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n\n\t/**\n\t * create a public URL for an object\n\t *\n\t * @param bucket - the bucket to create the signed URL for\n\t * @param key - the key of the object to create the signed URL for\n\t * @param expiresDuration - the duration of the signed URL in milliseconds\n\t * @returns the public URL\n\t */\n\tasync createPublicURL(\n\t\tbucket: string,\n\t\tkey: string,\n\t\texpiresDuration?: number\n\t): Promise<string> {\n\t\tconst tracer = getTracer();\n\t\tconst currentContext = context.active();\n\n\t\t// Create a child span using the current context\n\t\tconst span = tracer.startSpan(\n\t\t\t'agentuity.objectstore.createPublicURL',\n\t\t\t{},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\tspan.setAttribute('bucket', bucket);\n\t\t\tspan.setAttribute('key', key);\n\t\t\tif (expiresDuration) {\n\t\t\t\tspan.setAttribute('expiresDuration', expiresDuration);\n\t\t\t}\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst spanContext = trace.setSpan(currentContext, span);\n\n\t\t\t// Execute the operation within the new context\n\t\t\treturn await context.with(spanContext, async () => {\n\t\t\t\tconst path = `/object/2025-03-17/presigned/${encodeURIComponent(bucket)}/${encodeURIComponent(key)}`;\n\n\t\t\t\tconst requestBody: { expires?: number } = {};\n\t\t\t\tif (expiresDuration) {\n\t\t\t\t\trequestBody.expires = expiresDuration;\n\t\t\t\t}\n\n\t\t\t\tconst resp = await POST<ObjectStoreCreatePublicURLResponse>(\n\t\t\t\t\tpath,\n\t\t\t\t\tJSON.stringify(requestBody)\n\t\t\t\t);\n\n\t\t\t\tif (resp.status === 200) {\n\t\t\t\t\tif (resp.json?.success) {\n\t\t\t\t\t\tspan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t\t\t\treturn resp.json.url;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!resp.json?.success && resp.json?.message) {\n\t\t\t\t\tthrow new Error(resp.json.message);\n\t\t\t\t}\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`error creating public URL: ${resp.response.statusText} (${resp.response.status})`\n\t\t\t\t);\n\t\t\t});\n\t\t} catch (ex) {\n\t\t\trecordException(span, ex);\n\t\t\tthrow ex;\n\t\t} finally {\n\t\t\tspan.end();\n\t\t}\n\t}\n}\n","export * from './server';\nexport * from './logger';\nexport * from './types';\n\nimport type { AgentConfig } from './types';\nimport { run } from './autostart';\n\n/**\n * Runs the Agentuity SDK with the specified configuration\n *\n * @param autoStart - Whether to automatically start the SDK\n * @param dir - The directory where the SDK is located\n * @returns A Promise that resolves when the SDK has been run\n */\nexport async function runner(\n\tautoStart = false,\n\tdir = process.env.AGENTUITY_SDK_DIR\n) {\n\tif (autoStart && !!dir) {\n\t\tconst agentsJSON = process.env.AGENTUITY_CLOUD_AGENTS_JSON;\n\t\tlet agents: AgentConfig[] = [];\n\t\tif (agentsJSON) {\n\t\t\tagents = JSON.parse(agentsJSON);\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t'[WARN] expected AGENTUITY_CLOUD_AGENTS_JSON to be set but it was not. will attempt to load manually.'\n\t\t\t);\n\t\t}\n\t\tawait run({\n\t\t\tbasedir: dir,\n\t\t\torgId: process.env.AGENTUITY_CLOUD_ORG_ID,\n\t\t\tprojectId: process.env.AGENTUITY_CLOUD_PROJECT_ID,\n\t\t\tdeploymentId: process.env.AGENTUITY_CLOUD_DEPLOYMENT_ID,\n\t\t\tport: process.env.AGENTUITY_CLOUD_PORT\n\t\t\t\t? Number.parseInt(process.env.AGENTUITY_CLOUD_PORT)\n\t\t\t\t: process.env.PORT\n\t\t\t\t\t? Number.parseInt(process.env.PORT)\n\t\t\t\t\t: undefined,\n\t\t\tdevmode: process.env.AGENTUITY_SDK_DEV_MODE === 'true',\n\t\t\tcliVersion: process.env.AGENTUITY_CLI_VERSION,\n\t\t\tenvironment:\n\t\t\t\tprocess.env.AGENTUITY_ENVIRONMENT ??\n\t\t\t\tprocess.env.NODE_ENV ??\n\t\t\t\t'development',\n\t\t\totlp: {\n\t\t\t\turl: process.env.AGENTUITY_OTLP_URL,\n\t\t\t\tbearerToken: process.env.AGENTUITY_OTLP_BEARER_TOKEN,\n\t\t\t},\n\t\t\tagents,\n\t\t});\n\t}\n}\n","import { join } from 'node:path';\nimport yml from 'js-yaml';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { createServer, createServerContext } from '../server';\nimport { registerOtel } from '../otel';\nimport type { AgentConfig } from '../types';\n\n/**\n * Configuration for auto-starting the Agentuity SDK\n */\ninterface AutostartConfig {\n\tbasedir: string;\n\tdistdir?: string;\n\torgId?: string;\n\tprojectId?: string;\n\tdeploymentId?: string;\n\tport?: number;\n\tdevmode?: boolean;\n\tenvironment?: string;\n\tcliVersion?: string;\n\totlp?: {\n\t\turl?: string;\n\t\tbearerToken?: string;\n\t};\n\tagents: AgentConfig[];\n}\n\n/**\n * Runs the Agentuity SDK with the specified configuration\n *\n * @param config - The configuration for auto-starting the SDK\n * @throws Error if the project directory does not exist or if projectId is not provided\n */\nexport async function run(config: AutostartConfig) {\n\tlet { port } = config;\n\tconst { basedir } = config;\n\tif (process.env.AGENTUITY_ENVIRONMENT !== 'production') {\n\t\t// check to see if we should attempt to load the config from the local file\n\t\tconst shouldAttemptLoad =\n\t\t\t!config.projectId ||\n\t\t\t!config.agents ||\n\t\t\t!config.agents.length ||\n\t\t\t(!config.port && !process.env.AGENTUITY_CLOUD_PORT && !process.env.PORT);\n\t\tif (shouldAttemptLoad) {\n\t\t\t// this path only works in local dev mode\n\t\t\tlet ymlfile = join(basedir, 'agentuity.yaml');\n\t\t\tif (!existsSync(ymlfile)) {\n\t\t\t\tymlfile = join(basedir, '..', 'agentuity.yaml');\n\t\t\t}\n\t\t\tif (!existsSync(ymlfile)) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t'[ERROR] Failed to find the agentuity.yaml file in the current directory'\n\t\t\t\t);\n\t\t\t\tprocess.exit(1);\n\t\t\t}\n\t\t\tconst ymlData = readFileSync(ymlfile, 'utf8').toString();\n\t\t\t// biome-ignore lint/suspicious/noExplicitAny: <explanation>\n\t\t\tconst data = yml.load(ymlData) as any;\n\t\t\tif (!config.projectId && data?.project_id) {\n\t\t\t\tconfig.projectId = data.project_id;\n\t\t\t}\n\t\t\tif (\n\t\t\t\tdata?.development?.port &&\n\t\t\t\t!process.env.AGENTUITY_CLOUD_PORT &&\n\t\t\t\t!process.env.PORT\n\t\t\t) {\n\t\t\t\tport = data.development.port;\n\t\t\t}\n\t\t\tif (!config.agents || config.agents.length === 0) {\n\t\t\t\tconst agentdir = data?.bundler?.agents?.dir;\n\t\t\t\tif (agentdir && existsSync(agentdir)) {\n\t\t\t\t\tconfig.agents = data.agents\n\t\t\t\t\t\t.map((agent: { id: string; name: string }) => {\n\t\t\t\t\t\t\tconst filename = join(agentdir, agent.name, 'index.ts');\n\t\t\t\t\t\t\tif (existsSync(filename)) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t...agent,\n\t\t\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.filter(Boolean);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (!config.projectId) {\n\t\tthrow new Error(\n\t\t\t'projectId is required and not found either in agentuity.yaml or in the environment'\n\t\t);\n\t}\n\tconst name = process.env.AGENTUITY_SDK_APP_NAME ?? 'unknown';\n\tconst version = process.env.AGENTUITY_SDK_APP_VERSION ?? 'unknown';\n\tconst sdkVersion = process.env.AGENTUITY_SDK_VERSION ?? 'unknown';\n\tconst otel = registerOtel({\n\t\tname,\n\t\tversion,\n\t\tsdkVersion,\n\t\tcliVersion: config.cliVersion,\n\t\tdevmode: config.devmode,\n\t\torgId: config.orgId,\n\t\tprojectId: config.projectId,\n\t\tdeploymentId: config.deploymentId,\n\t\tbearerToken: config?.otlp?.bearerToken,\n\t\turl: config?.otlp?.url,\n\t\tenvironment: config.devmode ? 'development' : config.environment,\n\t});\n\tconst server = await createServer({\n\t\tcontext: createServerContext({\n\t\t\tdevmode: config.devmode,\n\t\t\tdeploymentId: config.deploymentId,\n\t\t\tprojectId: config.projectId,\n\t\t\torgId: config.orgId,\n\t\t\tlogger: otel.logger,\n\t\t\ttracer: otel.tracer,\n\t\t\tmeter: otel.meter,\n\t\t\tsdkVersion,\n\t\t\tagents: config.agents,\n\t\t}),\n\t\tdirectory: basedir,\n\t\tport: process.env.AGENTUITY_CLOUD_PORT\n\t\t\t? Number.parseInt(process.env.AGENTUITY_CLOUD_PORT)\n\t\t\t: process.env.PORT\n\t\t\t\t? Number.parseInt(process.env.PORT)\n\t\t\t\t: (port ?? 3500),\n\t\tlogger: otel.logger,\n\t});\n\tawait server.start();\n\tconst shutdown = async () => {\n\t\tawait server.stop();\n\t\tawait otel.shutdown();\n\t};\n\tprocess.on('beforeExit', shutdown);\n\tprocess.on('SIGINT', shutdown);\n\tprocess.on('SIGTERM', shutdown);\n\tprocess.on('SIGQUIT', shutdown);\n}\n","import type { Logger } from '../logger';\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { HostMetrics } from '@opentelemetry/host-metrics';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport {\n\tPeriodicExportingMetricReader,\n\tMeterProvider,\n} from '@opentelemetry/sdk-metrics';\nimport { Resource } from '@opentelemetry/resources';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-http';\nimport {\n\tATTR_SERVICE_NAME,\n\tATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport opentelemetry, {\n\tmetrics,\n\tpropagation,\n\ttype Meter,\n\ttype Tracer,\n} from '@opentelemetry/api';\nimport {\n\tW3CTraceContextPropagator,\n\tW3CBaggagePropagator,\n\tCompositePropagator,\n} from '@opentelemetry/core';\nimport * as LogsAPI from '@opentelemetry/api-logs';\nimport {\n\tLoggerProvider,\n\ttype LogRecordProcessor,\n\tBatchLogRecordProcessor,\n\tSimpleLogRecordProcessor,\n} from '@opentelemetry/sdk-logs';\nimport { OTLPLogExporter } from '@opentelemetry/exporter-logs-otlp-http';\nimport { CompressionAlgorithm } from '@opentelemetry/otlp-exporter-base';\nimport { createLogger, patchConsole } from './logger';\nimport { ConsoleLogRecordExporter } from './console';\nimport { instrumentFetch } from './fetch';\n\n/**\n * Configuration for OpenTelemetry initialization\n */\ninterface OtelConfig {\n\turl?: string;\n\tname: string;\n\tversion: string;\n\tbearerToken?: string;\n\torgId?: string;\n\tprojectId?: string;\n\tdeploymentId?: string;\n\tenvironment?: string;\n\tsdkVersion?: string;\n\tcliVersion?: string;\n\tdevmode?: boolean;\n}\n\n/**\n * Response from OpenTelemetry initialization\n */\ninterface OtelResponse {\n\ttracer: Tracer;\n\tmeter: Meter;\n\tlogger: Logger;\n\tshutdown: () => Promise<void>;\n}\n\nconst devmodeExportInterval = 1_000; // 1 second\nconst productionExportInterval = 10_000; // 10 seconds\n\n/**\n * Registers and initializes OpenTelemetry with the specified configuration\n *\n * @param config - The configuration for OpenTelemetry\n * @returns An object containing the tracer, logger, and shutdown function\n */\nexport function registerOtel(config: OtelConfig): OtelResponse {\n\tconst {\n\t\turl,\n\t\tname,\n\t\tversion,\n\t\tbearerToken,\n\t\tenvironment = 'development',\n\t\tsdkVersion,\n\t\tcliVersion,\n\t\torgId,\n\t\tprojectId,\n\t\tdeploymentId,\n\t\tdevmode = false,\n\t} = config;\n\n\tlet headers: Record<string, string> | undefined;\n\n\tif (bearerToken) {\n\t\theaders = {};\n\t\theaders.Authorization = `Bearer ${bearerToken}`;\n\t}\n\n\tconst resource = new Resource({\n\t\t[ATTR_SERVICE_NAME]: name,\n\t\t[ATTR_SERVICE_VERSION]: version,\n\t\t'@agentuity/orgId': orgId ?? 'unknown',\n\t\t'@agentuity/projectId': projectId ?? 'unknown',\n\t\t'@agentuity/deploymentId': deploymentId ?? 'unknown',\n\t\t'@agentuity/env': environment,\n\t\t'@agentuity/devmode': devmode,\n\t\t'@agentuity/sdkVersion': sdkVersion ?? 'unknown',\n\t\t'@agentuity/cliVersion': cliVersion ?? 'unknown',\n\t});\n\n\tlet otlpLogExporter: OTLPLogExporter | undefined;\n\tlet logRecordProcessor: LogRecordProcessor | undefined;\n\n\tif (url) {\n\t\totlpLogExporter = new OTLPLogExporter({\n\t\t\turl: `${url}/v1/logs`,\n\t\t\theaders,\n\t\t\tcompression: CompressionAlgorithm.GZIP,\n\t\t\ttimeoutMillis: 10_000,\n\t\t});\n\t\tlogRecordProcessor = new BatchLogRecordProcessor(otlpLogExporter);\n\t} else {\n\t\tlogRecordProcessor = new SimpleLogRecordProcessor(\n\t\t\tnew ConsoleLogRecordExporter()\n\t\t);\n\t}\n\n\tconst loggerProvider = new LoggerProvider({\n\t\tresource,\n\t});\n\tloggerProvider.addLogRecordProcessor(logRecordProcessor);\n\tLogsAPI.logs.setGlobalLoggerProvider(loggerProvider);\n\n\tconst logger = createLogger(!!url);\n\n\t// must do this after we have created the logger\n\tpatchConsole(!!url, {\n\t\t'@agentuity/orgId': orgId ?? 'unknown',\n\t\t'@agentuity/projectId': projectId ?? 'unknown',\n\t\t'@agentuity/deploymentId': deploymentId ?? 'unknown',\n\t\t'@agentuity/env': environment,\n\t\t'@agentuity/devmode': devmode,\n\t\t'@agentuity/language': 'javascript',\n\t});\n\n\tconst traceExporter = url\n\t\t? new OTLPTraceExporter({\n\t\t\t\turl: `${url}/v1/traces`,\n\t\t\t\theaders,\n\t\t\t\tkeepAlive: true,\n\t\t\t})\n\t\t: undefined;\n\n\tconst metricExporter = url\n\t\t? new OTLPMetricExporter({\n\t\t\t\turl: `${url}/v1/metrics`,\n\t\t\t\theaders,\n\t\t\t\tkeepAlive: true,\n\t\t\t})\n\t\t: undefined;\n\n\t// Create a separate metric reader for the NodeSDK\n\tconst sdkMetricReader =\n\t\turl && metricExporter\n\t\t\t? new PeriodicExportingMetricReader({\n\t\t\t\t\texporter: metricExporter,\n\t\t\t\t\texportTimeoutMillis: devmode\n\t\t\t\t\t\t? devmodeExportInterval\n\t\t\t\t\t\t: productionExportInterval,\n\t\t\t\t\texportIntervalMillis: devmode\n\t\t\t\t\t\t? devmodeExportInterval\n\t\t\t\t\t\t: productionExportInterval,\n\t\t\t\t})\n\t\t\t: undefined;\n\n\t// Create a separate metric reader for the MeterProvider\n\tconst hostMetricReader =\n\t\turl && metricExporter\n\t\t\t? new PeriodicExportingMetricReader({\n\t\t\t\t\texporter: metricExporter,\n\t\t\t\t\texportTimeoutMillis: devmode\n\t\t\t\t\t\t? devmodeExportInterval\n\t\t\t\t\t\t: productionExportInterval,\n\t\t\t\t\texportIntervalMillis: devmode\n\t\t\t\t\t\t? devmodeExportInterval\n\t\t\t\t\t\t: productionExportInterval,\n\t\t\t\t})\n\t\t\t: undefined;\n\n\tconst meterProvider = hostMetricReader\n\t\t? new MeterProvider({\n\t\t\t\tresource,\n\t\t\t\treaders: [hostMetricReader],\n\t\t\t})\n\t\t: undefined;\n\n\tif (meterProvider) {\n\t\tmetrics.setGlobalMeterProvider(meterProvider);\n\t}\n\n\tconst hostMetrics = meterProvider\n\t\t? new HostMetrics({ meterProvider })\n\t\t: undefined;\n\n\tlet running = false;\n\tlet instrumentationSDK: NodeSDK | undefined;\n\n\tif (url) {\n\t\tconst propagator = new CompositePropagator({\n\t\t\tpropagators: [\n\t\t\t\tnew W3CTraceContextPropagator(),\n\t\t\t\tnew W3CBaggagePropagator(),\n\t\t\t],\n\t\t});\n\t\tpropagation.setGlobalPropagator(propagator);\n\n\t\tinstrumentFetch();\n\t\tinstrumentationSDK = new NodeSDK({\n\t\t\tlogRecordProcessor,\n\t\t\ttraceExporter,\n\t\t\tmetricReader: sdkMetricReader,\n\t\t\tinstrumentations: [getNodeAutoInstrumentations()],\n\t\t\tresource,\n\t\t\ttextMapPropagator: propagator,\n\t\t});\n\t\tinstrumentationSDK.start();\n\t\thostMetrics?.start();\n\t\trunning = true;\n\t}\n\n\tconst tracer = opentelemetry.trace.getTracer(name, version);\n\tconst meter = metrics.getMeter(name, version);\n\n\tconst shutdown = async () => {\n\t\tif (running) {\n\t\t\trunning = false;\n\t\t\tlogger.debug('shutting down OpenTelemetry');\n\t\t\tawait otlpLogExporter\n\t\t\t\t?.forceFlush()\n\t\t\t\t.catch((e) =>\n\t\t\t\t\tlogger.warn('error in forceFlush of otel exporter. %s', e)\n\t\t\t\t);\n\t\t\tawait otlpLogExporter\n\t\t\t\t?.shutdown()\n\t\t\t\t.catch(\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\t!devmode && logger.warn('error in shutdown of otel exporter. %s', e)\n\t\t\t\t);\n\t\t\tawait instrumentationSDK\n\t\t\t\t?.shutdown()\n\t\t\t\t.catch(\n\t\t\t\t\t(e) =>\n\t\t\t\t\t\t!devmode &&\n\t\t\t\t\t\tlogger.warn('error in shutdown of otel instrumentation. %s', e)\n\t\t\t\t);\n\t\t\tlogger.debug('shut down OpenTelemetry');\n\t\t}\n\t};\n\n\tif (url) {\n\t\tlogger.debug('connected to Agentuity Agent Cloud');\n\t}\n\n\treturn { tracer, meter, logger, shutdown };\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// NOTE: do not change these imports to be actual imports, otherwise they WILL break `@opentelemetry/instrumentation-http`\nimport type * as http from 'http';\nimport type * as https from 'https';\n\nimport { OTLPExporterConfigBase } from './legacy-base-configuration';\n\n/**\n * Collector Exporter node base config\n */\nexport interface OTLPExporterNodeConfigBase extends OTLPExporterConfigBase {\n  keepAlive?: boolean;\n  compression?: CompressionAlgorithm;\n  httpAgentOptions?: http.AgentOptions | https.AgentOptions;\n}\n\nexport enum CompressionAlgorithm {\n  NONE = 'none',\n  GZIP = 'gzip',\n}\n","import { format } from 'node:util';\nimport * as LogsAPI from '@opentelemetry/api-logs';\nimport type { Logger } from '../logger';\nimport type { Json } from '../types';\nimport ConsoleLogger from '../logger/console';\nimport { safeStringify } from '../server/util';\nimport { getAgentDetail } from '../router/router';\n\n/**\n * Reference to the original console object before patching\n */\nexport const __originalConsole = Object.create(console); // save the original console before we patch it\n\nclass OtelLogger implements Logger {\n\tprivate readonly delegate: LogsAPI.Logger;\n\tprivate readonly context: Record<string, Json> | undefined;\n\tprivate readonly logger: ConsoleLogger | undefined;\n\n\tconstructor(\n\t\tuseConsole: boolean,\n\t\tdelegate: LogsAPI.Logger,\n\t\tcontext?: Record<string, Json> | undefined\n\t) {\n\t\tthis.delegate = delegate;\n\t\tthis.context = context;\n\t\tthis.logger = useConsole ? new ConsoleLogger() : undefined;\n\t}\n\n\tprivate formatMessage(message: unknown) {\n\t\tif (typeof message === 'string') {\n\t\t\treturn message;\n\t\t}\n\t\ttry {\n\t\t\treturn safeStringify(message);\n\t\t} catch (err) {\n\t\t\t// Handle circular references or other JSON stringification errors\n\t\t\treturn String(message);\n\t\t}\n\t}\n\n\tprivate getAttributes(): Record<string, Json> | undefined {\n\t\tconst attrs = getAgentDetail();\n\t\tif (!attrs) {\n\t\t\treturn this.context;\n\t\t}\n\t\tconst result: Record<string, Json> = {\n\t\t\t...(this.context ?? {}),\n\t\t};\n\t\tfor (const [key, value] of Object.entries(attrs)) {\n\t\t\tif (value !== null && value !== undefined) {\n\t\t\t\tresult[`@agentuity/${key}`] = value as Json;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tdebug(message: string, ...args: unknown[]) {\n\t\tthis.logger?.debug(message, ...args);\n\t\tlet body: string;\n\t\ttry {\n\t\t\tbody = format(this.formatMessage(message), ...args);\n\t\t} catch (err) {\n\t\t\t// Fallback if format causes recursion\n\t\t\tbody = `${this.formatMessage(message)} ${args.map((arg) => String(arg)).join(' ')}`;\n\t\t}\n\t\tthis.delegate.emit({\n\t\t\tseverityNumber: LogsAPI.SeverityNumber.DEBUG,\n\t\t\tseverityText: 'DEBUG',\n\t\t\tbody,\n\t\t\tattributes: this.getAttributes(),\n\t\t});\n\t}\n\tinfo(message: string, ...args: unknown[]) {\n\t\tthis.logger?.info(message, ...args);\n\t\tlet body: string;\n\t\ttry {\n\t\t\tbody = format(this.formatMessage(message), ...args);\n\t\t} catch (err) {\n\t\t\t// Fallback if format causes recursion\n\t\t\tbody = `${this.formatMessage(message)} ${args.map((arg) => String(arg)).join(' ')}`;\n\t\t}\n\t\tthis.delegate.emit({\n\t\t\tseverityNumber: LogsAPI.SeverityNumber.INFO,\n\t\t\tseverityText: 'INFO',\n\t\t\tbody,\n\t\t\tattributes: this.getAttributes(),\n\t\t});\n\t}\n\twarn(message: string, ...args: unknown[]) {\n\t\tthis.logger?.warn(message, ...args);\n\t\tlet body: string;\n\t\ttry {\n\t\t\tbody = format(this.formatMessage(message), ...args);\n\t\t} catch (err) {\n\t\t\t// Fallback if format causes recursion\n\t\t\tbody = `${this.formatMessage(message)} ${args.map((arg) => String(arg)).join(' ')}`;\n\t\t}\n\t\tthis.delegate.emit({\n\t\t\tseverityNumber: LogsAPI.SeverityNumber.WARN,\n\t\t\tseverityText: 'WARN',\n\t\t\tbody,\n\t\t\tattributes: this.getAttributes(),\n\t\t});\n\t}\n\terror(message: string, ...args: unknown[]) {\n\t\tthis.logger?.error(message, ...args);\n\t\tlet body: string;\n\t\ttry {\n\t\t\tbody = format(this.formatMessage(message), ...args);\n\t\t} catch (err) {\n\t\t\t// Fallback if format causes recursion\n\t\t\tbody = `${this.formatMessage(message)} ${args.map((arg) => String(arg)).join(' ')}`;\n\t\t}\n\t\tthis.delegate.emit({\n\t\t\tseverityNumber: LogsAPI.SeverityNumber.ERROR,\n\t\t\tseverityText: 'ERROR',\n\t\t\tbody,\n\t\t\tattributes: this.getAttributes(),\n\t\t});\n\t}\n\tchild(opts: Record<string, Json>) {\n\t\treturn new OtelLogger(!!this.logger, this.delegate, {\n\t\t\t...(this.context ?? {}),\n\t\t\t...opts,\n\t\t});\n\t}\n}\n\n/**\n * Creates a logger that integrates with OpenTelemetry\n *\n * @param useConsole - Whether to also log to the console\n * @param context - Additional context to include with log records\n * @returns A logger instance\n */\nexport function createLogger(\n\tuseConsole: boolean,\n\tcontext?: Record<string, Json>\n): Logger {\n\tconst delegate = LogsAPI.logs.getLogger('default');\n\treturn new OtelLogger(useConsole, delegate, context);\n}\n\n/**\n * Patches the global console object to integrate with OpenTelemetry logging\n *\n * @param attributes - Attributes to include with all console log records\n */\nexport function patchConsole(\n\tenabled: boolean,\n\tattributes: Record<string, Json>\n) {\n\tif (!enabled) {\n\t\treturn;\n\t}\n\tconst _patch = { ...__originalConsole };\n\tconst delegate = createLogger(true, attributes);\n\n\t// Patch individual console methods instead of reassigning the whole object\n\t_patch.log = (...args: unknown[]) => {\n\t\tdelegate.info(args[0] as string, ...args.slice(1));\n\t};\n\t_patch.error = (...args: unknown[]) => {\n\t\tdelegate.error(args[0] as string, ...args.slice(1));\n\t};\n\t_patch.warn = (...args: unknown[]) => {\n\t\tdelegate.warn(args[0] as string, ...args.slice(1));\n\t};\n\t_patch.debug = (...args: unknown[]) => {\n\t\tdelegate.debug(args[0] as string, ...args.slice(1));\n\t};\n\t_patch.info = (...args: unknown[]) => {\n\t\tdelegate.info(args[0] as string, ...args.slice(1));\n\t};\n\t_patch.dir = (...args: unknown[]) => {\n\t\tlet msg = '';\n\t\tif (args.length === 1) {\n\t\t\tmsg = format(args[0]);\n\t\t} else if (args.length > 2) {\n\t\t\tmsg = format(args[0], args[1]);\n\t\t} else {\n\t\t\tmsg = safeStringify(args);\n\t\t}\n\t\tdelegate.debug(msg);\n\t};\n\t_patch.dirxml = (...args: unknown[]) => {\n\t\tdelegate.debug('dirxml:', ...args);\n\t};\n\t_patch.table = (...args: unknown[]) => {\n\t\tdelegate.debug('table:', ...args);\n\t};\n\t_patch.trace = (...args: unknown[]) => {\n\t\tdelegate.debug(args[0] as string, ...args.slice(1));\n\t};\n\t_patch.group = (...args: unknown[]) => {\n\t\tdelegate.debug('group:', ...args);\n\t};\n\t_patch.groupCollapsed = (...args: unknown[]) => {\n\t\tdelegate.debug('groupCollapsed:', ...args);\n\t};\n\t_patch.groupEnd = () => {\n\t\tdelegate.debug('groupEnd');\n\t};\n\t_patch.clear = () => {\n\t\t/* no-op */\n\t};\n\t_patch.count = (...args: unknown[]) => {\n\t\tdelegate.debug('count:', ...args);\n\t};\n\t_patch.countReset = (...args: unknown[]) => {\n\t\tdelegate.debug('countReset:', ...args);\n\t};\n\t_patch.assert = (condition?: boolean, ...args: unknown[]) => {\n\t\tif (!condition) {\n\t\t\tdelegate.error('assertion failed:', ...args);\n\t\t}\n\t};\n\t_patch.time = (...args: unknown[]) => {\n\t\tdelegate.debug('time:', ...args);\n\t};\n\t_patch.timeLog = (...args: unknown[]) => {\n\t\tdelegate.debug('timeLog:', ...args);\n\t};\n\t_patch.timeEnd = (...args: unknown[]) => {\n\t\tdelegate.debug('timeEnd:', ...args);\n\t};\n\t_patch.profile = (...args: unknown[]) => {\n\t\tdelegate.debug('profile:', ...args);\n\t};\n\t_patch.profileEnd = (...args: unknown[]) => {\n\t\tdelegate.debug('profileEnd:', ...args);\n\t};\n\n\t// biome-ignore lint/suspicious/noGlobalAssign: <explanation>\n\tconsole = globalThis.console = _patch;\n}\n","import { formatWithOptions, inspect } from 'node:util';\nimport type { Logger } from './logger';\nimport type { Json } from '../types';\nimport { __originalConsole } from '../otel/logger';\nimport { safeStringify } from '../server/util';\n\nconst yellow = '\\x1b[33m';\nconst green = '\\x1b[32m';\nconst red = '\\x1b[31m';\nconst black = '\\x1b[1;30m';\nconst reset = '\\x1b[0m';\n\n/**\n * Console implementation of the Logger interface\n */\nexport default class ConsoleLogger implements Logger {\n\tprivate context: Record<string, Json>;\n\n\t/**\n\t * Creates a new console logger\n\t *\n\t * @param context - Initial context for the logger\n\t */\n\tconstructor(context: Record<string, Json> = {}) {\n\t\tthis.context = context;\n\t}\n\n\t/**\n\t * Formats a log message with context\n\t *\n\t * @param message - The message to format\n\t * @param args - Additional arguments for formatting\n\t * @returns The formatted message with context\n\t * @private\n\t */\n\tprivate formatMessage(message: unknown, args: unknown[]): string {\n\t\t// Format the context string\n\t\tconst contextStr =\n\t\t\tthis.context && Object.keys(this.context).length > 0\n\t\t\t\t? Object.entries(this.context)\n\t\t\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn `${key}=${typeof value === 'object' ? safeStringify(value) : value}`;\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\treturn `${key}=[object Object]`;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join(' ')\n\t\t\t\t: '';\n\n\t\t// Format the message based on its type\n\t\tlet _message: string;\n\t\tif (typeof message === 'string') {\n\t\t\t_message = message;\n\t\t} else if (typeof message === 'number' || typeof message === 'boolean') {\n\t\t\t_message = String(message);\n\t\t} else if (message === null) {\n\t\t\t_message = 'null';\n\t\t} else if (message === undefined) {\n\t\t\t_message = 'undefined';\n\t\t} else {\n\t\t\t// Use inspect for objects for better formatting\n\t\t\t_message = inspect(message, { depth: null, colors: false });\n\t\t}\n\n\t\t// Format the message with args\n\t\tlet formattedMessage: string;\n\t\ttry {\n\t\t\t// Only use format if we have arguments\n\t\t\tif (args.length > 0) {\n\t\t\t\tformattedMessage = formatWithOptions(\n\t\t\t\t\t{ depth: null },\n\t\t\t\t\t_message,\n\t\t\t\t\t...args\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tformattedMessage = _message;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// If formatting fails, use a simple concatenation\n\t\t\tformattedMessage = `${_message} ${args\n\t\t\t\t.map((arg) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn typeof arg === 'object' ? safeStringify(arg) : String(arg);\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treturn '[object Object]';\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.join(' ')}`;\n\t\t}\n\n\t\t// Combine message with context\n\t\treturn `${formattedMessage}${contextStr ? ` [${contextStr}]` : ''}`;\n\t}\n\n\t/**\n\t * Log a debug message\n\t *\n\t * @param message - The message to log\n\t * @param args - Additional arguments to log\n\t */\n\tdebug(message: unknown, ...args: unknown[]): void {\n\t\ttry {\n\t\t\tconst formattedMessage = this.formatMessage(message, args);\n\t\t\t__originalConsole.debug(`${black}[DEBUG]${reset} ${formattedMessage}`);\n\t\t} catch (err) {\n\t\t\t// Fallback to direct logging if formatting fails\n\t\t\t__originalConsole.debug(`${black}[DEBUG]${reset} ${message}`, ...args);\n\t\t\t__originalConsole.error('Error formatting log message:', err);\n\t\t}\n\t}\n\n\t/**\n\t * Log an info message\n\t *\n\t * @param message - The message to log\n\t * @param args - Additional arguments to log\n\t */\n\tinfo(message: unknown, ...args: unknown[]): void {\n\t\ttry {\n\t\t\tconst formattedMessage = this.formatMessage(message, args);\n\t\t\t__originalConsole.info(`${green}[INFO]${reset}  ${formattedMessage}`);\n\t\t} catch (err) {\n\t\t\t// Fallback to direct logging if formatting fails\n\t\t\t__originalConsole.info(`${green}[INFO]${reset}  ${message}`, ...args);\n\t\t\t__originalConsole.error('Error formatting log message:', err);\n\t\t}\n\t}\n\n\t/**\n\t * Log a warning message\n\t *\n\t * @param message - The message to log\n\t * @param args - Additional arguments to log\n\t */\n\twarn(message: unknown, ...args: unknown[]): void {\n\t\ttry {\n\t\t\tconst formattedMessage = this.formatMessage(message, args);\n\t\t\t__originalConsole.warn(`${yellow}[WARN]${reset}  ${formattedMessage}`);\n\t\t} catch (err) {\n\t\t\t// Fallback to direct logging if formatting fails\n\t\t\t__originalConsole.warn(`${yellow}[WARN]${reset}  ${message}`, ...args);\n\t\t\t__originalConsole.error('Error formatting log message:', err);\n\t\t}\n\t}\n\n\t/**\n\t * Log an error message\n\t *\n\t * @param message - The message to log\n\t * @param args - Additional arguments to log\n\t */\n\terror(message: unknown, ...args: unknown[]): void {\n\t\ttry {\n\t\t\tconst formattedMessage = this.formatMessage(message, args);\n\t\t\t__originalConsole.error(`${red}[ERROR]${reset} ${formattedMessage}`);\n\t\t} catch (err) {\n\t\t\t// Fallback to direct logging if formatting fails\n\t\t\t__originalConsole.error(`${red}[ERROR]${reset} ${message}`, ...args);\n\t\t\t__originalConsole.error('Error formatting log message:', err);\n\t\t}\n\t}\n\n\t/**\n\t * Create a child logger with additional context\n\t *\n\t * @param opts - Additional context for the child logger\n\t * @returns A new logger instance with the additional context\n\t */\n\tchild(opts: Record<string, Json>): Logger {\n\t\treturn new ConsoleLogger({\n\t\t\t...this.context,\n\t\t\t...opts,\n\t\t});\n\t}\n}\n","import { ExportResultCode, type ExportResult } from '@opentelemetry/core';\nimport type {\n\tLogRecordExporter,\n\tReadableLogRecord,\n} from '@opentelemetry/sdk-logs';\nimport ConsoleLogger from '../logger/console';\nimport { SeverityNumber } from '@opentelemetry/api-logs';\n\n/**\n * Console implementation of the LogRecordExporter interface\n */\nexport class ConsoleLogRecordExporter implements LogRecordExporter {\n\tprivate readonly logger: ConsoleLogger;\n\n\t/**\n\t * Creates a new console log record exporter\n\t */\n\tconstructor() {\n\t\tthis.logger = new ConsoleLogger();\n\t}\n\n\t/**\n\t * Exports log records to the console\n\t *\n\t * @param logs - The log records to export\n\t * @param resultCallback - Callback function to report the export result\n\t */\n\texport(\n\t\tlogs: ReadableLogRecord[],\n\t\tresultCallback: (result: ExportResult) => void\n\t): void {\n\t\tfor (const log of logs) {\n\t\t\tswitch (log.severityNumber) {\n\t\t\t\tcase SeverityNumber.DEBUG:\n\t\t\t\t\tthis.logger.debug(log.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SeverityNumber.INFO:\n\t\t\t\t\tthis.logger.info(log.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SeverityNumber.WARN:\n\t\t\t\t\tthis.logger.warn(log.body);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SeverityNumber.ERROR:\n\t\t\t\t\tthis.logger.error(log.body);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.logger.info(log.body);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tresultCallback({ code: ExportResultCode.SUCCESS });\n\t}\n\n\t/**\n\t * Shuts down the exporter\n\t *\n\t * @returns A promise that resolves when shutdown is complete\n\t */\n\tshutdown(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n}\n","import {\n\tcontext,\n\ttrace,\n\tpropagation,\n\tSpanStatusCode,\n} from '@opentelemetry/api';\n\n/**\n * Reference to the original fetch function before instrumentation\n */\nexport const __originalFetch = fetch; // save the original fetch before we patch it\n\n/**\n * Instruments the global fetch function with OpenTelemetry tracing\n *\n * Replaces the global fetch with an instrumented version that creates spans\n * for each HTTP request and propagates trace context in headers\n */\nexport function instrumentFetch() {\n\tconst patch = async (\n\t\tinput: string | Request | URL,\n\t\tinit: RequestInit | undefined\n\t) => {\n\t\tconst url =\n\t\t\ttypeof input === 'string'\n\t\t\t\t? input\n\t\t\t\t: input instanceof URL\n\t\t\t\t\t? input.toString()\n\t\t\t\t\t: input.url;\n\n\t\tconst method =\n\t\t\tinit?.method ||\n\t\t\t(typeof input !== 'string' && !(input instanceof URL)\n\t\t\t\t? input.method || 'GET'\n\t\t\t\t: 'GET');\n\n\t\t// Get the active span if it exists\n\t\tconst activeSpan = trace.getActiveSpan();\n\n\t\t// If there's no active span, just call the original fetch\n\t\tif (!activeSpan) {\n\t\t\treturn __originalFetch(input, init);\n\t\t}\n\n\t\t// Get the current active context\n\t\tconst currentContext = context.active();\n\t\tconst _url = new URL(url);\n\n\t\t// Create a child span using the current context\n\t\tconst childSpan = trace.getTracer('fetch').startSpan(\n\t\t\t`HTTP ${method}`,\n\t\t\t{\n\t\t\t\tattributes: {\n\t\t\t\t\t'http.url': url,\n\t\t\t\t\t'http.path': _url.pathname,\n\t\t\t\t\t'http.method': method,\n\t\t\t\t\thost: _url.host,\n\t\t\t\t},\n\t\t\t},\n\t\t\tcurrentContext\n\t\t);\n\n\t\ttry {\n\t\t\t// Add trace context to headers\n\t\t\tconst headers = new Headers(init?.headers || {});\n\t\t\tconst carrier: Record<string, string> = {};\n\n\t\t\t// Create a new context with the child span\n\t\t\tconst newContext = trace.setSpan(currentContext, childSpan);\n\n\t\t\t// Use the new context for propagation\n\t\t\tpropagation.inject(newContext, carrier);\n\n\t\t\t// Copy the carrier properties to headers\n\t\t\tfor (const [key, value] of Object.entries(carrier)) {\n\t\t\t\theaders.set(key, value);\n\t\t\t}\n\n\t\t\t// Create new init object with updated headers\n\t\t\tconst newInit = {\n\t\t\t\t...init,\n\t\t\t\theaders,\n\t\t\t};\n\n\t\t\tconst response = await __originalFetch(input, newInit);\n\n\t\t\t// Add response attributes to span\n\t\t\tchildSpan.setAttributes({\n\t\t\t\t'http.status_code': response.status,\n\t\t\t\t'http.user_agent': response.headers.get('user-agent') || '',\n\t\t\t});\n\n\t\t\tif (!response.ok) {\n\t\t\t\tchildSpan.setStatus({ code: SpanStatusCode.ERROR });\n\t\t\t} else {\n\t\t\t\tchildSpan.setStatus({ code: SpanStatusCode.OK });\n\t\t\t}\n\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tchildSpan.recordException(error as Error);\n\t\t\tchildSpan.setStatus({ code: SpanStatusCode.ERROR });\n\t\t\tthrow error;\n\t\t} finally {\n\t\t\tchildSpan.end();\n\t\t}\n\t};\n\tglobalThis.fetch = patch;\n}\n"],"mappings":"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","names":["kv","context","SpanStatusCode","ReadableStream","SpanStatusCode","context","trace","context","trace","SpanStatusCode","ReadableStream","sleep","context","trace","SpanStatusCode","devmode","context","trace","SpanKind","SpanStatusCode","devmode","err","context","trace","SpanStatusCode","context","trace","SpanStatusCode","context","trace","SpanStatusCode","context","trace","SpanStatusCode","email","context","trace","SpanStatusCode","key","server","context","join","existsSync","propagation","LogsAPI","CompressionAlgorithm","inspect","context","inspect","err","context","SeverityNumber","logs","context","trace","propagation","SpanStatusCode","devmode","propagation","join","existsSync"]}