import { AsyncLocalStorage } from 'node:async_hooks';
import { type Tracer, type Span, type Meter } from '@opentelemetry/api';
import type { ServerRoute } from '../server/types';
import type { AgentHandler, AgentContext } from '../types';
import type { Logger } from '../logger';
interface RouterConfig {
    handler: AgentHandler;
    context: AgentContext;
    port: number;
}
interface AgentContextStore {
    agentId?: string;
    agentName?: string;
    projectId?: string;
    deploymentId?: string;
    orgId?: string;
    logger?: Logger;
}
export declare const asyncStorage: AsyncLocalStorage<AgentContextStore>;
/**
 * Gets the tracer from the global context
 *
 * @returns The tracer instance
 * @throws Error if not set
 */
export declare function getTracer(): Tracer;
/**
 * Gets the meter from the global context
 *
 * @returns The meter instance
 * @throws Error if not set
 */
export declare function getMeter(): Meter;
/**
 * get the version of the Agentuity SDK
 */
export declare function getSDKVersion(): string;
/**
 * get the current executing agent details (agentId, agentName) or
 * null if not executing in an agent context
 */
export declare function getAgentDetail(): Record<string, string | undefined> | null;
/**
 * Records an exception in the span and logs it
 *
 * @param span - The span to record the exception in
 * @param ex - The exception to record
 */
export declare function recordException(span: Span, ex: unknown, skipLog?: boolean): void;
/**
 * Creates a router handler for the specified configuration
 *
 * @param config - The router configuration
 * @returns A handler function for server routes
 */
export declare function createRouter(config: RouterConfig): ServerRoute['handler'];
export {};
//# sourceMappingURL=router.d.ts.map