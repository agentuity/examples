export declare function setFetch(f: typeof fetch): void;
interface ApiRequestWithPath {
    /**
     * The path to send the request to
     */
    path: string;
}
interface ApiRequestWithUrl {
    /**
     * The full URL to send the request to
     */
    url: string;
}
type ApiRequestOptions = ApiRequestWithPath | ApiRequestWithUrl;
interface ApiRequestBase {
    method: 'POST' | 'GET' | 'PUT' | 'DELETE';
    timeout?: number;
    headers?: Record<string, string>;
    authToken?: string;
}
type BaseApiRequest = ApiRequestOptions & ApiRequestBase;
/**
 * Represents the body of an API request
 */
export type Body = string | ArrayBuffer | ReadableStream | Blob | FormData;
type GetApiRequest = BaseApiRequest & {
    method: 'GET';
    body?: never;
};
type PostApiRequest = BaseApiRequest & {
    method: 'POST';
    body: Body;
};
type PutApiRequest = BaseApiRequest & {
    method: 'PUT';
    body: Body;
};
type DeleteApiRequest = BaseApiRequest & {
    method: 'DELETE';
    body?: Body;
};
type ApiRequest = GetApiRequest | PostApiRequest | PutApiRequest | DeleteApiRequest;
interface APIResponse<T> {
    json: T | null;
    headers: Response['headers'];
    status: number;
    response: Response;
}
/**
 * Sends an API request
 *
 * @param request - The API request to send
 * @param forceBuffer - Whether to force the response to be treated as a buffer
 * @param attempt - The current attempt number (for retries)
 * @returns The API response
 * @throws Error if the API key is not set
 */
export declare function send<K>(request: ApiRequest, forceBuffer?: boolean, attempt?: number): Promise<APIResponse<K>>;
/**
 * Sends a GET request
 *
 * @param path - The path to send the request to
 * @param forceBuffer - Whether to force the response to be treated as a buffer
 * @param headers - Additional headers for the request
 * @param timeout - The timeout for the request
 * @returns The API response
 */
export declare function GET<K>(path: string, forceBuffer?: boolean, headers?: Record<string, string>, timeout?: number): Promise<APIResponse<K>>;
/**
 * Sends a POST request
 *
 * @param path - The path to send the request to
 * @param body - The body of the request
 * @param headers - Additional headers for the request
 * @param timeout - The timeout for the request
 * @returns The API response
 */
export declare function POST<K>(path: string, body: Body, headers?: Record<string, string>, timeout?: number, authToken?: string): Promise<APIResponse<K>>;
/**
 * Sends a PUT request
 *
 * @param path - The path to send the request to
 * @param body - The body of the request
 * @param headers - Additional headers for the request
 * @param timeout - The timeout for the request
 * @returns The API response
 */
export declare function PUT<K>(path: string, body: Body, headers?: Record<string, string>, timeout?: number): Promise<APIResponse<K>>;
/**
 * Sends a DELETE request
 *
 * @param path - The path to send the request to
 * @param body - The body of the request
 * @param headers - Additional headers for the request
 * @param timeout - The timeout for the request
 * @returns The API response
 */
export declare function DELETE<K>(path: string, body?: Body, headers?: Record<string, string>, timeout?: number): Promise<APIResponse<K>>;
export {};
//# sourceMappingURL=api.d.ts.map