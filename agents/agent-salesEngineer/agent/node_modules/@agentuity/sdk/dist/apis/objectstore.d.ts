import type { DataResult, ObjectStore, ObjectStorePutParams, DataType } from '../types';
/**
 * Implementation of the ObjectStore interface for interacting with the object storage API
 */
export default class ObjectStoreAPI implements ObjectStore {
    /**
     * get an object from the object store
     *
     * @param bucket - the bucket to get the object from
     * @param key - the key of the object to get
     * @returns the data result from the object store
     */
    get(bucket: string, key: string): Promise<DataResult>;
    /**
     * put an object into the object store
     *
     * @param bucket - the bucket to put the object into
     * @param key - the key of the object to put
     * @param data - the data to put
     * @param params - the object store put parameters
     */
    put(bucket: string, key: string, data: DataType, params?: ObjectStorePutParams): Promise<void>;
    /**
     * delete an object from the object store
     *
     * @param bucket - the bucket to delete the object from
     * @param key - the key of the object to delete
     * @returns true if the object was deleted, false if the object did not exist
     */
    delete(bucket: string, key: string): Promise<boolean>;
    /**
     * create a public URL for an object
     *
     * @param bucket - the bucket to create the signed URL for
     * @param key - the key of the object to create the signed URL for
     * @param expiresDuration - the duration of the signed URL in milliseconds
     * @returns the public URL
     */
    createPublicURL(bucket: string, key: string, expiresDuration?: number): Promise<string>;
}
//# sourceMappingURL=objectstore.d.ts.map