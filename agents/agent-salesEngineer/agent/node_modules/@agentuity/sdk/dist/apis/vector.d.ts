import type { VectorStorage, VectorUpsertParams, VectorSearchParams, VectorSearchResult } from '../types';
/**
 * Implementation of the VectorStorage interface for interacting with the vector storage API
 */
export default class VectorAPI implements VectorStorage {
    /**
     * upsert a vector into the vector storage
     *
     * @param name - the name of the vector storage
     * @param documents - the documents for the vector upsert
     * @returns the ids of the vectors that were upserted
     */
    upsert(name: string, ...documents: VectorUpsertParams[]): Promise<string[]>;
    /**
     * get a vector from the vector storage by key
     *
     * @param name - the name of the vector storage
     * @param key - the key of the vector to get
     * @returns the result of the vector search
     */
    get(name: string, key: string): Promise<VectorSearchResult | null>;
    /**
     * search for vectors in the vector storage
     *
     * @param name - the name of the vector storage
     * @param params - the parameters for the vector search
     * @returns the results of the vector search
     */
    search<T = unknown>(name: string, params: VectorSearchParams<T>): Promise<VectorSearchResult[]>;
    /**
     * delete a vector from the vector storage
     *
     * @param name - the name of the vector storage
     * @param key - the key of the vector to delete
     * @returns the number of vector objects that were deleted
     */
    delete(name: string, key: string): Promise<number>;
}
//# sourceMappingURL=vector.d.ts.map