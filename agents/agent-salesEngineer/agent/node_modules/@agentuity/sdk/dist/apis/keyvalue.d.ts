import type { DataResult, KeyValueStorage, KeyValueStorageSetParams } from '../types';
/**
 * Implementation of the KeyValueStorage interface for interacting with the key-value storage API
 */
export default class KeyValueAPI implements KeyValueStorage {
    /**
     * get a value from the key value storage
     *
     * @param name - the name of the key value storage
     * @param key - the key to get the value of
     * @returns the value of the key
     */
    get(name: string, key: string): Promise<DataResult>;
    /**
     * set a value in the key value storage
     *
     * @param name - the name of the key value storage
     * @param key - the key to set the value of
     * @param value - the value to set
     * @param ttl - the time to live of the key
     */
    set<T = unknown>(name: string, key: string, value: T, params?: KeyValueStorageSetParams): Promise<void>;
    /**
     * delete a value from the key value storage
     *
     * @param name - the name of the key value storage
     * @param key - the key to delete
     */
    delete(name: string, key: string): Promise<void>;
}
//# sourceMappingURL=keyvalue.d.ts.map