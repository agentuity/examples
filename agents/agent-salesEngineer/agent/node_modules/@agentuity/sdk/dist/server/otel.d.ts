import { propagation } from '@opentelemetry/api';
import type { IncomingMessage, ServerResponse } from 'node:http';
/**
 * Injects trace context into response headers using the OpenTelemetry propagation API
 *
 * @param headers - Optional existing headers to include
 * @returns A record of headers with trace context injected
 */
export declare function injectTraceContextToHeaders(headers?: Record<string, string> | Headers): Record<string, string>;
/**
 * Injects trace context into Node.js ServerResponse headers
 *
 * @param res - The Node.js ServerResponse object
 */
export declare function injectTraceContextToNodeResponse(res: ServerResponse): void;
/**
 * Extracts trace context from incoming request headers
 *
 * @param headers - The request headers
 * @returns The context with trace information
 */
export declare function extractTraceContextFromHeaders(headers: Record<string, string>): ReturnType<typeof propagation.extract>;
/**
 * Extracts trace context from Node.js IncomingMessage headers
 *
 * @param req - The Node.js IncomingMessage object
 * @returns The context with trace information
 */
export declare function extractTraceContextFromNodeRequest(req: IncomingMessage): ReturnType<typeof propagation.extract>;
/**
 * Extracts trace context from Bun Request headers
 *
 * @param req - The Bun Request object
 * @returns The context with trace information
 */
export declare function extractTraceContextFromBunRequest(req: Request): ReturnType<typeof propagation.extract>;
//# sourceMappingURL=otel.d.ts.map