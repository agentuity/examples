import type { GetAgentRequestParams, RemoteAgent } from '../types';
import type { Logger } from '../logger';
import type { AgentConfig } from '../types';
/**
 * Resolves agent references to concrete agent implementations
 */
export default class AgentResolver {
    private readonly logger;
    private readonly agents;
    private readonly port;
    private readonly projectId;
    private readonly currentAgentId;
    /**
     * Creates a new agent resolver
     *
     * @param logger - The logger to use
     * @param agents - List of available server agents
     * @param port - The port the server is running on
     * @param projectId - The project ID
     * @param currentAgentId - The ID of the current agent
     */
    constructor(logger: Logger, agents: AgentConfig[], port: number, projectId: string, currentAgentId: string);
    /**
     * Gets an agent implementation based on the provided parameters
     *
     * @param params - Parameters to identify the agent
     * @returns A promise that resolves to the agent implementation
     * @throws Error if the agent is not found or if there's an agent loop
     */
    getAgent(params: GetAgentRequestParams): Promise<RemoteAgent>;
}
//# sourceMappingURL=agents.d.ts.map