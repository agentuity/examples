import type { Tracer, Meter } from '@opentelemetry/api';
import type { Server } from './types';
import type { AgentConfig, AgentContext } from '../types';
import type { Logger } from '../logger';
/**
 * Configuration for creating a server
 */
interface ServerConfig {
    context: AgentContext;
    directory: string;
    port: number;
    logger: Logger;
}
/**
 * Creates a server with routes from agent modules in a directory
 *
 * @param config - The server configuration
 * @returns A promise that resolves to a server instance
 * @throws Error if no routes are found in the directory
 */
export declare function createServer({ context, directory, port, logger, }: ServerConfig): Promise<Server>;
/**
 * Request parameters for creating a server context
 */
interface ServerContextRequest {
    tracer: Tracer;
    meter: Meter;
    logger: Logger;
    orgId?: string;
    projectId?: string;
    deploymentId?: string;
    runId?: string;
    devmode?: boolean;
    sdkVersion: string;
    agents: AgentConfig[];
}
/**
 * Creates an agent context for server operations
 *
 * @param req - The server context request parameters
 * @returns An agent context object
 */
export declare function createServerContext(req: ServerContextRequest): AgentContext;
export {};
//# sourceMappingURL=server.d.ts.map