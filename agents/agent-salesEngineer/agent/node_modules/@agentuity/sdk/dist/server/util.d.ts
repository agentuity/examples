import type { Span } from '@opentelemetry/api';
import type { AgentResponseData, DataType, JsonObject, ReadableDataType, AgentWelcomePrompt } from '../types';
import type { IncomingRequest, ServerRoute } from './types';
export declare function safeStringify(obj: unknown): string;
export declare function safeParse(text: string, defaultValue?: unknown): any;
export declare function getRoutesHelpText(host: string, routes: ServerRoute[]): string;
export declare function toBuffer(data: ReadableDataType): Promise<Buffer<any>>;
export declare function toWelcomePrompt({ data, contentType, }: AgentWelcomePrompt): Promise<{
    data: string;
    contentType: string;
}>;
export declare function dataTypeToBuffer(args: DataType): Promise<Buffer>;
export declare function fromDataType(data: DataType, contentType?: string, metadata?: JsonObject): Promise<AgentResponseData>;
export declare function createStreamingResponse(origin: string | null, server: string, span: Span, routeResult: Promise<AgentResponseData>): Promise<Response>;
export declare function getRequestFromHeaders(headers: Record<string, string>, runId: string): IncomingRequest;
/**
 * Extracts metadata from headers
 *
 * @param headers - The headers to extract metadata from
 * @returns The metadata
 */
export declare function metadataFromHeaders(headers: Record<string, string>): JsonObject;
export declare function setMetadataInHeaders(headers: Record<string, string>, metadata: JsonObject): void;
export declare function headersToRecord(headers: Headers): Record<string, string>;
/**
 * these are a set of files that should be ignored by the server if not served by the agent
 */
export declare function shouldIgnoreStaticFile(pathname: string): pathname is "/favicon.ico" | "/robots.txt" | "/humans.txt" | "/security.txt" | "/sitemap.xml" | "/favicon.png" | "/apple-touch-icon.png" | "/apple-touch-icon-precomposed.png" | "/crossdomain.xml" | "/browserconfig.xml" | "/manifest.json";
//# sourceMappingURL=util.d.ts.map