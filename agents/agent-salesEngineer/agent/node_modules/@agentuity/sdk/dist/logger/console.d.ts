import type { Logger } from './logger';
import type { Json } from '../types';
/**
 * Console implementation of the Logger interface
 */
export default class ConsoleLogger implements Logger {
    private context;
    /**
     * Creates a new console logger
     *
     * @param context - Initial context for the logger
     */
    constructor(context?: Record<string, Json>);
    /**
     * Formats a log message with context
     *
     * @param message - The message to format
     * @param args - Additional arguments for formatting
     * @returns The formatted message with context
     * @private
     */
    private formatMessage;
    /**
     * Log a debug message
     *
     * @param message - The message to log
     * @param args - Additional arguments to log
     */
    debug(message: unknown, ...args: unknown[]): void;
    /**
     * Log an info message
     *
     * @param message - The message to log
     * @param args - Additional arguments to log
     */
    info(message: unknown, ...args: unknown[]): void;
    /**
     * Log a warning message
     *
     * @param message - The message to log
     * @param args - Additional arguments to log
     */
    warn(message: unknown, ...args: unknown[]): void;
    /**
     * Log an error message
     *
     * @param message - The message to log
     * @param args - Additional arguments to log
     */
    error(message: unknown, ...args: unknown[]): void;
    /**
     * Create a child logger with additional context
     *
     * @param opts - Additional context for the child logger
     * @returns A new logger instance with the additional context
     */
    child(opts: Record<string, Json>): Logger;
}
//# sourceMappingURL=console.d.ts.map