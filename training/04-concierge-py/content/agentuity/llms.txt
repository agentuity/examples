# Agentuity Documentation

## About
This is the official documentation for Agentuity, a cloud  platform designed specifically for building, deploying, and scaling autonomous AI agents. It provides the infrastructure and tools necessary to manage agents built with any framework, such as CrewAI, LangChain, or custom code.

## Capabilities
The documentation covers:
- General cloud and account information
- CLI usage and commands
- SDK integration (Python, JavaScript, etc.)
- Examples, tutorials, and sample implementations
- Troubleshooting and best practices

## Limitations
- The documentation primarily focuses on Agentuity services and may not cover all aspects of AI agent development
- Some advanced features may require additional knowledge of AI frameworks
- Examples are provided for common use cases but may need adaptation for specific requirements

## Preferred Interaction
When interacting with this documentation:
- Start with the Introduction section for an overview of Agentuity
- Refer to specific sections (Cloud, CLI, SDKs, Examples) based on your needs
- Follow the step-by-step tutorials for practical implementation
- Check the Troubleshooting section for common issues and solutions

## Main Sections
1. Introduction - Overview of the Agentuity cloud and its features
2. Cloud - Platform features, account management, and deployment options
3. CLI (Command Line Interface) - Installation, authentication, project management, environment variables, and other CLI commands
4. SDKs & Integration - SDKs for various languages and frameworks (CrewAI, LangChain, Python, Node.js)
5. Examples & Tutorials - Sample projects, step-by-step tutorials, and implementation guides
6. Troubleshooting - Common issues and solutions

file: CLI/agent.mdx
meta: {
  "title": "Agent Commands",
  "description": "Commands for managing agents in your Agentuity project"
}

The `agent` commands allow you to create, list, delete, and manage agents in your Agentuity project.

## agent create

Creates a new agent in your project.

### Aliases

`agentuity agent new` (shortcut for `agentuity agent create`)

### Usage

```bash
agentuity agent create [name] [description] [auth_type]
```

**Arguments:**
- `name` - The name of the agent
- `description` - A description of what the agent does
- `auth_type` - Authentication method for the agent (API Key or None)

**Flags:**
- `-d, --dir string` - The project directory

This command will prompt you for:
- The name of the agent
- A description of what the agent does
- Authentication type (API Key or None)

After providing this information, the command will:
1. Create the agent in the Agentuity Cloud
2. Set up the necessary local files for the agent
3. Update your project configuration to include the new agent

### Example

```bash
$ agentuity agent create
What should we name the agent? MyNewAgent
How should we describe what the MyNewAgent agent does? This agent processes customer support requests
✓ Agent created successfully
```

## agent list

Lists all agents in your project.

### Aliases

`agentuity agent ls` (shortcut for `agentuity agent list`)

### Usage

```bash
agentuity agent list
```

**Flags:**
- `-d, --dir string` - The project directory

This command will display a list of all agents in your project, including:
- Agent name
- Agent ID
- Agent description
- Status (whether the agent exists locally, remotely, or both)

### Example

```bash
$ agentuity agent list
src/agents
├── MyFirstAgent
│  ├── ID: 3c4c0b692533d7807cf0f649ef425dfa29b58bcc99be03e208e52749107fca2e
│  └── Description: A simple agent that can generate text
│
└── MyNewAgent
   ├── ID: 7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f
   └── Description: This agent processes customer support requests
```

## agent delete

Deletes one or more agents from your project.

### Aliases

`agentuity agent rm` or `agentuity agent del` (shortcuts for `agentuity agent delete`)

### Usage

```bash
agentuity agent delete
```

**Flags:**
- `-d, --dir string` - The project directory

This command will:
1. Display a list of all agents in your project
2. Allow you to select one or more agents to delete
3. Ask for confirmation before deleting the selected agents
4. Delete the selected agents from both the Agentuity Cloud and your local project

### Example

```bash
$ agentuity agent delete
Select one or more agents to delete:
[ ] MyFirstAgent 3c4c0b692533d7807cf0f649ef425dfa29b58bcc99be03e208e52749107fca2e
[x] MyNewAgent 7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f

Are you sure you want to delete the selected agents? This action cannot be undone. [y/N] y
✓ Agent deleted successfully
```

## agent apikey

Gets the API key for an agent.

### Aliases

`agentuity agent key` (shortcut for `agentuity agent apikey`)

### Usage

```bash
agentuity agent apikey [agent_name]
```

**Arguments:**
- `agent_name` - The name or ID of the agent (optional)

**Flags:**
- `-d, --dir string` - The project directory

This command will:
1. If an agent name is provided, retrieve the API key for that agent
2. If no agent name is provided and there's only one agent in the project, retrieve the API key for that agent
3. If no agent name is provided and there are multiple agents, display a list of agents to select from

### Example

```bash
# Get API key for a specific agent
$ agentuity agent apikey MyFirstAgent
Agent MyFirstAgent API key: [API KEY WILL BE DISPLAYED HERE]

# Get API key interactively
$ agentuity agent apikey
Select an Agent:
> MyFirstAgent 3c4c0b692533d7807cf0f649ef425dfa29b58bcc99be03e208e52749107fca2e
  MyNewAgent 7a8b9c0d1e2f3g4h5i6j7k8l9m0n1o2p3q4r5s6t7u8v9w0x1y2z3a4b5c6d7e8f

Agent MyFirstAgent API key: [API KEY WILL BE DISPLAYED HERE]
```

## Global Flags

These flags apply to all agent commands:

- `--config string` - Config file (default is $HOME/.config/agentuity/config.yaml)
- `--log-level string` - The log level to use (default "info")


file: CLI/apikey.mdx
meta: {
  "title": "API Key Commands",
  "description": "Managing API keys with the Agentuity CLI"
}

## Overview

The Agentuity CLI provides commands to manage API keys for authentication with the Agentuity Cloud Platform.

## Commands

### apikey

Base command for API key management.

```bash
agentuity apikey
```

**Aliases:** `apikeys`

**Examples:**
```bash
agentuity apikey list
agentuity apikey create
```

### apikey create

Creates a new API key for use with the Agentuity Cloud Platform.

```bash
agentuity apikey create
```

**Aliases:** None

**Examples:**
```bash
agentuity apikey create
```

### apikey delete

Deletes an existing API key.

```bash
agentuity apikey delete
```

**Aliases:** None

**Examples:**
```bash
agentuity apikey delete
```

### apikey get

Retrieves information about a specific API key.

```bash
agentuity apikey get
```

**Aliases:** None

**Examples:**
```bash
agentuity apikey get
```

### apikey list

Lists all available API keys for your account.

```bash
agentuity apikey list
```

**Aliases:** None

**Examples:**
```bash
agentuity apikey list
```


file: CLI/auth.mdx
meta: {
  "title": "Authentication Commands",
  "description": "Commands for authenticating with the Agentuity Cloud Platform"
}

The `auth` commands allow you to authenticate with the Agentuity Cloud Platform, manage your login session, and check your authentication status.

## auth login

Logs you into the Agentuity Cloud Platform.

### Aliases

`agentuity login` (shortcut for `agentuity auth login`)

### Usage

```bash
agentuity auth login
```

This command will print out a one-time code and open a browser window where you can log in to your Agentuity account and provide the one-time code. After successful authentication, your credentials will be stored locally for future use.  By default, the credentials and other configuration are stored in the following file: `$HOME/.config/agentuity/config.json`.

### Example

```bash
$ agentuity auth login
✓ You are now logged in
```

## auth logout

Logs you out of the Agentuity Cloud Platform.

### Aliases

`agentuity logout` (shortcut for `agentuity auth logout`)

### Usage

```bash
agentuity auth logout
```

This command will remove your stored credentials.

### Example

```bash
$ agentuity auth logout
✓ You have been logged out
```

## auth whoami

Displays information about the currently logged-in user.

### Aliases

`agentuity whoami` (shortcut for `agentuity auth whoami`)

### Usage

```bash
agentuity auth whoami
```

### Example

```bash
$ agentuity auth whoami
╭──────────────────────────────────────────────────────────────────────────────────╮
│                                                                                  │
│ Currently logged in as                                                           │
│                                                                                  │
│ Name:           Jeff Haynie                    user_xsjDaYg0UsTcARJWa1BI5irsoB7  │
│                                                                                  │
│ Organization:   Jeff Team                       org_xsjDbpem0VT7QA9DupHGdE72HLQ  │
│                                                                                  │
╰──────────────────────────────────────────────────────────────────────────────────╯
```


file: CLI/bundle.mdx
meta: {
  "title": "Bundle Command",
  "description": "Command for bundling Agentuity projects for deployment"
}

The `bundle` command allows you to create a bundled version of your Agentuity project for deployment.

## bundle

Runs the build bundle process for an Agentuity project.

### Aliases

`agentuity build` (shortcut for `agentuity bundle`)

### Usage

```bash
agentuity bundle [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory of the project to bundle |
| `--production`, `-p` | Bundle the project for production deployment |


> You generally don't need to use this command as it is automatically called when you run `agentuity dev` or `agentuity start`.

file: CLI/cloud.mdx
meta: {
  "title": "Cloud Commands",
  "description": "Commands for deploying and managing projects in the Agentuity Cloud Platform"
}

The `cloud` commands allow you to deploy and manage your projects in the Agentuity Cloud Platform.

## cloud deploy

Deploys a project to the Agentuity Cloud Platform.

### Aliases

`agentuity deploy` (shortcut for `agentuity cloud deploy`)

### Usage

```bash
agentuity cloud deploy [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory of the project to deploy |

### Examples

Deploy a project from the current directory:
```bash
$ agentuity cloud deploy
✓ Project deployed successfully
🚀 Your project is now live at: https://app.agentuity.com/projects/proj_123456
```

Deploy a project from a specific directory:
```bash
$ agentuity cloud deploy --dir ~/projects/my-project
✓ Project deployed successfully
🚀 Your project is now live at: https://app.agentuity.com/projects/proj_123456
```

## cloud status

Checks the deployment status of a project.

### Aliases

`agentuity status` (shortcut for `agentuity cloud status`)

### Usage

```bash
agentuity cloud status [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory of the project to check |

### Examples

Check the status of a project in the current directory:
```bash
$ agentuity cloud status
Project: my-project
Status: deployed
Last deployment: 2025-02-27T04:00:00Z
URL: https://app.agentuity.com/projects/proj_123456
```


file: CLI/dev.mdx
meta: {
  "title": "Development Commands",
  "description": "Commands for local development of Agentuity projects"
}

The `dev` commands allow you to run and test your Agentuity projects locally during development.

## dev

Runs a development server for local testing and development.

### Aliases

`agentuity run` (shortcut for `agentuity dev`)

### Usage

```bash
agentuity dev [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory of the project to run |
| `--websocket-id` | Specify a WebSocket room ID for real-time communication |

### Examples

Run a development server for a project in the current directory:
```bash
$ agentuity dev
✓ Development server started
🔗 Local URL: http://localhost:3000
```

Run a development server for a project in a specific directory:
```bash
$ agentuity dev --dir ~/projects/my-project
✓ Development server started
🔗 Local URL: http://localhost:3000
```

Run a development server with a specific WebSocket room ID:
```bash
$ agentuity dev --websocket-id room_123456
✓ Development server started
🔗 Local URL: http://localhost:3000
🔌 WebSocket connected: room_123456
```


file: CLI/env.mdx
meta: {
  "title": "Environment Commands",
  "description": "Commands for managing environment variables and secrets in Agentuity projects"
}

The `env` commands allow you to manage environment variables and secrets for your Agentuity projects.

## env set

Sets environment variables or secrets for a project.

### Usage

```bash
agentuity env set [key] [value] [flags]
```

### Aliases

`agentuity set` (shortcut for `agentuity env set`)
`agentuity env add`, `agentuity env put`

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory to the project |
| `--file`, `-f` | The path to a file containing environment variables to set |
| `--secret`, `-s` | Force the value(s) to be treated as a secret |
| `--force` | Don't prompt for confirmation |

### Examples

Set a single environment variable:
```bash
$ agentuity env set API_KEY your-api-key
✓ Environment variable saved
```

Set a secret:
```bash
$ agentuity env set --secret DB_PASSWORD your-password
✓ Secret saved
```

Set environment variables from a file:
```bash
$ agentuity env set --file .env
✓ Environment variables and secrets saved
```

<Callout type="info">
All environment and secret values are encrypted at rest and in transit.
</Callout>

## env list

Lists all environment variables and secrets for a project.

### Usage

```bash
agentuity env list [flags]
```

### Aliases

`agentuity list` (shortcut for `agentuity env list`)
`agentuity env ls`, `agentuity env show`, `agentuity env print`

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory to the project |

### Examples

```bash
$ agentuity env list
API_KEY=your-api-key
DB_PASSWORD=********
```

## env get

Gets the value of an environment variable or secret.

### Aliases

`agentuity get` (shortcut for `agentuity env get`)

### Usage

```bash
agentuity env get [key] [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory to the project |

### Examples

```bash
$ agentuity env get API_KEY
your-api-key
```

## env delete

Deletes environment variables or secrets.

### Usage

```bash
agentuity env delete [key...] [flags]
```

### Aliases

`agentuity delete` (shortcut for `agentuity env delete`)
`agentuity env rm`, `agentuity env del`

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory to the project |
| `--force` | Don't prompt for confirmation |

### Examples

Delete a single environment variable:
```bash
$ agentuity env delete API_KEY
✓ Environment variable deleted
```

Delete multiple environment variables:
```bash
$ agentuity env delete API_KEY DB_PASSWORD
✓ Environment variables and secrets deleted
```


file: CLI/installation.mdx
meta: {
  "title": "Installation",
  "description": "Installation of Agentuity CLI"
}

import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

## Installation

<Tabs items={['macOS', 'Linux', 'Windows (WSL)']}>
  <Tab>
    ### macOS Installation

    ```bash
    curl -fsS https://agentuity.sh | sh
    ```

    ### Upgrading on macOS

    To upgrade to the latest version of the Agentuity CLI:

    ```bash
    agentuity upgrade
    ```
  </Tab>
  <Tab>
    ### Linux Installation

    ```bash
    curl -fsS https://agentuity.sh | sh
    ```

    ### Upgrading on Linux

    To upgrade to the latest version of the Agentuity CLI:

    ```bash
    agentuity upgrade
    ```
  </Tab>
  <Tab>
    ### Windows (WSL) Installation

    <Callout type="warning">
      The install script for Windows only works in the <strong>WSL (Windows Subsystem for Linux)</strong> environment.<br/>
      <strong>There is currently no support for a native Windows installer.</strong>
    </Callout>

    ```bash
    curl -fsS https://agentuity.sh | sh
    ```

    ### Upgrading on Windows (WSL)

    To upgrade to the latest version of the Agentuity CLI:

    ```bash
    agentuity upgrade
    ```
  </Tab>
</Tabs>

## Manual Installation

You can also manually download and install the Agentuity CLI from the [GitHub releases page](https://github.com/agentuity/cli/releases) for any platform:

1. Visit the [Agentuity CLI releases page](https://github.com/agentuity/cli/releases)
2. Download the appropriate version for your operating system
3. Extract the downloaded file
4. Add the executable to your system PATH

## Source Code

The source code for the Agentuity CLI is available on [GitHub](https://github.com/agentuity/cli).

## Shell Completions

The Agentuity CLI provides shell completions for bash, zsh, fish, and PowerShell. These can help make your command line experience more efficient by providing tab-completion for commands and options.

### Automatic Setup

When you install the CLI using the installer scripts, completions are automatically set up for:
- **Bash and Zsh** on macOS and Linux (when you have write permissions to the completion directories)

### Manual Setup

You can manually set up completions for any supported shell using the `agentuity completion` command.

<Tabs items={['Bash', 'Zsh', 'Fish']}>
  <Tab>
    To load completions in your current bash session:

    ```bash
    source <(agentuity completion bash)
    ```

    To load completions for every new session:

    For Linux:
    ```bash
    agentuity completion bash > /etc/bash_completion.d/agentuity
    ```

    For macOS:
    ```bash
    agentuity completion bash > $(brew --prefix)/etc/bash_completion.d/agentuity
    ```

    Note: This depends on the `bash-completion` package. If not already installed, you can install it via your OS's package manager.
  </Tab>
  <Tab>
    To load completions in your current zsh session:

    ```bash
    source <(agentuity completion zsh)
    ```

    To load completions for every new session:

    For Linux:
    ```bash
    agentuity completion zsh > "${fpath[1]}/_agentuity"
    ```

    For macOS:
    ```bash
    agentuity completion zsh > $(brew --prefix)/share/zsh/site-functions/_agentuity
    ```

    If shell completion is not already enabled in your environment, you need to enable it:

    ```bash
    echo "autoload -U compinit; compinit" >> ~/.zshrc
    ```
  </Tab>
  <Tab>
    To load completions in your current fish session:

    ```bash
    agentuity completion fish | source
    ```

    To load completions for every new session:

    ```bash
    agentuity completion fish > ~/.config/fish/completions/agentuity.fish
    ```
  </Tab>
</Tabs>


file: CLI/mcp.mdx
meta: {
  "title": "MCP Commands",
  "description": "Documentation for the Model Context Protocol (MCP) integration in Agentuity CLI"
}

## Overview

The Agentuity CLI implements the Model Context Protocol (MCP), which allows integration with AI-powered code editors and tools. This integration enhances the capabilities of AI agents inside supported clients.

For more information on the MCP protocol, see [https://modelcontextprotocol.io/](https://modelcontextprotocol.io/)

## Commands

### mcp

The base command for all MCP-related operations.

```bash
agentuity mcp
```

**Aliases:** None

**Examples:**
```bash
agentuity mcp install
agentuity mcp uninstall
agentuity mcp list
```

### mcp install

Installs the Agentuity CLI as an MCP server, enabling integration with supported MCP clients.

```bash
agentuity mcp install
```

**Aliases:** `i`, `add`

**Examples:**
```bash
agentuity mcp install
```

### mcp uninstall

Uninstalls the Agentuity CLI as an MCP server, removing integration with MCP clients.

```bash
agentuity mcp uninstall
```

**Aliases:** `rm`, `delete`, `del`, `remove`

**Examples:**
```bash
agentuity mcp uninstall
```

### mcp list

Lists all MCP server configurations detected on the machine, showing which clients are configured.

```bash
agentuity mcp list
```

**Aliases:** `ls`

**Examples:**
```bash
agentuity mcp list
```

## Manual Installation

If you need to manually configure an MCP client, you can use the following command:

```bash
agentuity mcp run --stdio
```

This command is typically used for advanced configuration scenarios.


file: CLI/project.mdx
meta: {
  "title": "Project Commands",
  "description": "Commands for creating and managing Agentuity projects"
}

The `project` commands allow you to create and manage Agentuity projects.

## project create

Creates a new Agentuity project.

### Aliases

`agentuity create` (shortcut for `agentuity project create`)
`agentuity project new`

### Usage

```bash
agentuity project create [name] [description] [agent-name] [agent-description] [auth-type] [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory to create the project in |
| `--provider`, `-p` | The provider to use for the project |
| `--template`, `-t` | The template to use for the project |

### Examples

Create a new project with interactive prompts:
```bash
$ agentuity project create my-project
✓ Project created successfully

Next steps:

1. Switch into the project directory at ~/my-project
2. Run agentuity run to run the project locally in development mode
3. Run agentuity deploy to deploy the project to the Agentuity Agent Cloud

🏠 Access your project at https://app.agentuity.com/projects/proj_123456
```

Create a new project with a specific provider:
```bash
$ agentuity project create my-project --provider javascript
✓ Project created successfully
```

## project list

Lists all projects in your Agentuity account.

### Aliases

`agentuity project ls` (shortcut for `agentuity project list`)

### Usage

```bash
agentuity project list
```

### Examples

```bash
$ agentuity project list
Projects:
  my-project (proj_123456)
  test-project (proj_789012)
  demo-app (proj_345678)
```

## project delete

Deletes one or more projects from your Agentuity account.

### Aliases

`agentuity project rm` or `agentuity project del` (shortcuts for `agentuity project delete`)

### Usage

```bash
agentuity project delete
```

This command will:
1. Display a list of all projects in your account
2. Allow you to select one or more projects to delete
3. Ask for confirmation before deleting the selected projects

### Examples

```bash
$ agentuity project delete
Select one or more projects to delete:
[ ] my-project (proj_123456)
[x] test-project (proj_789012)
[ ] demo-app (proj_345678)

Are you sure you want to delete the selected projects? This action cannot be undone. [y/N] y
✓ Project deleted successfully
```

## project import

Imports an existing project into your Agentuity account.

### Usage

```bash
agentuity project import [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--dir`, `-d` | The directory for the project |

### Examples

```bash
$ agentuity project import --dir ./my-existing-project
✓ Project imported successfully
```


file: CLI/version.mdx
meta: {
  "title": "Version Command",
  "description": "Command for checking the version of the Agentuity CLI"
}

The `version` command allows you to check, display, and upgrade the Agentuity CLI version.

## version

Displays the version of the Agentuity CLI.

### Aliases

`agentuity -v`, `agentuity --version` (shortcuts for `agentuity version`)

### Usage

```bash
agentuity version [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--long` | Display detailed version information including commit hash and build date |

### Examples

Basic version information:
```bash
$ agentuity version
1.0.0
```

Detailed version information:
```bash
$ agentuity version --long
Version: 1.0.0
Commit: abc123
Date: 2025-02-27
```

## check

Checks if you're using the latest version of the Agentuity CLI.

### Usage

```bash
agentuity version check [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--upgrade` | Upgrade to the latest version if a newer version is available |

### Examples

Check if you're using the latest version:
```bash
$ agentuity version check
You are using the latest version (1.0.0) of the Agentuity CLI.
```

Check and upgrade to the latest version:
```bash
$ agentuity version check --upgrade
A new version (1.1.0) of the Agentuity CLI is available. Upgrading...
Successfully upgraded to version 1.1.0.
```

## upgrade

Upgrades the Agentuity CLI to the latest version. This command is also available as `agentuity upgrade`.

### Usage

```bash
agentuity version upgrade [flags]
```

### Flags

| Flag | Description |
| ---- | ----------- |
| `--force` | Force upgrade even if already on the latest version |

### Examples

Upgrade to the latest version:
```bash
$ agentuity version upgrade
Checking for updates...
A new version (1.1.0) is available. Upgrading...
Creating backup of current binary...
Successfully upgraded to version 1.1.0.
```

Force upgrade:
```bash
$ agentuity version upgrade --force
Creating backup of current binary...
Successfully upgraded to version 1.1.0.
```

On macOS, if the CLI was installed using Homebrew, it will use Homebrew to perform the upgrade.


file: Changelog/cli.mdx
meta: {
  "title": "CLI Changelog",
  "description": "Release notes and version history for the Agentuity CLI"
}

import { Callout } from 'fumadocs-ui/components/callout';

This page documents the release history of the [Agentuity CLI](https://github.com/agentuity/cli).

## v0.0.120

<Callout type="info">
  Released: May 14, 2025
</Callout>

**Changes:**
- **Added**: Add project key for agent comms ([#285](https://github.com/agentuity/cli/pull/285))
- **Changed**: Shorten install script, skip prebuilds on breaking change check ([#287](https://github.com/agentuity/cli/pull/287))
- **Changed**: Cleanup: remove old vscode settings, move release to use blacksmith now that we dont need MSI build ([#289](https://github.com/agentuity/cli/pull/289))
- **Changed**: Update copy in upgrade.go for upgrade
- **Fixed**: [AGENT-163] Update command for Windows ([#284](https://github.com/agentuity/cli/pull/284))
- **Documentation**: Update changelog for v0.0.119 ([#283](https://github.com/agentuity/cli/pull/283))

**⚠️ Breaking Changes**

This version includes breaking changes that require updates to your JavaScript and Python SDKs:

- **JavaScript SDK**: Update to v0.0.115 or later for compatibility with the new agent communications protocol. See the [JavaScript SDK Changelog](https://agentuity.dev/Changelog/sdk-js#v00115) for upgrade instructions.
- **Python SDK**: Update to v0.0.84 or later to support the new project key feature. See the [Python SDK Changelog](https://agentuity.dev/Changelog/sdk-py#v0084) for upgrade instructions.

If you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:

```
The Agentuity SDK v0.0.115 has renamed AGENTUITY_API_KEY to AGENTUITY_SDK_KEY.
Please find all instances of AGENTUITY_API_KEY in my code and replace them with AGENTUITY_SDK_KEY.
```

## v0.0.119

<Callout type="info">
  Released: May 8, 2025
</Callout>

**Changes:**
- **Added**: Added path completion to the CLI ([#282](https://github.com/agentuity/cli/pull/282))
- **Changed**: Cleanup install script ([#281](https://github.com/agentuity/cli/pull/281))
  - Removed Windows native support (WSL is now recommended)
  - Improved installation testing with Docker
  - Restructured installation script for better maintainability

## v0.0.118

<Callout type="info">
  Released: May 6, 2025
</Callout>

**Changes:**
- **Fixed**: Fixed check on dev for Linux by using `sys.IsRunningInsideDocker()` instead of checking for specific Docker files ([#279](https://github.com/agentuity/cli/pull/279))

## v0.0.117

<Callout type="info">
  Released: May 5, 2025
</Callout>

**Changes:**
- **Fixed**: Fixed typo in CI flag name (changed "ci-messsage" to "ci-message") ([#277](https://github.com/agentuity/cli/pull/277))

## v0.0.116

<Callout type="info">
  Released: May 5, 2025
</Callout>

**Changes:**
- **Fixed**: Missed annotation on GitInfo ([#275](https://github.com/agentuity/cli/pull/275))
- **Fixed**: AGENT-29 Check mask value for secrets ([#274](https://github.com/agentuity/cli/pull/274))
- **Fixed**: Passing CI logs URL to display GitHub action logs in the UI ([#273](https://github.com/agentuity/cli/pull/273))
- **Changed**: Taking a walk to get the git data 🚶‍♂️‍➡️ ([#272](https://github.com/agentuity/cli/pull/272))
- **Changed**: Pass on the git info from deploy to bundle when for --deploy ([#271](https://github.com/agentuity/cli/pull/271))

## v0.0.115

<Callout type="info">
  Released: May 2, 2025
</Callout>

**Changes:**
- **Added**: Added mono repofix ([#267](https://github.com/agentuity/cli/pull/267))
- **Changed**: Add flags for deployment data overwrite from github action ([#266](https://github.com/agentuity/cli/pull/266))
- **Fixed**: Allow non-admin users to uninstall CLI without admin privileges ([#264](https://github.com/agentuity/cli/pull/264))

## v0.0.114

<Callout type="info">
  Released: May 1, 2025
</Callout>

**Changes:**
- **Fixed**: Don't call close handler if conn is nil ([#255](https://github.com/agentuity/cli/pull/255))
- **Fixed**: Fix 'text file busy' error during CLI updates ([#254](https://github.com/agentuity/cli/pull/254))
- **Fixed**: Windows: improve the output for windows upgrade ([#253](https://github.com/agentuity/cli/pull/253))
- **Fixed**: Fix PowerShell installation issues in install.ps1 ([#257](https://github.com/agentuity/cli/pull/257))
- **Fixed**: DevMode: Make sure to terminate child processes ([#259](https://github.com/agentuity/cli/pull/259))
- **Fixed**: Don't error if deliberate restart ([#260](https://github.com/agentuity/cli/pull/260))
- **Fixed**: Set ALLUSERS=0 for non-admin installations to ensure proper installation to AppData/Local/Agentuity ([#261](https://github.com/agentuity/cli/pull/261))
- **Added**: Update install.sh to support /home/ubuntu/.bin and prompt for shell reload ([#258](https://github.com/agentuity/cli/pull/258))
- **Added**: Add breaking change for new Python SDK ([#256](https://github.com/agentuity/cli/pull/256))

## v0.0.113

<Callout type="info">
  Released: April 29, 2025
</Callout>

**Changes:**
- **Added**: Make sure agent create has a reference to the template so we can reference it in interpolation ([#251](https://github.com/agentuity/cli/pull/251))
- **Changed**: DevMode: debounce hot reloads ([#250](https://github.com/agentuity/cli/pull/250))

## v0.0.111

<Callout type="info">
  Released: April 29, 2025
</Callout>

**Changes:**
- **Fixed**: Fix PowerShell installation error with global drive ([#246](https://github.com/agentuity/cli/pull/246))
- **Fixed**: Improve hot reload stability ([#245](https://github.com/agentuity/cli/pull/245))
- **Fixed**: Fix Windows upgrade process to uninstall existing CLI before installation ([#244](https://github.com/agentuity/cli/pull/244))
## v0.0.110

<Callout type="info">
  Released: April 29, 2025
</Callout>

**Changes:**
- **Fixed**: More logging and cleanup for dev server startup, more safe filename fixes for python which is stricter ([#242](https://github.com/agentuity/cli/pull/242))

## v0.0.109

<Callout type="info">
  Released: April 29, 2025
</Callout>

**Changes:**
- **Fixed**: Fix issue with windows startup for devmode ([#240](https://github.com/agentuity/cli/pull/240))
  - Increased wait time for devmode on Windows
  - Added more logging
  - Fixed Windows path escape issue in agents JSON
  - Decreased attempt duration

## v0.0.108

<Callout type="info">
  Released: April 29, 2025
</Callout>

**Changes:**
- **Fixed**: Only use SIGINT which is compatible with all platforms vs SIGKILL which doesn't work on Windows ([#239](https://github.com/agentuity/cli/pull/239))

## v0.0.107

<Callout type="info">
  Released: April 29, 2025
</Callout>

**Changes:**
- **Fixed**: DevMode: connect to ipv4 loopback explicitly ([#237](https://github.com/agentuity/cli/pull/237))

## v0.0.106

<Callout type="info">
  Released: April 26, 2025
</Callout>

**Changes:**
- **Changed**: Use update not upgrade ([#235](https://github.com/agentuity/cli/pull/235))
- **Changed**: Some Node libraries which have already been bundled conflict with our bundle require shim ([#233](https://github.com/agentuity/cli/pull/233))
- **Documentation**: Update changelog for v0.0.105 ([#232](https://github.com/agentuity/cli/pull/232))
- **Documentation**: Fix doc link

## v0.0.105

<Callout type="info">
  Released: April 25, 2025
</Callout>

**Changes:**
- **Changed**: Temporarily revert the agent rename detection ([#231](https://github.com/agentuity/cli/pull/231))
- **Changed**: Revert "temporarily comment out the new sdk upgrade requirement until ready" ([#229](https://github.com/agentuity/cli/pull/229))
- **Changed**: Update the dev help output to use the direct agent route instead of legacy route ([#224](https://github.com/agentuity/cli/pull/224))

## v0.0.104

<Callout type="info">
  Released: April 24, 2025
</Callout>

**Changes:**
- **Changed**: Small tweaks around help and error dialog ([#227](https://github.com/agentuity/cli/pull/227))
- **Fixed**: Fix regression in devmode input json using new binary protocol ([#228](https://github.com/agentuity/cli/pull/228))
- **Fixed**: Add error message for JS SDK breaking change ([#225](https://github.com/agentuity/cli/pull/225))
- **Fixed**: Project Name uniqueness check should be within project not any project in the users org ([#223](https://github.com/agentuity/cli/pull/223))
- **Fixed**: Add a more helpful error message when dev command cannot validate the project ([#222](https://github.com/agentuity/cli/pull/222))
- **Fixed**: Better handling when you rename an agent and attempt to deploy ([#221](https://github.com/agentuity/cli/pull/221))
- **Documentation**: Update changelog for v0.0.103 ([#220](https://github.com/agentuity/cli/pull/220))

## v0.0.103

<Callout type="info">
  Released: April 23, 2025
</Callout>

**Changes:**
- **Fixed**: Fix dev mode for new sdk ([#219](https://github.com/agentuity/cli/pull/219))
- **Fixed**: A better error messages when trying to load a project ([#218](https://github.com/agentuity/cli/pull/218))

## v0.0.102

<Callout type="info">
  Released: April 21, 2025
</Callout>

**Changes:**
- **Fixed**: Don't fail if MCP detection fails for any reason on create project ([#216](https://github.com/agentuity/cli/pull/216))

## v0.0.101

<Callout type="info">
  Released: April 19, 2025
</Callout>

**Changes:**
- **Fixed**: Fix unzip function to properly close file handles ([#215](https://github.com/agentuity/cli/pull/215))

## v0.0.100

<Callout type="info">
  Released: April 19, 2025
</Callout>

**Changes:**
- **Changed**: Be smart about remembering the last project ([#212](https://github.com/agentuity/cli/pull/212))
- **Changed**: Hide websocket-id flag from CLI help text ([#211](https://github.com/agentuity/cli/pull/211))
- **Documentation**: Update changelog for v0.0.99 ([#210](https://github.com/agentuity/cli/pull/210))

## v0.0.99

<Callout type="info">
  Released: April 18, 2025
</Callout>

**Changes:**
- **Changed**: Add a better error message on new project by using a dialog component ([#209](https://github.com/agentuity/cli/pull/209))

## v0.0.98

<Callout type="info">
  Released: April 18, 2025
</Callout>

**Changes:**
- **Changed**: Add exponential backoff for agent welcome connection with 30s max time ([#207](https://github.com/agentuity/cli/pull/207))

## v0.0.97

<Callout type="info">
  Released: April 17, 2025
</Callout>

**Changes:**
- **Fixed**: Fix issue with too many files error ([#205](https://github.com/agentuity/cli/pull/205))
- **Fixed**: Fixed small error (55996e3)
- **Changed**: Bump golang.org/x/net from 0.36.0 to 0.38.0 ([#204](https://github.com/agentuity/cli/pull/204))
- **Documentation**: Update changelog for v0.0.96 ([#203](https://github.com/agentuity/cli/pull/203))

## v0.0.96

<Callout type="info">
  Released: April 16, 2025
</Callout>

**Changes:**
- Guard against conn being nil ([e095c09](https://github.com/agentuity/cli/commit/e095c09))
- Only set step cursor on page 1 ([#202](https://github.com/agentuity/cli/pull/202))

## v0.0.95

<Callout type="info">
  Released: April 16, 2025
</Callout>

### Changes

- **Added**: Add retries to HTTP client ([#200](https://github.com/agentuity/cli/pull/200))
- **Changed**: Attempt to have better UX handling of upgrade checks ([#199](https://github.com/agentuity/cli/pull/199))
- **Changed**: Template Improvements ([#198](https://github.com/agentuity/cli/pull/198))
- **Documentation**: Update changelog for v0.0.94 ([#197](https://github.com/agentuity/cli/pull/197))

## v0.0.93

<Callout type="info">
  Released: April 16, 2025
</Callout>

### Changes

- **Changed**: Improve TUI semantics ([#193](https://github.com/agentuity/cli/pull/193))
- **Fixed**: Add more debug logging around CI bundling for github app ([#194](https://github.com/agentuity/cli/pull/194))
- **Documentation**: Update changelog for v0.0.92 ([#192](https://github.com/agentuity/cli/pull/192))

## v0.0.92

<Callout type="info">
  Released: April 15, 2025
</Callout>

### Changes

- **Fixed**: Fix the Git URL to rewrite to https ([#190](https://github.com/agentuity/cli/pull/190))
- **Changed**: Add hyperlinks to older release versions in CHANGELOG.md ([#191](https://github.com/agentuity/cli/pull/191))
- **Changed**: Update changelog for v0.0.91 ([#189](https://github.com/agentuity/cli/pull/189))

## v0.0.91

<Callout type="info">
  Released: April 14, 2025
</Callout>

### Changes

- **Fixed**: Fix go-common flag issue with overriding log level from env and add more debug to bundle ([#188](https://github.com/agentuity/cli/pull/188))

## v0.0.90

<Callout type="info">
  Released: April 14, 2025
</Callout>

### Changes

- **Added**: Add support for managing API Keys from CLI ([#186](https://github.com/agentuity/cli/pull/186))
- **Fixed**: Make sure we set the working directory when running the project dev command since we could be using --dir

## v0.0.89

<Callout type="info">
  Released: April 10, 2025
</Callout>

### Changes

- **Added**: Add CLI Signup Flow ([#182](https://github.com/agentuity/cli/pull/182))
- **Fixed**: Fix macOS segfault during reinstallation ([#183](https://github.com/agentuity/cli/pull/183))
- **Fixed**: Smart login or setup ([#184](https://github.com/agentuity/cli/pull/184))

## v0.0.88

<Callout type="info">
  Released: April 8, 2025
</Callout>

### Changes

- **Added**: Webhook instructions ([#179](https://github.com/agentuity/cli/pull/179))
- **Changed**: Proxy GitHub public APIs ([#180](https://github.com/agentuity/cli/pull/180))
- **Changed**: Small improvements on devmode
- **Fixed**: Make it clear that the webhook is a POST ([#178](https://github.com/agentuity/cli/pull/178))
- **Fixed**: If node_modules or .venv/lib directory are missing when bundling, force install ([#177](https://github.com/agentuity/cli/pull/177))

## v0.0.87

<Callout type="info">
  Released: April 8, 2025
</Callout>

### Changes

- **Fixed**: Fix regression in step 2 (new project) related to cursor selection ([234b330](https://github.com/agentuity/cli/commit/234b3307d1fd96005d4f656ab319d438e7b60626))

## v0.0.86

<Callout type="info">
  Released: April 7, 2025
</Callout>

### Changes

- **Added**: Add Clone Repo step ([#171](https://github.com/agentuity/cli/pull/171))
- **Added**: Add Agent Welcome on DevMode ([#172](https://github.com/agentuity/cli/pull/172))
- **Changed**: Totally re-write the TUI for the new project ([#170](https://github.com/agentuity/cli/pull/170))
- **Changed**: Better upgrade handling ([#174](https://github.com/agentuity/cli/pull/174))
- **Fixed**: Fix crewai installation issue (exit status 130) ([#169](https://github.com/agentuity/cli/pull/169))
- **Fixed**: Make sure command is executed with a context ([#173](https://github.com/agentuity/cli/pull/173))

## v0.0.74

<Callout type="info">
  Released: March 25, 2025
</Callout>

### Changes

- **Added**: JSON Schema for agentuity.yaml file ([#126](https://github.com/agentuity/cli/pull/126), [#127](https://github.com/agentuity/cli/pull/127))
- **Added**: MCP Support ([#121](https://github.com/agentuity/cli/pull/121))
- **Fixed**: Windows installer and MCP fixes ([#129](https://github.com/agentuity/cli/pull/129))
- **Fixed**: Improved dev command shutdown to ensure all child processes are terminated ([#128](https://github.com/agentuity/cli/pull/128))
- **Fixed**: Issue when dev port is taken by automatically choosing another port ([#125](https://github.com/agentuity/cli/pull/125))
- **Fixed**: Git deployment metadata fix ([#120](https://github.com/agentuity/cli/pull/120))
- **Changed**: GitHub improvements ([#123](https://github.com/agentuity/cli/pull/123))

## v0.0.73

<Callout type="info">
  Released: March 21, 2025
</Callout>

### Changes

- **Fixed**: Python: force --env-file when running in devmode ([#118](https://github.com/agentuity/cli/pull/118))
- **Changed**: place .env on another line to be safe

## v0.0.71

<Callout type="info">
  Released: March 20, 2025
</Callout>

### Changes

- **Changed**: Pass on dir flag when doing bundle --deploy ([#115](https://github.com/agentuity/cli/pull/115))

## v0.0.70

<Callout type="info">
  Released: March 19, 2025
</Callout>

### Changes

- **Added**: Initial Implementation of Automatic Version checking ([#113](https://github.com/agentuity/cli/pull/113))

## v0.0.69

<Callout type="info">
  Released: March 19, 2025
</Callout>

### Changes

- **Fixed**: Handle auth failure better ([#112](https://github.com/agentuity/cli/pull/112))
- **Changed**: Move internal/tui package to use go-common/tui package so we can reuse ([#111](https://github.com/agentuity/cli/pull/111))
- **Changed**: Improve Project List View and Auth Whoami ([#110](https://github.com/agentuity/cli/pull/110))

## v0.0.68

<Callout type="info">
  Released: March 19, 2025
</Callout>

### Changes

- **Fixed**: Better handle user interruption errors ([#109](https://github.com/agentuity/cli/pull/109))

## v0.0.67

<Callout type="info">
  Released: March 19, 2025
</Callout>

### Changes

- **Added**: Force new project to always use the latest sdk ([#108](https://github.com/agentuity/cli/pull/108))
- **Fixed**: DevMode: cleanup payload to make sure we keep it as []byte vs using string so we always transmit in base64 w/o recoding by accident ([#107](https://github.com/agentuity/cli/pull/107))

## v0.0.66

<Callout type="info">
  Released: March 17, 2025
</Callout>

### Changes

- **Changed**: Rename devmode ([#106](https://github.com/agentuity/cli/pull/106))
- **Changed**: Dev Mode: deterministic room id ([#63](https://github.com/agentuity/cli/pull/63))

## v0.0.65

<Callout type="info">
  Released: March 17, 2025
</Callout>

### Changes

- **Fixed**: Be smarter on error message of JS when running node directly ([#105](https://github.com/agentuity/cli/pull/105))
- **Added**: Added project id on for matt ([#104](https://github.com/agentuity/cli/pull/104))
- **Fixed**: Add environment variable checks to Python boot.py ([#103](https://github.com/agentuity/cli/pull/103))

## v0.0.64

<Callout type="info">
  Released: March 16, 2025
</Callout>

### Changes

- **Added**: Add README template for JavaScript projects ([#102](https://github.com/agentuity/cli/pull/102))

## v0.0.63

<Callout type="info">
  Released: March 16, 2025
</Callout>

### Changes

- **Changed**: Improve CTRL-C cancel, always send user-agent with version for API requests ([#101](https://github.com/agentuity/cli/pull/101))

## v0.0.62

<Callout type="info">
  Released: March 16, 2025
</Callout>

### Changes

- **Fixed**: Fix change in signature with request.text -> request.data.text ([#100](https://github.com/agentuity/cli/pull/100))
- **Added**: Add Long property documentation to all CLI commands ([#99](https://github.com/agentuity/cli/pull/99))
- **Added**: Add traceparent in the error handling logic to aid in debugging issues ([#98](https://github.com/agentuity/cli/pull/98))

## v0.0.61

<Callout type="info">
  Released: March 15, 2025
</Callout>

### Changes

- **Added**: Add Org Level data encryption for agent source ([#97](https://github.com/agentuity/cli/pull/97))
- **Added**: Improve missing LLM environment variables ([#95](https://github.com/agentuity/cli/pull/95))
- **Fixed**: Don't set AGENTUITY_ENVIRONMENT on the production bundle, let it get set by the infra ([#96](https://github.com/agentuity/cli/pull/96))
- **Fixed**: Fix issue with --env-file not getting picked up in node when running dev ([#94](https://github.com/agentuity/cli/pull/94))
- **Documentation**: Update changelog for v0.0.60 ([#93](https://github.com/agentuity/cli/pull/93))

## v0.0.72

<Callout type="info">
  Released: March 20, 2025
</Callout>

### Changes

- **Added**: Deployment metadata and CI flag for GitHub actions ([#116](https://github.com/agentuity/cli/pull/116))
- **Fixed**: Bug in file watcher ([#114](https://github.com/agentuity/cli/pull/114))
- **Fixed**: Don't send error reports when using the dev version

## v0.0.60

<Callout type="info">
  Released: March 13, 2025
</Callout>

### Changes

- **Added**: Support for new transport domain (agentuity.ai) ([#89](https://github.com/agentuity/cli/pull/89))
- **Added**: Profile switching for local development ([#89](https://github.com/agentuity/cli/pull/89))
- **Fixed**: Improved agent deletion logic with backup functionality ([#90](https://github.com/agentuity/cli/pull/90))
- **Fixed**: Corrected .dev domain references ([#91](https://github.com/agentuity/cli/pull/91), [#92](https://github.com/agentuity/cli/pull/92))

## v0.0.59

<Callout type="info">
  Released: March 13, 2025
</Callout>

### Changes

- Move deployment manifest from `agentuity-deployment.yaml` to `.agentuity/.manifest.yaml` ([#86](https://github.com/agentuity/cli/pull/86))
- Improve UI by showing information banner instead of error when a requirement cannot be met ([#85](https://github.com/agentuity/cli/pull/85))
- Fix development mode issues and environment variable handling for JavaScript environments ([#87](https://github.com/agentuity/cli/pull/87))

## v0.0.58

<Callout type="info">
  Released: March 12, 2025
</Callout>

### Changes

- Fix filepath issues by converting to localized path separators for Windows compatibility ([#80](https://github.com/agentuity/cli/pull/80))

## v0.0.57

<Callout type="info">
  Released: March 12, 2025
</Callout>

### Changes

- Add Python cursor rules files ([#75](https://github.com/agentuity/cli/pull/75))
- Add support for remembering new project preferences ([#74](https://github.com/agentuity/cli/pull/74))
- Fix issue when importing with an existing env ([#78](https://github.com/agentuity/cli/pull/78))

## v0.0.56

<Callout type="info">
  Released: March 12, 2025
</Callout>

### Changes

- **Project Import on Cloud Deploy**: Added functionality to automatically import projects when deploying to the cloud if the project ID is not found or when using a new template ([#73](https://github.com/agentuity/cli/pull/73))
- Added project import command (`agentuity project import`)
- Added project import checks during cloud deployment
- Added project import checks during development mode
- Added project import checks for new agent creation

## v0.0.55

<Callout type="info">
  Released: March 11, 2025
</Callout>

### Changes

- Add debugging for random panic ([#72](https://github.com/agentuity/cli/pull/72))
- Small TypeScript complainer fix

## v0.0.54

<Callout type="info">
  Released: March 11, 2025
</Callout>

### Changes

- Better error handling when using an invalid project_id and better handle dev mode shutdown ([#71](https://github.com/agentuity/cli/pull/71))
- Self update should be tried before brew. Fix issue on project name exists check

## v0.0.53

<Callout type="info">
  Released: March 11, 2025
</Callout>

### Changes

- Make sure we set the AGENTUITY_URL when running in dev mode ([#70](https://github.com/agentuity/cli/pull/70))

## v0.0.52

<Callout type="info">
  Released: March 11, 2025
</Callout>

### Changes

- Improve Error Handling from 400 Bad Request routes ([#69](https://github.com/agentuity/cli/pull/69))

## v0.0.51

<Callout type="info">
  Released: March 11, 2025
</Callout>

### Changes

- Add cursor rules file for JavaScript SDK API reference ([#67](https://github.com/agentuity/cli/pull/67))
- Fix YAML schema for templates validation ([#65](https://github.com/agentuity/cli/pull/65))
- Fix cursor rules placement to use .cursor/rules instead of .cursorrules ([#66](https://github.com/agentuity/cli/pull/66))
- Make sure all API calls use the APIClient and enhance the error system to send api error details to aide in debugging ([#68](https://github.com/agentuity/cli/pull/68))
- Update Python logging format to use [LEVEL] message format ([#64](https://github.com/agentuity/cli/pull/64))

## v0.0.50

<Callout type="info">
  Released: March 10, 2025
</Callout>

### Changes

- Updated templates to match new SDK types ([#59](https://github.com/agentuity/cli/pull/59))
- Fixed issue with template dependencies check not running ([#62](https://github.com/agentuity/cli/pull/62))
- Updated JavaScript templates to use `req.data.text` instead of `req.text()`
- Updated Python template to import `autostart` from the main package


file: Changelog/index.mdx
meta: {
  "title": "Changelog",
  "description": "Release notes and version history for Agentuity products"
}

This section contains the release notes and version history for Agentuity products:

- [CLI](/Changelog/cli) - Command Line Interface
- [JavaScript SDK](/Changelog/sdk-js) - JavaScript/TypeScript SDK
- [Python SDK](/Changelog/sdk-py) - Python SDK

Each page documents the changes, improvements, and bug fixes in each release.


file: Changelog/sdk-js.mdx
meta: {
  "title": "JavaScript SDK Changelog",
  "description": "Release notes and version history for the Agentuity JavaScript SDK"
}

import { Callout } from 'fumadocs-ui/components/callout';

This page documents the release history of the [Agentuity JavaScript SDK](https://github.com/agentuity/sdk-js).
## v0.0.115

<Callout type="info">
  Released: May 14, 2025
</Callout>

### Changes

- Added AGENTUITY_SDK_KEY ([PR #107](https://github.com/agentuity/sdk-js/pull/107))

### ⚠️ Breaking Changes

The environment variable `AGENTUITY_API_KEY` has been renamed to `AGENTUITY_SDK_KEY` for better clarity and consistency. You will need to update your environment variables and code references accordingly.

If you're using the Agentuity CLI, it will detect this change and offer to automatically migrate your code references for you.

For example, you'll need to make the following changes in your code and environment variables:

```diff
- process.env.AGENTUITY_API_KEY
+ process.env.AGENTUITY_SDK_KEY
```

If you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:

```
The Agentuity SDK v0.0.115 has renamed AGENTUITY_API_KEY to AGENTUITY_SDK_KEY.
Please find all instances of AGENTUITY_API_KEY in my code and replace them with AGENTUITY_SDK_KEY.
```

## v0.0.114

<Callout type="info">
  Released: May 10, 2025
</Callout>

### Changes

- Fixed issue with Vector get type being wrong ([PR #106](https://github.com/agentuity/sdk-js/pull/106))


## v0.0.113

<Callout type="info">
  Released: May 8, 2025
</Callout>

### Changes

- Cross platform support for headers.toJSON ([PR #105](https://github.com/agentuity/sdk-js/pull/105), resolves [#103](https://github.com/agentuity/sdk-js/issues/103))

## v0.0.112

<Callout type="info">
  Released: May 2, 2025
</Callout>

### Changes

- Add a bun server handler to handle unhandled errors ([PR #100](https://github.com/agentuity/sdk-js/pull/100))
- Add missing console methods ([PR #101](https://github.com/agentuity/sdk-js/pull/101))

## v0.0.111

<Callout type="info">
  Released: May 1, 2025
</Callout>

### Changes

- More fixes related to gzip compression when using keyvalue
- Change the name of the span when doing a remote solution vs remote execution
- Update to use versioned routes for API services ([PR #97](https://github.com/agentuity/sdk-js/pull/97))

## v0.0.110

<Callout type="info">
  Released: April 29, 2025
</Callout>

### Changes

- In cloud we must bind to all addresses ([PR #96](https://github.com/agentuity/sdk-js/pull/96))

## v0.0.109

<Callout type="info">
  Released: April 29, 2025
</Callout>

### Changes

- Add the ability for an agent to return a Response object directly to provide more flexibility to integrate with existing APIs and protocols ([PR #93](https://github.com/agentuity/sdk-js/pull/93))
- Bind explicitly to ipv4 when creating server ([PR #94](https://github.com/agentuity/sdk-js/pull/94))

## v0.0.108

<Callout type="info">
  Released: April 25, 2025
</Callout>

### Changes

- Fixed issue when the keyvalue returns a gzip encoded value ([PR #92](https://github.com/agentuity/sdk-js/pull/92))

## v0.0.107

<Callout type="info">
  Released: April 25, 2025
</Callout>

### Changes

- Fix issue with chunking and streaming text not matching in some cases ([PR #91](https://github.com/agentuity/sdk-js/pull/91))
## v0.0.106

<Callout type="info">
  Released: April 25, 2025
</Callout>

### Changes

- Add support for streaming data to and from agents.  This includes streaming data to the agent via the `data` object and streaming data from the agent via the `stream` property of the `AgentResponse` object.
- The `trigger` property of the `AgentRequest` object will have the value `agent` when the request is invoked by another agent.
- The `AgentContext` object now has a `scope` property that will have the value of `local` when the context is local or `remote` when agent is being invoked by another agent remotely. In the case of agent-to-agent invocation or handoff within the same project, the scope will be `local`.
- Deprecated the local `/run/:agentId` route since the updated `/:agentId` route now supports streaming data to and from the agent directly. This route will be removed in a near future release.

### ⚠️ Breaking Changes

The `data` object of `AgentRequest` has changed to support fully streaming data and this required a breaking change. Most of the property accessors are now async functions to support the streaming use case.  You can read more about this change in [Pull Request #87](https://github.com/agentuity/sdk-js/pull/87).

For example, the following code changes are required to get the request data as text:

```diff
- const text = req.data.text;
+ const text = await req.data.text();
```

For example, to get the request data as JSON, you need to make the following changes:

```diff
- const json = req.data.json;
+ const json = await req.data.json();
```

See the following documentation [Pull Request](https://github.com/agentuity/docs/pull/92) for specific SDK changes.

If you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:

```
The agents in the agents folder use an older version of the Agentuity SDK which assume the req.data object has properties on it like req.data.json

The new way to do this is with a promise. eg. `await req.data.json()`

The breaking change is here:  https://github.com/agentuity/sdk-js/pull/87

Review this PR, make a plan to change the agents to the latest agentuity SDK with async await support, and execute on it.
```

## v0.0.105

<Callout type="info">
  Released: April 23, 2025
</Callout>

### Changes

- Add support for remote agent handoff ([PR #85](https://github.com/agentuity/sdk-js/pull/85)). This means you can now handoff the request to another agent outside of your current project in the same organization or even outside of your organization if the Agent is public.  The agent-to-agent invocation is secured automatically and doesn't require any additional configuration or authentication.  Internally, the SDK will request a one-time authorization token to invoke the agent on your agent's behalf.

## v0.0.104

<Callout type="info">
  Released: April 23, 2025
</Callout>

### Changes

- Add support for remote agent-to-agent invocation ([PR #83](https://github.com/agentuity/sdk-js/pull/83)). This means you can now invoke another agent outside of your current project in the same organization or even outside of your organization if the Agent is public.  The agent-to-agent invocation is secured automatically and doesn't require any additional configuration or authentication.  Internally, the SDK will request a one-time authorization token to invoke the agent on your agent's behalf.

## v0.0.103

<Callout type="info">
  Released: April 23, 2025
</Callout>

### Changes

- Refactor to support binary streams instead of intermediate JSON protocol ([PR #81](https://github.com/agentuity/sdk-js/pull/81))
- Improved handling of HTTP native protocol
- Added support for passing in the runId
- Better handling of stream data and binary content

## v0.0.102

<Callout type="info">
  Released: April 16, 2025
</Callout>

### Changes

- Fix issue where the child span had the wrong parent on outbound requests for agent-to-agent ([PR #79](https://github.com/agentuity/sdk-js/pull/79))

## v0.0.101

<Callout type="info">
  Released: April 18, 2025
</Callout>

### Changes

- Add agent context to console logger when running inside agent scope ([PR #77](https://github.com/agentuity/sdk-js/pull/77))

## v0.0.100

<Callout type="info">
  Released: April 15, 2025
</Callout>

### Changes

- Add permissions
- Add more otel trace context headers, remove old trace provider ([PR #72](https://github.com/agentuity/sdk-js/pull/72))
- Automatically base64 encode welcome prompts ([PR #73](https://github.com/agentuity/sdk-js/pull/73))
- Fix NodeJS issue where the buffer isn't correctly sending the blob but works fine in Bun version ([PR #74](https://github.com/agentuity/sdk-js/pull/74))
- Debug github workflow git tag issue

## v0.0.99

<Callout type="info">
  Released: April 14, 2025
</Callout>

### Changes

- More debug for github workflow

## v0.0.98

<Callout type="info">
  Released: April 13, 2025
</Callout>

### Changes

- More debug for github release tags

## v0.0.97

<Callout type="info">
  Released: April 12, 2025
</Callout>

### Changes

- Attempt to fix issue with github workflow not pushing tag after release

## v0.0.96

<Callout type="info">
  Released: April 11, 2025
</Callout>

### Changes

- Fix issue with node keyvalue not correctly handling the buffer upload

## v0.0.95

<Callout type="info">
  Released: April 10, 2025
</Callout>

### Changes

- Add more otel trace context headers, remove old trace provider
- Base64 encode the welcome prompts

## v0.0.94

<Callout type="info">
  Released: April 8, 2025
</Callout>

### Changes

- Fix regression in otel traces missing for AI SDK by change in opentelemetry-api version change

## v0.0.93

<Callout type="info">
  Released: April 7, 2025
</Callout>

### Changes

- Add support for agent inspection discovery ([PR #70](https://github.com/agentuity/sdk-js/pull/70))

## v0.0.92

<Callout type="info">
  Released: April 5, 2025
</Callout>

### Changes

- Add data and markdown methods to AgentResponse interface and implementation

## v0.0.91

<Callout type="info">
  Released: April 3, 2025
</Callout>

### Changes

- Use new agentuity sdk api
- Add GitHub workflow for npm package release triggered by version tags ([PR #53](https://github.com/agentuity/sdk-js/pull/53))

## v0.0.90

<Callout type="info">
  Released: April 1, 2025
</Callout>

### Changes

- Fix Vector delete api

## v0.0.89

<Callout type="info">
  Released: March 25, 2025
</Callout>

### Changes

- Add the agentName to the log attributes ([PR #33](https://github.com/agentuity/sdk-js/pull/33))
- Console Logger: show max depth for any objects ([PR #32](https://github.com/agentuity/sdk-js/pull/32))
- When stream is requested but the response isn't a stream, chunk up the response data into chunks and smooth out as if streamed ([PR #31](https://github.com/agentuity/sdk-js/pull/31))
- Fixed issue with buffer underrun getting sent and issue with json encoding ([PR #34](https://github.com/agentuity/sdk-js/pull/34))

## v0.0.88

<Callout type="info">
  Released: March 21, 2025
</Callout>

### Changes

- Improve loading project when using node or bun directly vs using start script or agentuity dev
- Fix mismatch between local run vs remote run with HTTP headers as property of metadata vs the metadata object

## v0.0.87

<Callout type="info">
  Released: March 18, 2025
</Callout>

### Changes

- Slight improvement in location of when context.logger for agent is created

## v0.0.86

<Callout type="info">
  Released: March 16, 2025
</Callout>

### Changes

- Add support for agentId on context.logger
- Fix issue with underrun on base64 stream

## v0.0.85

<Callout type="info">
  Released: March 15, 2025
</Callout>

### Changes

- Streaming Support including SSE

## v0.0.84

<Callout type="info">
  Released: March 14, 2025
</Callout>

### Changes

- Stream IO Input: add new facility to support stream io for input data ([PR #23](https://github.com/agentuity/sdk-js/pull/23))
- Release with new transport model

## v0.0.83

<Callout type="info">
  Released: March 12, 2025
</Callout>

### Changes

- Fix devmode logging when devmode environment is set by live ([PR #24](https://github.com/agentuity/sdk-js/pull/24))

## v0.0.82

<Callout type="info">
  Released: March 12, 2025
</Callout>

### Changes

- KeyValue compression only on upload, not download ([PR #20](https://github.com/agentuity/sdk-js/pull/20))

## v0.0.81

<Callout type="info">
  Released: March 11, 2025
</Callout>

### Changes

- Add support for compressing keyvalue entries ([PR #19](https://github.com/agentuity/sdk-js/pull/19))
- Better format log message if the first parameter is an object ([PR #18](https://github.com/agentuity/sdk-js/pull/18))

## v0.0.80

<Callout type="info">
  Released: March 10, 2025
</Callout>

### Changes

- Refactored the types to make it easier to use
- Fixed various small issues

## v0.0.79 and earlier

For earlier versions, see the [CHANGELOG.md](https://github.com/agentuity/sdk-js/blob/main/CHANGELOG.md) file in the repository.


file: Changelog/sdk-py.mdx
meta: {
  "title": "Python SDK Changelog",
  "description": "Release notes and version history for the Agentuity Python SDK"
}

import { Callout } from 'fumadocs-ui/components/callout';

This page documents the release history of the [Agentuity Python SDK](https://github.com/agentuity/sdk-py).

## v0.0.84

<Callout type="info">
  Released: May 14, 2025
</Callout>

### Added

- Added AGENTUITY_SDK_KEY ([#42](https://github.com/agentuity/sdk-py/pull/42))

### ⚠️ Breaking Changes

The environment variable for API authentication has changed from `AGENTUITY_API_KEY` to `AGENTUITY_SDK_KEY`. You will need to update any references to this environment variable in your code and deployment configurations.

For example, the following changes are required:

```diff
- os.environ["AGENTUITY_API_KEY"] = "your-api-key"
+ os.environ["AGENTUITY_SDK_KEY"] = "your-api-key"
```

When using the Agentuity CLI, it will detect this change and ask if you would like assistance migrating your code automatically.

If you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:

```
The Agentuity SDK v0.0.115 has renamed AGENTUITY_API_KEY to AGENTUITY_SDK_KEY.
Please find all instances of AGENTUITY_API_KEY in my code and replace them with AGENTUITY_SDK_KEY.
```

## v0.0.83

<Callout type="info">
  Released: May 9, 2025
</Callout>

### Fixed

- Fix issue vectors, better typing for Vector and KeyValue in context ([#40](https://github.com/agentuity/sdk-py/pull/40))

## v0.0.82

<Callout type="info">
  Released: April 30, 2025
</Callout>

### Changes

- Add support for streaming data to and from agents.  This includes streaming data to the agent via the `data` object and streaming data from the agent via the `stream` property of the `AgentResponse` object.
- The `trigger` property of the `AgentRequest` object will have the value `agent` when the request is invoked by another agent.
- The `AgentContext` object now has a `scope` property that will have the value of `local` when the context is local or `remote` when agent is being invoked by another agent remotely. In the case of agent-to-agent invocation or handoff within the same project, the scope will be `local`.
- Deprecated the local `/run/:agentId` route since the updated `/:agentId` route now supports streaming data to and from the agent directly. This route will be removed in a near future release.

### ⚠️ Breaking Changes

The `data` object of `AgentRequest` has changed to support fully streaming data and this required a breaking change. Most of the property accessors are now async functions to support the streaming use case.  You can read more about this change in [Pull Request #38](https://github.com/agentuity/sdk-py/pull/38).

For example, the following code changes are required to get the request data as text:

```diff
- text = req.data.text;
+ text = await req.data.text();
```

For example, to get the request data as JSON, you need to make the following changes:

```diff
- json = req.data.json;
+ json = await req.data.json();
```

See the following documentation [Pull Request](https://github.com/agentuity/docs/pull/114) for specific SDK changes.

If you're using an Agentic code editor (such as Cursor, Windsurf, etc.), you can use this prompt to update your code with these changes:

```
The agents in the agents folder use an older version of the Agentuity SDK which assume the req.data object has properties on it like req.data.json

The new way to do this is with a promise. eg. `await req.data.json()`

The breaking change is here:  https://github.com/agentuity/sdk-py/pull/38

Review this PR, make a plan to change the agents to the latest agentuity SDK with async await support, and execute on it.
```


## v0.0.77

<Callout type="info">
  Released: April 7, 2025
</Callout>

### Added

- Add comprehensive test suite with pytest ([#27](https://github.com/agentuity/sdk-py/pull/27))
- Expand test coverage for logger, context, and langchain instrumentation ([#28](https://github.com/agentuity/sdk-py/pull/28))
- Add agent inspect endpoint support ([#29](https://github.com/agentuity/sdk-py/pull/29))

## v0.0.76

<Callout type="info">
  Released: April 3, 2025
</Callout>

### Fixed

- Fix Langchain instrumentation and add openai-agents dependency ([#24](https://github.com/agentuity/sdk-py/pull/24))

## v0.0.75

<Callout type="info">
  Released: April 1, 2025
</Callout>

### Added

- Add data and markdown methods to AgentResponse class ([#26](https://github.com/agentuity/sdk-py/pull/26))
- Add PyPI release workflow ([#22](https://github.com/agentuity/sdk-py/pull/22))

### Changed

- Update logo URL from relative to absolute path ([#19](https://github.com/agentuity/sdk-py/pull/19))
- Remove 'work in progress' warning from README ([#20](https://github.com/agentuity/sdk-py/pull/20))
- Update Agentuity gateway URL from /llm/ to /gateway/ ([#21](https://github.com/agentuity/sdk-py/pull/21))
- Update to use AGENTUITY_CLOUD_PORT with fallback to PORT ([#23](https://github.com/agentuity/sdk-py/pull/23))
- Use transport instead of API for hosted SDK api ([#25](https://github.com/agentuity/sdk-py/pull/25))
- Update CHANGELOG.md for v0.0.74 ([#18](https://github.com/agentuity/sdk-py/pull/18))

## v0.0.74

<Callout type="info">
  Released: March 25, 2025
</Callout>

### Added

- Better support for OpenAI and Agents framework ([#16](https://github.com/agentuity/sdk-py/pull/16))
- Add agentName to logger ([#17](https://github.com/agentuity/sdk-py/pull/17))

## v0.0.73

<Callout type="info">
  Released: March 19, 2025
</Callout>

### Fixed

- Fix issue with non-stream functionality ([#15](https://github.com/agentuity/sdk-py/pull/15))

## v0.0.72

<Callout type="info">
  Released: March 16, 2025
</Callout>

### Added

- Add the @agentuity/agentId to the context.logger for an agent ([#13](https://github.com/agentuity/sdk-py/pull/13))

### Fixed

- Fix import issue and add ruff for formatting and linting ([#14](https://github.com/agentuity/sdk-py/pull/14))

## v0.0.71

<Callout type="info">
  Released: March 16, 2025
</Callout>

### Added

- SSE and Stream support with new stream() method and improved documentation ([#12](https://github.com/agentuity/sdk-py/pull/12))

## v0.0.70

<Callout type="info">
  Released: March 13, 2025
</Callout>

### Added

- Stream IO Input: add new facility to support stream io for input data ([#10](https://github.com/agentuity/sdk-py/pull/10))

## v0.0.69

<Callout type="info">
  Released: March 10, 2025
</Callout>

### Changes

- Implemented Vector and KeyValue services
- Reorganized types into logical files
- Added support for local handoff
- Improved error handling
- Added support for dynamic return types
- Added `get_agents` method on context
- Moved `autostart` into main package
- Added tracing for remote agent calls
- Added httpx dependency for improved HTTP client support


file: Cloud/agents.mdx
meta: {
  "title": "Agent Dashboard",
  "description": "Overview of the agent dashboard in Agentuity Cloud"
}

## Agent Dashboard Overview

The agent dashboard provides a comprehensive view of your deployed agent and its performance. This page helps you monitor your agent's status, usage metrics, and recent activity.

## Dashboard Sections

### Agent Information
The top section of the dashboard displays essential information about your agent:
- Agent status (Active/Inactive)
- Creation date
- Last updated and deployment dates
- LLM models being used by the agent

### Cost & Usage Tracking
This section provides detailed metrics about your agent's usage:
- Total cost accumulated
- LLM cost (portion of the total cost spent on language model calls)
- Input tokens processed
- Output tokens generated

### Recent Activity
The activity section shows a table of recent sessions for your agent, including:
- Session status (Pending, Completed, Error)
- Duration of each session
- Cost per session
- When the session started

### I/O Visualization
The I/O visualization shows how your agent connects to various inputs and outputs. This visual representation helps you understand the flow of data through your agent.

## Calling Your Agent

To call your deployed agent from external applications:

1. In the I/O visualization, click on the webhook icon or the plus button to add a webhook
2. View the webhook configuration modal to get your agent's webhook URL
3. Use this URL to send requests to your agent from your applications

For detailed information about using webhooks with your agent, see the [Webhooks](/Integrations/webhooks) documentation.


file: Cloud/api-keys.mdx
meta: {
  "title": "API Keys Management",
  "description": "Learn how to create, view, and manage API keys in the Agentuity Cloud Console"
}

## Viewing Your API Keys

When you navigate to the API Keys page in the Cloud Console (under Settings), you'll see a table listing all your API keys with the following information:

- **Name**: The descriptive name you've given to the API key
- **Key**: The actual API key value (hidden by default for security)
- **Expires**: When the API key will expire
- **Last Used**: When the API key was last used
- **Owner**: The user who created the API key

## Creating a New API Key

To create a new API key:

1. Navigate to the API Keys page in the Cloud Console (under Settings)
2. Click the "Create API Key" button in the top-right corner
3. In the dialog that appears:
   - Enter a descriptive name for the key (e.g., "Production API Key")
   - Set an expiration date for the key
4. Click "Create Key" to generate the new API key
5. **Important**: Copy the API key value immediately, as it will only be shown once

Note: An API key is automatically created when you create a new project. You can view and manage this key in the API Keys page.


file: Cloud/index.mdx
meta: {
  "title": "Cloud Console Overview",
  "description": "Introduction to the Agentuity Cloud Console and its features"
}

The Agentuity Cloud Console is a web-based interface for managing your Agentuity resources, projects, and settings. This guide provides an overview of the main features and functionality available in the Cloud Console.

- Create and manage projects
- Configure settings and API keys
- Manage memory storage (Vector and Key-Value)
- Monitor agent deployments and runs
- View logs and telemetry data

## Console Sections

### Projects

- Project creation and configuration
- Resource usage monitoring
- Agent management
- Run tracking
- Deployment management
- Project settings

### Memory Storage

The Memory Storage section provides tools for managing different types of memory storage:

- **[Vector Memory Storage](/Cloud/vector-memory)**: For semantic search and large context windows, ideal for knowledge bases and historical data
- **Key-Value Storage**: For fast, simple, or temporary data storage

Learn more in the [Vector Memory Storage documentation](/Cloud/vector-memory) or [Key-Value Storage documentation](/Cloud/key-value-memory).

### Settings and Configuration

The Settings section allows you to manage various configuration options:

- **[API Keys](/Cloud/api-keys)**: Create and manage API keys for authenticating with Agentuity services
- **Organization Settings**: Manage organization details and members
- **User Profile**: Update your user profile and preferences


file: Cloud/key-value-memory.mdx
meta: {
  "title": "Key-Value Memory Storage",
  "description": "Learn how to create, view, and manage key-value memory storage in the Agentuity Cloud Console"
}

## Understanding Key-Value Memory Storage

Key-value memory storage is designed for fast, simple, or temporary data storage, making it ideal for:

- Session data
- Configuration settings
- Caching
- Temporary state management
- Simple data structures
- Sharing state between agents

## Viewing Your Key-Value Instances

When you navigate to the Memory > Key-Value page in the Cloud Console, you'll see a table listing all your key-value instances with the following information:

- **Name**: The name of your key-value instance
- **Size**: The storage size used by the key-value instance

You can filter the list of key-value instances using the search box at the top of the table to quickly find specific instances by name.

## Creating a New Key-Value Instance

There are two ways to create a new key-value instance:

1. From the Memory > Key-Value page in the Cloud Console
2. In code, using the Agentuity SDK


file: Cloud/vector-memory.mdx
meta: {
  "title": "Vector Memory Storage",
  "description": "Learn how to create, view, and manage vector memory storage in the Agentuity Cloud Console"
}

## Understanding Vector Memory Storage

Vector memory storage is designed for semantic search and large context windows, making it ideal for:

- Knowledge bases
- Historical data
- Semantic search applications
- Applications requiring understanding of content meaning
- Long-term memory for agents

## Viewing Your Vector Instances

When you navigate to the Memory > Vector page in the Cloud Console, you'll see a table listing all your vector instances with the following information:

- **Name**: The name of your vector instance
- **Size**: The storage size used by the vector instance

You can filter the list of vector instances using the search box at the top of the table to quickly find specific instances by name.

## Creating a New Vector Instance

There are two ways to create a new vector instance:

1. From the Memory > Vector page in the Cloud Console
2. In code, using the Agentuity SDK


file: Examples/index.mdx
meta: {
  "title": "Examples",
  "description": "Links to examples across our GitHub repositories"
}

While our comprehensive examples documentation is coming soon,
you can explore our GitHub repositories where we maintain a
collection of reference implementations.

<div className="mt-8 mb-8">
  <a
    href="https://github.com/agentuity/examples"
    target="_blank"
    rel="noopener noreferrer"
    className="inline-flex items-center justify-center px-4 py-0.5 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
  >
    <svg className="h-4 w-4 mr-2" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
    View Examples on GitHub
  </a>
</div>

## Featured Examples

### Miami Concierge Agent Template

A React-based concierge service template for Miami visitors, showcasing how to build a user-friendly agent interface.

<div className="my-6 aspect-w-16 aspect-h-9">
  <iframe
    width="100%"
    height="400"
    src="https://www.youtube.com/embed/7rfVPT4-uTA"
    title="Miami Concierge Agent Template"
    frameBorder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

<div className="mt-4 mb-8">
  <a
    href="https://github.com/agentuity/agent-react-miami-concierge-template"
    target="_blank"
    rel="noopener noreferrer"
    className="inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
  >
    <svg className="h-3.5 w-3.5 mr-1.5" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
    View on GitHub
  </a>
</div>

### Content Marketing Agent System

Agents for creating, managing, and scheduling social media content using a multi-agent architecture.

<div className="mt-4 mb-8">
  <a
    href="https://github.com/agentuity/agent-social-marketing"
    target="_blank"
    rel="noopener noreferrer"
    className="inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
  >
    <svg className="h-3.5 w-3.5 mr-1.5" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
    View on GitHub
  </a>
</div>

### Newsroom: AI-Powered Content Pipeline

An automated content generation system that collects, processes, and publishes AI-related news content using specialized AI agents.

<div className="mt-4 mb-8">
  <a
    href="https://github.com/agentuity/newsroom-agentuity"
    target="_blank"
    rel="noopener noreferrer"
    className="inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
  >
    <svg className="h-3.5 w-3.5 mr-1.5" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
    View on GitHub
  </a>
</div>

### Agent Changelog

A tool for automatically generating and managing changelogs for your projects.

<div className="mt-4 mb-8">
  <a
    href="https://github.com/agentuity/agent-changelog"
    target="_blank"
    rel="noopener noreferrer"
    className="inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
  >
    <svg className="h-3.5 w-3.5 mr-1.5" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>
    View on GitHub
  </a>
</div>

## SDK Examples

We provide comprehensive examples for our SDKs to help you get started with building agents using Agentuity.

### JavaScript SDK Examples

Our JavaScript SDK examples demonstrate how to build agents using JavaScript:

<div className="mt-4 mb-4">
  <a
    href="/SDKs/javascript/examples"
    className="inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
  >
    View JavaScript SDK Examples
  </a>
</div>

### Python SDK Examples

Our Python SDK examples demonstrate how to build agents using Python:

<div className="mt-4 mb-4">
  <a
    href="/SDKs/python/examples"
    className="inline-flex items-center justify-center px-3 py-0.5 border border-gray-300 text-xs font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
  >
    View Python SDK Examples
  </a>
</div>


file: Integrations/index.mdx
meta: {
  "title": "Integrations",
  "description": "Guide to integrating Agentuity with external services and platforms"
}

Learn how to integrate Agentuity with various external services and platforms.

## Overview

[Content coming soon - Overview of available integrations and general setup process]

## Authentication

[Content coming soon - Authentication requirements for integrations]

## Best Practices

[Content coming soon - Integration best practices and recommendations]  

file: Integrations/slack.mdx
meta: {
  "title": "Slack Integration",
  "description": "Integrate Agentuity with Slack for notifications and interactions"
}

## Setup

[Content coming soon - Setting up Slack integration]

## Features

[Content coming soon - Available Slack integration features]

## Commands

[Content coming soon - Available Slack commands]

## Notifications

[Content coming soon - Configuring Slack notifications]

## Best Practices

[Content coming soon - Slack integration best practices]

## Troubleshooting

[Content coming soon - Common Slack integration issues and solutions]  

file: Integrations/sms.mdx
meta: {
  "title": "SMS Integration",
  "description": "Integrate Agentuity with SMS services for notifications and interactions"
}

## Setup

[Content coming soon - Setting up SMS integration]

## Providers

[Content coming soon - Supported SMS providers]

## Features

[Content coming soon - Available SMS features]

## Message Templates

[Content coming soon - Creating and managing message templates]

## Best Practices

[Content coming soon - SMS integration best practices]

## Troubleshooting

[Content coming soon - Common SMS integration issues and solutions]  

file: Integrations/webhooks.mdx
meta: {
  "title": "Webhooks",
  "description": "Setting up and managing webhooks with Agentuity"
}

## Overview

Webhooks provide a way to send data to your Agentuity agents or receive data from them. This guide covers how to set up and use webhooks with your Agentuity agents.

## Setting Up Inbound Webhooks

Inbound webhooks allow external systems to send data to your Agentuity agents.

### Accessing Webhook Configuration

1. Navigate to your agent's dashboard in the Agentuity Cloud Console
2. In the I/O visualization, click on the plus button to add a webhook or click on an existing webhook
3. The webhook configuration modal will appear with all necessary settings

### Security Considerations

When setting up webhooks, consider the following security best practices:

- Choose the appropriate authentication method based on your security requirements
- Regularly rotate authentication credentials
- Only expose the minimum required data through your webhooks
- Monitor webhook access logs for unusual activity

## Webhook Events

[Content coming soon - Available webhook events and their payloads]

## Testing

[Content coming soon - Testing webhook integrations]

## Troubleshooting

[Content coming soon - Common webhook issues and solutions]          

file: Introduction/architecture.mdx
meta: {
  "title": "Architecture Overview",
  "description": "Understanding Agentuity's system architecture, components, and integration points"
}

## System Architecture

Agentuity is a cloud platform designed to run and scale AI agents with enterprise-grade reliability. 
Our architecture follows a container-based approach, where each agent operates in its own specialized 
environment.

Unlike traditional serverless platforms, Agentuity ensures containers run for as long as agents need, 
maintaining state and context throughout agent lifecycles. This long-running container approach is 
optimal for complex AI workloads that may require extended processing time.

The platform is fundamentally cross-platform, allowing you to run different agent frameworks 
(CrewAI, Langchain, custom agents) side by side in the same ecosystem, with built-in communication 
channels between them.

## Core Components

Agentuity consists of four primary components:

1. **Container Runtime** - The execution environment where your agents run, providing:
   - Isolated, secure container environments for each agent
   - Automatic scaling based on workload
   - Resource management and optimization
   - Long-running container support for persistent agents

2. **Command Line Interface (CLI)** - A developer tool that enables:
   - Quick agent creation and initialization
   - Local development and testing
   - Deployment management to the Agentuity cloud
   - Agent monitoring and troubleshooting

3. **Software Development Kits (SDKs)** - Libraries that provide:
   - Agent-native tools and services
   - Runtime-specific optimizations for Python and JavaScript (Node and Bun)
   - Integration capabilities with external systems
   - Enhanced agent capabilities and extensions

4. **Web Console** - A management interface offering:
   - Real-time agent monitoring and metrics
   - Deployment and configuration management
   - Usage analytics and performance insights
   - Team collaboration features

## Data Flow

Agent communication and data flow in Agentuity follow secure, encrypted channels:

1. **Agent-to-Agent Communication** - Agents can communicate with each other through encrypted routing, 
regardless of the underlying frameworks used.

2. **External Integrations** - Agents can connect to external systems and data sources through managed 
integration points.

3. **Deployment Pipeline** - Your project code is packaged, containerized, and deployed to the Agentuity 
cloud infrastructure with appropriate networking and routing configured automatically.

## Scalability

Agentuity is designed for enterprise-scale agent deployments:

- **Horizontal Scaling** - Automatically provision additional resources as demand increases
- **Framework Agnostic** - Scale any type of agent regardless of the underlying framework
- **Load Balancing** - Distribute agent workloads efficiently across available resources
- **Resource Optimization** - Intelligently allocate compute resources based on agent requirements

## Security Architecture

Security is foundational to Agentuity's design:

- **Container Isolation** - Each agent operates in its own isolated environment
- **Encrypted Communications** - All agent-to-agent communication is encrypted
- **Secure Deployment** - Protected deployment pipeline from development to production

## Project Conventions

Agentuity projects follow specific conventions in order to take advantage of the deployment and cloud platform Agentuity offers. While we don't dictate which framework to use, we do have a few things you have to follow in your file system. Understanding these conventions are important.

### Project Structure

Every Agentuity project requires the following core components:

1. **agentuity.yaml** - The central configuration file that defines:
   - Project metadata (name, ID, description)
   - Development settings (port, watch patterns)
   - Deployment configuration (resources, scaling)
   - Bundler settings (language, runtime)
   - Agent definitions and routing

2. **Environment Variables** - Stored in a `.env` file:
   - `AGENTUITY_SDK_KEY` - Authenticates SDK requests to the platform
   - `AGENTUITY_PROJECT_KEY` - Identifies your project to the platform
   - Additional provider-specific keys (OpenAI, Anthropic, etc.)

3. **Agent Directory** - Specified in `bundler.agents.dir` (typically `src/agents`):
   - Each agent has its own subdirectory
   - Language-specific entry points (index.ts/js for JavaScript, agent.py for Python)
   - Agent-specific configuration and dependencies

### Language-Specific Conventions

#### JavaScript/TypeScript Projects

```
my-project/
├── agentuity.yaml        # Project configuration
├── .env                  # Environment variables
├── package.json          # Dependencies and scripts
└── src/
    └── agents/           # Agent directory (configurable)
        └── my-agent/     # Individual agent
            └── index.ts  # Agent entry point
```

- Each agent must export a handler function that processes requests
- TypeScript is recommended but JavaScript is fully supported
- Supported runtimes: Node.js and Bun

#### Python Projects

```
my-project/
├── agentuity.yaml        # Project configuration
├── .env                  # Environment variables
├── pyproject.toml        # Dependencies and configuration
└── src/
    └── agents/           # Agent directory (configurable)
        └── my-agent/     # Individual agent
            └── agent.py  # Agent entry point
```

- Each agent must define a `run()` function that processes requests
- Supported runtimes: Python and uv (for dependency management)

### Configuration File (agentuity.yaml)

The `agentuity.yaml` file is the heart of your project, defining how it behaves in development and production:

```yaml
version: ">=0.0.0"         # Minimum CLI version required
project_id: "proj_..."     # Unique project identifier
name: "My Project"         # Human-readable project name
description: "..."         # Optional project description

# Development configuration
development:
  port: 3000               # Local development server port
  watch:
    enabled: true          # Auto-reload on file changes
    files: ["src/**/*.ts"] # Files to watch

# Deployment configuration
deployment:
  resources:
    memory: "1Gi"          # Memory allocation
    cpu: "1000m"           # CPU allocation

# Bundler configuration
bundler:
  language: "javascript"   # Programming language (javascript or python)
  runtime: "nodejs"        # Runtime environment (nodejs, bunjs, python, uv)
  agents:
    dir: "src/agents"      # Directory where agents are located

# Agents configuration
agents:
  - id: "agent_..."        # Unique agent identifier
    name: "My Agent"       # Human-readable agent name
    description: "..."     # Optional agent description
```

### Why These Conventions Matter

These conventions enable several key capabilities:

1. **Consistent Development Experience** - Standardized structure makes it easier to work across projects
2. **Automated Deployment** - The CLI can package and deploy your project without additional configuration
3. **Framework Flexibility** - Use any agent framework while maintaining compatibility with the platform

### Importing Existing Projects

If you have an existing agent project, you can adapt it to Agentuity by:

1. Creating an `agentuity.yaml` file with your project configuration
2. Organizing your agents according to the conventions above
3. Running `agentuity project import` to register with the platform


file: Introduction/index.mdx
meta: {
  "title": "Agentuity"
}

Agentuity is a cloud platform designed specifically for building, deploying, and scaling 
autonomous AI agents. It provides the infrastructure and tools necessary to manage agents 
built with any framework, such as CrewAI, LangChain, or custom code.

With Agentuity, you can:
- Deploy agents with a single command
- Monitor real-time performance and analytics
- Scale agents effortlessly
- Connect agents to various channels (API, chat, webhooks, email, SMS, voice)
- Use any AI agent framework

## Agentuity Platform Overview

<iframe 
  width="100%" 
  height="400" 
  src="https://www.youtube.com/embed/AI1tfCIVOiU" 
  title="Agentuity Platform Overview" 
  frameBorder="0" 
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
  allowFullScreen
></iframe>

## Getting Started

import { Step, Steps } from 'fumadocs-ui/components/steps';

<Steps>
<Step>
### Create an Account
[Create an Agentuity account](https://app.agentuity.com/sign-up) or [Sign in](https://app.agentuity.com/sign-in) to the cloud portal.
</Step>

<Step>
### Install the CLI

import { Tab, Tabs } from 'fumadocs-ui/components/tabs';

<Tabs items={['macOS', 'Linux', 'Windows (WSL)']}>
  <Tab>
    ```bash
    curl -fsS https://agentuity.sh | sh
    ```
  </Tab>
  <Tab>
    ```bash
    curl -fsS https://agentuity.sh | sh
    ```
  </Tab>
  <Tab>
    ```bash
    curl -fsS https://agentuity.sh | sh
    ```
  </Tab>
</Tabs>
</Step>

<Step>
### Login to Agentuity
```bash
agentuity login
```
</Step>

<Step>
### Create Your First Project
```bash
agentuity new
```
</Step>

<Step>
### Deploy Your Project
```bash
agentuity deploy
```
</Step>

<Step>
### Access Your Agent's Webhook
After deploying your agent, you can find its webhook URL in the agent's dashboard:
1. Navigate to your agent in the Agentuity Cloud Console
2. Click on the "Connections" tab or the webhook icon in the I/O visualization
3. In the "Inbound Webhook" modal, you'll find the webhook URL and configuration options

This webhook URL is what you'll use to send requests to your agent from external applications.
</Step>
</Steps>

## Documentation Sections

<Cards>
  <Card
    title="Cloud & Account"
    href="/Cloud/"
    description="Learn about Agentuity Cloud features, account management, and general platform information."
  />
  <Card
    title="Command Line Interface"
    href="/CLI/installation"
    description="Get started with the Agentuity CLI for managing your agents and deployments from the terminal."
  />
  <Card
    title="Examples & Tutorials"
    href="/Examples/"
    description="Explore sample projects, step-by-step tutorials, and implementation guides."
  />
  <Card
    title="SDKs & Integration"
    href="/SDKs"
    description="Integrate Agentuity Cloud into your applications using our SDKs and APIs."
  />
</Cards>

## Need Help?

Join our [Community Discord](https://discord.com/invite/vtn3hgUfuc) for assistance.


file: SDKs/index.mdx
meta: {
  "title": "SDKs",
  "description": "Agentuity SDKs"
}

<div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem', padding: '1rem' }}>
  <Card href="/SDKs/python">
    <h3>Python SDK</h3>
    <p>Build AI Agents with our Python SDK</p>
  </Card>
  
  <Card href="/SDKs/javascript">
    <h3>JavaScript SDK</h3>
    <p>Build AI Agents using our JavaScript/TypeScript SDK</p>
  </Card>
</div>


file: SDKs/javascript/api-reference.mdx
meta: {
  "title": "API Reference",
  "description": "Comprehensive reference for the Agentuity JavaScript SDK API"
}

This section provides detailed documentation for the Agentuity JavaScript SDK API, including method signatures, parameters, return values, and example usage.

## Table of Contents

- [Agent Lifecycle](#agent-lifecycle)
- [Storage APIs](#storage-apis)
- [Agent Communication](#agent-communication)
- [Response Types](#response-types)
- [Request Handling](#request-handling)
- [Logging](#logging)
- [Telemetry](#telemetry)

## Agent Lifecycle

The Agentuity SDK provides a structured way to define and handle agents. An agent consists of a handler function, with its configuration managed by the Agentuity CLI.

### Agent Configuration

Agent configuration is managed by the Agentuity CLI and stored in the project configuration file. The `AgentConfig` interface is used internally by the CLI and SDK:

```typescript
interface AgentConfig {
  /**
   * the name of the agent
   */
  name: string;
  /**
   * the description of the agent
   */
  description?: string;
}
```

### Agent Handler

The `AgentHandler` type defines the handler function for an agent:

```typescript
type AgentHandler = (
  request: AgentRequest,
  response: AgentResponse,
  context: AgentContext
) => Promise<AgentResponseType>;
```

#### Parameters

- `request`: An `AgentRequest` object containing the request data
- `response`: An `AgentResponse` object for creating responses
- `context`: An `AgentContext` object providing access to various capabilities

#### Return Value

The handler function should return a Promise that resolves to an `AgentResponseType` object.

#### Example

```typescript
import { AgentHandler } from '@agentuity/sdk';

// Agent handler function
const handler: AgentHandler = async (request, response, context) => {
  try {
    // Get the request data
    const { name } = await request.data.json();
    
    // Log the request
    context.logger.info(`Received greeting request for ${name}`);
    
    // Return a personalized greeting
    return response.json({
      message: `Hello, ${name}! Welcome to Agentuity.`
    });
  } catch (error) {
    // Handle errors
    context.logger.error('Error processing request', error);
    return response.json({ error: 'Failed to process request' });
  }
};

export default handler;
```

## Storage APIs

The Agentuity SDK provides two storage APIs: Key-Value Storage and Vector Storage.


### Key-Value Storage

The Key-Value Storage API provides a simple way to store and retrieve data. It is accessed through the `context.kv` object.

#### `get(name: string, key: string): Promise<ArrayBuffer | null>`

Retrieves a value from the key-value storage.

##### Parameters

- `name`: The name of the key-value storage
- `key`: The key to retrieve the value for

##### Return Value

Returns a Promise that resolves to an ArrayBuffer containing the value, or null if the key does not exist.

##### Example

```typescript
// Retrieve a value from key-value storage
const value = await context.kv.get('user-preferences', 'user-123');
if (value) {
  // Convert ArrayBuffer to string if needed
  const valueString = new TextDecoder().decode(value);
  console.log(`User preferences: ${valueString}`);
} else {
  console.log('User preferences not found');
}
```

#### `set(name: string, key: string, value: ArrayBuffer | string | Json, ttl?: number): Promise<void>`

Stores a value in the key-value storage.

##### Parameters

- `name`: The name of the key-value storage
- `key`: The key to store the value under
- `value`: The value to store (can be an ArrayBuffer, string, or JSON object)
- `ttl` (optional): Time-to-live in seconds (minimum 60 seconds)

##### Return Value

Returns a Promise that resolves when the value has been stored.

##### Example

```typescript
// Store a string value
await context.kv.set('user-preferences', 'user-123', JSON.stringify({ theme: 'dark' }));

// Store a JSON value
await context.kv.set('user-preferences', 'user-123', { theme: 'dark' });

// Store a binary value
const binaryData = new Uint8Array([1, 2, 3, 4]).buffer;
await context.kv.set('user-data', 'user-123', binaryData);

// Store a value with TTL (expires after 1 hour)
await context.kv.set('session', 'user-123', 'active', 3600);
```

#### `delete(name: string, key: string): Promise<void>`

Deletes a value from the key-value storage.

##### Parameters

- `name`: The name of the key-value storage
- `key`: The key to delete

##### Return Value

Returns a Promise that resolves when the value has been deleted.

##### Example

```typescript
// Delete a value
await context.kv.delete('user-preferences', 'user-123');
```

### Vector Storage

The Vector Storage API provides a way to store and search for data using vector embeddings. It is accessed through the `context.vector` object.

#### `upsert(name: string, ...documents: VectorUpsertParams[]): Promise<string[]>`

Inserts or updates vectors in the vector storage.

##### Parameters

- `name`: The name of the vector storage
- `documents`: One or more documents to upsert, each with either embeddings or text

##### Return Value

Returns a Promise that resolves to an array of string IDs for the upserted vectors.

##### Example

```typescript
// Upsert documents with text
const ids = await context.vector.upsert(
  'product-descriptions',
  { document: 'Ergonomic office chair with lumbar support', metadata: { category: 'furniture' } },
  { document: 'Wireless noise-cancelling headphones', metadata: { category: 'electronics' } }
);

// Upsert documents with embeddings
const ids2 = await context.vector.upsert(
  'product-embeddings',
  { embeddings: [0.1, 0.2, 0.3, 0.4], metadata: { productId: '123' } },
  { embeddings: [0.5, 0.6, 0.7, 0.8], metadata: { productId: '456' } }
);
```

#### `search(name: string, params: VectorSearchParams): Promise<VectorSearchResult[]>`

Searches for vectors in the vector storage.

##### Parameters

- `name`: The name of the vector storage
- `params`: Search parameters including query, limit, similarity threshold, and metadata filters

##### Return Value

Returns a Promise that resolves to an array of search results, each containing an ID, metadata, and distance score.

##### Example

```typescript
// Search for similar products
const results = await context.vector.search('product-descriptions', {
  query: 'comfortable office chair',
  limit: 5,
  similarity: 0.7,
  metadata: { category: 'furniture' }
});

// Process search results
for (const result of results) {
  console.log(`Product ID: ${result.id}, Similarity: ${result.distance}`);
  console.log(`Metadata: ${JSON.stringify(result.metadata)}`);
}
```

#### `delete(name: string, ...ids: string[]): Promise<number>`

Deletes vectors from the vector storage.

##### Parameters

- `name`: The name of the vector storage
- `ids`: One or more IDs of vectors to delete

##### Return Value

Returns a Promise that resolves to the number of vectors that were deleted.

##### Example

```typescript
// Delete vectors
const deletedCount = await context.vector.delete('product-descriptions', 'id1', 'id2', 'id3');
console.log(`Deleted ${deletedCount} vectors`);
```

## Agent Communication

The Agentuity SDK allows agents to communicate with each other through the `context.getAgent()` method and agent redirection.

### `getAgent(params: GetAgentRequestParams): Promise<RemoteAgent>`

Retrieves a handle to a remote agent that can be invoked.

#### Parameters

- `params`: Parameters to identify the agent, either by ID or by name and project ID

#### Return Value

Returns a Promise that resolves to a `RemoteAgent` object that can be used to invoke the agent.

#### Example

```typescript
// Get an agent by ID
const agent = await context.getAgent({ id: 'agent-123' });

// Get an agent by name
const agent2 = await context.getAgent({ 
  name: 'data-processing-agent',
  projectId: 'project-456'
});

// Invoke the agent
const result = await agent.run({ data: 'process this' }, 'application/json');
```

### Agent Handoff

The `response.handoff()` method allows an agent to handoff the request to another agent.

#### `handoff(agent: GetAgentRequestParams, payload?: Json | ArrayBuffer | string, contentType?: string, metadata?: Record<string, Json>): AgentRedirectResponse`

Redirects the current request to another agent.

##### Parameters

- `agent`: Parameters to identify the target agent
- `payload` (optional): The payload to send to the target agent
- `contentType` (optional): The content type of the payload
- `metadata` (optional): Additional metadata to include with the request

##### Return Value

Returns an `AgentRedirectResponse` object.

##### Examples

```typescript
// By ID
return response.handoff({
  id: 'agent_9e478ebc1b6b58f921725e2f6f0025ab',
});

// By Name
return response.handoff({
  name: 'my agent',
});

// By Name Scoped to a Project
return response.handoff({
  name: 'my agent',
  projectId: 'proj_fc9a68c544c486cebf982c9843b9032b',
});

// With payload and metadata
return response.handoff(
  { name: 'data-processing-agent' },
  { data: 'process this' },
  'application/json',
  { source: 'web-agent' }
);
```

## Response Types

The Agentuity SDK provides various methods for creating different types of responses through the `response` object.

### JSON Responses

#### `json(data: Json, metadata?: Record<string, Json>): AgentResponseType`

Creates a JSON response.

##### Parameters

- `data`: The JSON data to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the JSON data.

##### Example

```typescript
return response.json({ 
  message: 'Success',
  data: { id: 123, name: 'Example' }
});
```

### Text Responses

#### `text(data: string, metadata?: Record<string, Json>): AgentResponseType`

Creates a text response.

##### Parameters

- `data`: The text to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the text data.

##### Example

```typescript
return response.text('Hello, world!');
```

### Binary Responses

#### `binary(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`

Creates a binary response.

##### Parameters

- `data`: The binary data to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the binary data.

##### Example

```typescript
const binaryData = new Uint8Array([1, 2, 3, 4]).buffer;
return response.binary(binaryData, { filename: 'data.bin' });
```

### Media Type Responses

The SDK provides specialized methods for various media types:

- `pdf(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `png(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `jpeg(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `gif(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `webp(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `mp3(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `mp4(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `m4a(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `m4p(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `webm(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `wav(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `ogg(data: ArrayBuffer, metadata?: Record<string, Json>): AgentResponseType`
- `data(data: Json | ArrayBuffer | string, contentType: string, metadata?: Record<string, Json>): AgentResponseType`
- `markdown(content: string, metadata?: Record<string, Json>): AgentResponseType`

Each method works similarly to the `binary()` method but sets the appropriate content type. The `data` method allows setting specific data with an exact content type, while the `markdown` method provides a convenient way to return markdown content.

#### Example

```typescript
// Return a PNG image
return response.png(imageData, { filename: 'chart.png' });

// Return an MP3 audio file
return response.mp3(audioData, { duration: 120 });
```

### HTML Responses

#### `html(data: string, metadata?: Record<string, Json>): AgentResponseType`

Creates an HTML response.

##### Parameters

- `data`: The HTML content to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the HTML content.

##### Example

```typescript
return response.html('<h1>Hello, world!</h1><p>This is an HTML response.</p>');
```

### Empty Responses

#### `empty(metadata?: Record<string, Json>): AgentResponseType`

Creates an empty response.

##### Parameters

- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with no payload.

##### Example

```typescript
return response.empty({ status: 204 });
```

## Request Handling

The Agentuity SDK provides various methods for accessing request data through the `request` object.

### Accessing Request Data

#### `get trigger(): string`

Gets the trigger type of the request.

##### Return Value

Returns a string representing the trigger type (webhook, cron, manual, agent, etc.).

##### Example

```typescript
const triggerType = request.trigger;
console.log(`Request triggered by: ${triggerType}`);
```

#### `get(key: string, defaultValue?: Json): Json`

Gets a value from the request. The available properties depend on the trigger type.

##### Parameters

- `key`: The key to retrieve
- `defaultValue` (optional): A default value to return if the key does not exist

##### Return Value

Returns the value for the specified key, or the default value if the key does not exist.

##### Trigger-specific Properties

Different trigger types provide different properties:

- **Webhook**: Includes a `headers` property containing the HTTP headers from the webhook request.

##### Example

```typescript
// For webhook triggers, access headers
const headers = request.get('headers');
// Access a specific header
const githubSignature = headers['x-hub-signature'];

// Get a user ID with a default value
const userId = request.get('userId', 'anonymous');
```

#### `metadata(key: string, defaultValue?: Json): Json`

**Note:** This method is deprecated. Use `get(key, defaultValue)` instead.

Gets metadata associated with the request.

##### Parameters

- `key`: The metadata key to retrieve
- `defaultValue` (optional): A default value to return if the key does not exist

##### Return Value

Returns the metadata value for the specified key, or the default value if the key does not exist.


#### `json(): Promise<Json>`

Gets the payload of the request as a JSON object.

##### Return Value

Returns a Promise that resolves to the request payload as a JSON object.

##### Example

```typescript
const data = await request.data.json();
console.log(`Request data: ${JSON.stringify(data)}`);
```

#### `text(): Promise<string>`

Gets the payload of the request as a string.

##### Return Value

Returns a Promise that resolves to the request payload as a string.

##### Example

```typescript
const text = await request.data.text();
console.log(`Request text: ${text}`);
```

#### `binary(): Promise<ArrayBuffer>`

Gets the payload of the request as an ArrayBuffer.

##### Return Value

Returns a Promise that resolves to the request payload as an ArrayBuffer.

##### Example

```typescript
const binaryData = await request.data.binary();
console.log(`Binary data size: ${binaryData.byteLength} bytes`);
```

### Media-Specific Methods

The SDK provides specialized methods for various media types, all of which now return Promises:

- `pdf(): Promise<ArrayBuffer>`
- `png(): Promise<ArrayBuffer>`
- `jpeg(): Promise<ArrayBuffer>`
- `gif(): Promise<ArrayBuffer>`
- `webp(): Promise<ArrayBuffer>`
- `mp3(): Promise<ArrayBuffer>`
- `mp4(): Promise<ArrayBuffer>`
- `m4a(): Promise<ArrayBuffer>`
- `m4p(): Promise<ArrayBuffer>`
- `webm(): Promise<ArrayBuffer>`
- `wav(): Promise<ArrayBuffer>`
- `ogg(): Promise<ArrayBuffer>`

Each method returns a Promise that resolves to the request payload as an ArrayBuffer with the appropriate content type validation.

#### Example

```typescript
// Get an image from the request
const image = await request.png();
// Process the image...

// Get audio from the request
const audio = await request.mp3();
// Process the audio...
```

## Logging

The Agentuity SDK provides logging functionality through the `context.logger` object.

### Logger Interface

The `Logger` interface defines the following methods:

```typescript
interface Logger {
  debug(message: string, ...args: unknown[]): void;
  info(message: string, ...args: unknown[]): void;
  warn(message: string, ...args: unknown[]): void;
  error(message: string, ...args: unknown[]): void;
  child(opts: Record<string, Json>): Logger;
}
```

### Logging Methods

#### `debug(message: string, ...args: unknown[]): void`

Logs a debug message.

##### Parameters

- `message`: The message to log
- `args`: Additional arguments to include in the log

##### Example

```typescript
context.logger.debug('Processing request', { requestId: '123' });
```

#### `info(message: string, ...args: unknown[]): void`

Logs an informational message.

##### Parameters

- `message`: The message to log
- `args`: Additional arguments to include in the log

##### Example

```typescript
context.logger.info('Request processed successfully', { requestId: '123' });
```

#### `warn(message: string, ...args: unknown[]): void`

Logs a warning message.

##### Parameters

- `message`: The message to log
- `args`: Additional arguments to include in the log

##### Example

```typescript
context.logger.warn('Resource not found', { resourceId: '456' });
```

#### `error(message: string, ...args: unknown[]): void`

Logs an error message.

##### Parameters

- `message`: The message to log
- `args`: Additional arguments to include in the log

##### Example

```typescript
context.logger.error('Failed to process request', error);
```

### Creating Child Loggers

#### `child(opts: Record<string, unknown>): Logger`

Creates a child logger with additional context.

##### Parameters

- `opts`: Additional context to include in all logs from the child logger

##### Return Value

Returns a new `Logger` instance with the additional context.

##### Example

```typescript
const requestLogger = context.logger.child({ requestId: '123', userId: '456' });
requestLogger.info('Processing request'); // Includes requestId and userId
```

## Welcome Function

The Agentuity SDK allows you to customize the initial appearance of DevMode when it starts interacting with your agents by exporting a `welcome()` function. This function returns an `AgentWelcomeResult` object that includes a welcome message and optional example prompts.

### AgentWelcomeResult Interface

```typescript
export interface AgentWelcomePrompt {
  /**
   * The data to display to the user
   */
  data: Buffer | Uint8Array | ArrayBuffer | string | Json | Blob | ReadableStream | Data;
  /**
   * The content type of the data
   */
  contentType: string;
}

export interface AgentWelcomeResult {
  /**
   * The welcome prompt to display to the user
   */
  welcome: string;
  /**
   * The example prompts to display to the user
   */
  prompts?: AgentWelcomePrompt[];
}
```

### welcome()

Defines a welcome message and optional example prompts for DevMode.

#### Return Value

Returns an `AgentWelcomeResult` object with a welcome message and optional prompts.

#### Example

```typescript
export const welcome = (): AgentWelcomeResult => {
  return {
    welcome: "Welcome to my Agent! How can I help you today?",
    prompts: [
      {
        data: "What can you do?",
        contentType: "text/plain",
      }
    ],
  };
};
```



## Session

The Agentuity SDK provides a `Session` interface that represents the current agent execution context.

```typescript
interface Session {
  request: AgentRequestType;
  context: AgentContext;
}
```

## Telemetry

The Agentuity SDK integrates with OpenTelemetry for tracing and metrics.

### Tracing

The SDK provides access to OpenTelemetry tracing through the `context.tracer` object.

#### Example

```typescript
// Create a span
context.tracer.startActiveSpan('process-data', async (span) => {
  try {
    // Add attributes to the span
    span.setAttribute('userId', '123');
    
    // Perform some work
    const result = await processData();
    
    // Add events to the span
    span.addEvent('data-processed', { itemCount: result.length });
    
    // End the span
    span.end();
    
    return result;
  } catch (error) {
    // Record the error
    span.recordException(error);
    span.setStatus({ code: SpanStatusCode.ERROR });
    throw error;
  }
});
```

## Breaking Changes

### Data API

In version X.X.X, the Data API was refactored to use async methods instead of static properties to better support streaming capabilities:

#### Before:
```typescript
// Accessing data properties directly
const jsonData = request.data.json;
const textData = request.data.text;
const base64Data = request.data.base64;
```

#### After:
```typescript
// Using async methods to access data
const jsonData = await request.data.json();
const textData = await request.data.text();
const base64Data = await request.data.base64();
```

This change affects all methods on the `Data` interface:
- `data.base64` → `data.base64()`
- `data.text` → `data.text()`
- `data.json` → `data.json()`
- `data.object<T>()` → `data.object<T>()`
- `data.binary` → `data.binary()`
- `data.buffer` → `data.buffer()`
- `data.stream` → `data.stream()`


## Deprecated Features

### `/run/:id` Route

The `/run/:id` route is now deprecated as it provides the same functionality as `/:id`. Applications should update their code to use the `/:id` route instead.



file: SDKs/javascript/core-concepts.mdx
meta: {
  "title": "Core Concepts",
  "description": "Learn about the fundamental concepts of the Agentuity JavaScript SDK"
}

The Agentuity JavaScript SDK is built around several key concepts that form the foundation of agent development. Understanding these concepts is essential for effectively using the SDK.

## Agent Architecture

Agents in the Agentuity SDK are modular components that can process requests and generate responses. Each agent:

- Has a unique identifier and name
- Can be triggered by various events (webhooks, cron jobs, manual invocation, etc.)
- Processes requests through a handler function
- Has access to a context object with various capabilities

The basic structure of an agent looks like this:

```typescript
import { AgentHandler } from '@agentuity/sdk';

// Agent handler function
const handler: AgentHandler = async (request, response, context) => {
  // Process the request
  const data = await request.data.json();
  
  // Use the context (logging, storage, etc.)
  context.logger.info('Processing request', data);
  
  // Return a response
  return response.json({ message: 'Hello from my agent!' });
};

export default handler;
```

<Callout type="warn" title="Configuration">
  Agent configuration (name, description, etc.) is managed by the Agentuity CLI and stored in the project configuration file.
  Use the `agentuity project` and `agentuity agent` commands to manage your configuration.
</Callout>


## Request and Response Handling

The Agentuity SDK provides a structured way to handle requests and generate responses:

### Requests

Requests contain information about the trigger event and payload data. The `AgentRequest` interface provides methods to access this data in various formats:

- `request.metadata` - Access metadata associated with the request
- `request.trigger` - Get the trigger type (webhook, manual,cron, etc.)
- `request.get(key, defval)` - Get a value from the request metadata
- `request.data` - Get a Data object from the request
- `request.data.contentType` - The content type (or mime type) of the request
- `request.data.json()` - Get the payload as a JSON object (async, requires await)
- `request.data.object<T>()` - Get the payload as a JSON object and parse it as a specific type (async, requires await)
- `request.data.text()` - Get the payload as a string (async, requires await)
- `request.data.binary()` - Get the payload as an ArrayBuffer (async, requires await)


### Responses

Responses are created using the `AgentResponse` interface, which provides methods for different response types:

- `response.json()` - Return a JSON response
- `response.text()` - Return a text response
- `response.binary()` - Return a binary response
- `response.html()` - Return an HTML response
- `response.empty()` - Return an empty response
- Various media-specific methods (pdf(), png(), jpeg(), etc.)
- `response.handoff()` - Redirect to another agent

## Agent Context

The context object provides access to various capabilities and services:

- `context.logger` - Logging functionality
- `context.kv` - Key-value storage
- `context.vector` - Vector storage
- `context.getAgent()` - Access to other agents both locally and remotely
- `context.tracer` - OpenTelemetry tracing
- `context.scope` - The scope of the agent invocation ('local' or 'remote')
- Metadata about the current execution (runId, projectId, etc.)

## Triggers and Event Types

Agents can be triggered by various event types:

- `webhook` - HTTP webhook calls
- `cron` - Scheduled cron jobs
- `manual` - Manual invocation
- `agent` - Calls from other agents
- `sms` - SMS messages
- `queue` - Queue processing
- `voice` - Voice calls
- `email` - Email messages

Each trigger type may provide different metadata and payload formats, which can be accessed through the request object.


file: SDKs/javascript/error-handling.mdx
meta: {
  "title": "Error Handling",
  "description": "Learn how to handle errors in the Agentuity JavaScript SDK"
}

This section covers error handling strategies and common error types in the Agentuity JavaScript SDK.

## Error Handling Patterns

### Try-Catch Pattern

The most common error handling pattern is to use try-catch blocks in your agent handlers:

```typescript
const handler: AgentHandler = async (request, response, context) => {
  try {
    // Process the request
    const data = request.data.json;
    
    // Perform operations that might fail
    const result = await processData(data);
    
    // Return successful response
    return response.json({ result });
  } catch (error) {
    // Log the error
    context.logger.error('Error processing request', error);
    
    // Return error response
    return response.json({ 
      error: 'Failed to process request',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};
```

### Error Classification

For more sophisticated error handling, you can classify errors and handle them differently:

```typescript
const handler: AgentHandler = async (request, response, context) => {
  try {
    // Process the request
    const data = request.data.json;
    
    // Perform operations that might fail
    const result = await processData(data);
    
    // Return successful response
    return response.json({ result });
  } catch (error) {
    // Log the error
    context.logger.error('Error processing request', error);
    
    // Classify and handle different error types
    if (error instanceof ValidationError) {
      return response.json({ 
        error: 'Validation error',
        message: error.message
      });
    }
    
    if (error instanceof ResourceNotFoundError) {
      return response.json({ 
        error: 'Resource not found',
        message: error.message
      });
    }
    
    // Handle unexpected errors
    return response.json({ 
      error: 'Internal server error',
      message: 'An unexpected error occurred'
    });
  }
};
```

### Custom Error Classes

You can define custom error classes to make error handling more structured:

```typescript
// Custom error classes
class ValidationError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'ValidationError';
  }
}

class ResourceNotFoundError extends Error {
  constructor(resourceId: string) {
    super(`Resource not found: ${resourceId}`);
    this.name = 'ResourceNotFoundError';
  }
}

class AuthorizationError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'AuthorizationError';
  }
}
```

### Error Handling with OpenTelemetry

You can use OpenTelemetry to record exceptions and set span status:

```typescript
const handler: AgentHandler = async (request, response, context) => {
  return context.tracer.startActiveSpan('process-request', async (span) => {
    try {
      // Process the request
      const data = request.data.json;
      
      // Perform operations that might fail
      const result = await processData(data);
      
      // Set span status to OK
      span.setStatus({ code: SpanStatusCode.OK });
      
      // Return successful response
      return response.json({ result });
    } catch (error) {
      // Record exception in the span
      span.recordException(error as Error);
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: (error as Error).message
      });
      
      // Log the error
      context.logger.error('Error processing request', error);
      
      // Return error response
      return response.json({ 
        error: 'Failed to process request',
        message: (error as Error).message
      });
    } finally {
      // End the span
      span.end();
    }
  });
};
```

## Error Handling for Storage APIs

### Key-Value Storage Errors

When working with the key-value storage API, handle potential errors:

```typescript
try {
  // Attempt to get a value
  const value = await context.kv.get('user-preferences', userId);
  
  // Process the value
  if (value) {
    const preferences = JSON.parse(new TextDecoder().decode(value));
    // Use preferences...
  }
} catch (error) {
  // Handle key-value storage errors
  context.logger.error('Error accessing key-value storage', error);
  // Implement fallback behavior or return error response
}
```

### Vector Storage Errors

When working with the vector storage API, handle potential errors:

```typescript
try {
  // Attempt to search for vectors
  const results = await context.vector.search('products', {
    query: 'ergonomic chair',
    limit: 5
  });
  
  // Process the results
  // ...
} catch (error) {
  // Handle vector storage errors
  context.logger.error('Error searching vector storage', error);
  // Implement fallback behavior or return error response
}
```

## Debugging Techniques

### Logging

Use the logger to help debug issues:

```typescript
// Set up detailed logging
context.logger.debug('Request received', { 
  trigger: request.trigger,
  payload: request.data.json
});

try {
  // Operation that might fail
  const result = await someOperation();
  context.logger.debug('Operation result', result);
} catch (error) {
  context.logger.error('Operation failed', { 
    error: error.message,
    stack: error.stack
  });
}
```

### Tracing

Use OpenTelemetry tracing to debug complex issues:

```typescript
context.tracer.startActiveSpan('operation-name', async (span) => {
  // Add attributes to help with debugging
  span.setAttribute('input.size', inputData.length);
  span.setAttribute('operation.type', 'processing');
  
  // Add events to mark important points
  span.addEvent('processing-started', { timestamp: Date.now() });
  
  try {
    // Operation that might fail
    const result = await someOperation();
    
    // Add event for successful completion
    span.addEvent('processing-completed', { 
      timestamp: Date.now(),
      resultSize: result.length
    });
    
    return result;
  } catch (error) {
    // Record the exception
    span.recordException(error);
    throw error;
  } finally {
    // Always end the span
    span.end();
  }
});
```


file: SDKs/javascript/examples/index.mdx
meta: {
  "title": "Examples",
  "description": "Practical examples of using the Agentuity JavaScript SDK"
}

This section provides practical examples of using the Agentuity JavaScript SDK for common use cases.

## Basic Agent Implementation

Here's a complete example of a basic agent that processes JSON requests and returns JSON responses:

```typescript
import { AgentHandler } from '@agentuity/sdk';

// Agent handler function
const handler: AgentHandler = async (request, response, context) => {
  try {
    // Get the request data
    const data = await request.data.json();
    const name = data.name || 'Guest';
    
    // Log the request
    context.logger.info(`Received greeting request for ${name}`);
    
    // Return a personalized greeting
    return response.json({
      message: `Hello, ${name}! Welcome to Agentuity.`,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    // Handle errors
    context.logger.error('Error processing request', error);
    return response.json({ 
      error: 'Failed to process request',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
};

export default handler;
```

## Key-Value Storage Usage

This example demonstrates how to use the key-value storage API to store and retrieve user preferences:

```typescript
import { AgentHandler } from '@agentuity/sdk';

const handler: AgentHandler = async (request, response, context) => {
  const { action, userId, preferences } = await request.data.json();
  
  switch (action) {
    case 'get': {
      // Retrieve user preferences
      const data = await context.kv.get('user-preferences', userId);
      
      if (!data) {
        return response.json({ message: 'No preferences found' });
      }
      
      // Convert ArrayBuffer to string and parse as JSON
      const prefsString = new TextDecoder().decode(data);
      const userPrefs = JSON.parse(prefsString);
      
      return response.json({ preferences: userPrefs });
    }
    
    case 'set': {
      // Store user preferences
      await context.kv.set(
        'user-preferences', 
        userId, 
        JSON.stringify(preferences),
        // Optional TTL (30 days in seconds)
        60 * 60 * 24 * 30
      );
      
      return response.json({ message: 'Preferences saved successfully' });
    }
    
    case 'delete': {
      // Delete user preferences
      await context.kv.delete('user-preferences', userId);
      return response.json({ message: 'Preferences deleted successfully' });
    }
    
    default:
      return response.json({ error: 'Invalid action' });
  }
};

export default handler;
```

## Vector Storage Usage

This example demonstrates how to use the vector storage API for semantic search:

```typescript
import { AgentHandler } from '@agentuity/sdk';

const handler: AgentHandler = async (request, response, context) => {
  const { action, query, products } = await request.data.json();
  
  switch (action) {
    case 'index': {
      // Index products in vector storage
      if (!Array.isArray(products) || products.length === 0) {
        return response.json({ error: 'No products to index' });
      }
      
      // Prepare documents for vector storage
      const documents = products.map(product => ({
        document: product.description,
        metadata: {
          id: product.id,
          name: product.name,
          price: product.price,
          category: product.category
        }
      }));
      
      // Store in vector database
      const ids = await context.vector.upsert('products', ...documents);
      
      return response.json({ 
        message: `Indexed ${ids.length} products successfully`,
        ids
      });
    }
    
    case 'search': {
      // Search for products
      if (!query) {
        return response.json({ error: 'Query is required' });
      }
      
      // Search vector storage
      const results = await context.vector.search('products', {
        query,
        limit: 5,
        similarity: 0.7
      });
      
      // Format results
      const formattedResults = results.map(result => ({
        ...result.metadata,
        similarity: 1 - result.distance // Convert distance to similarity score
      }));
      
      return response.json({ 
        results: formattedResults,
        count: formattedResults.length
      });
    }
    
    case 'delete': {
      // Delete products from vector storage
      if (!Array.isArray(products) || products.length === 0) {
        return response.json({ error: 'No product IDs to delete' });
      }
      
      const count = await context.vector.delete('products', ...products);
      
      return response.json({ 
        message: `Deleted ${count} products successfully` 
      });
    }
    
    default:
      return response.json({ error: 'Invalid action' });
  }
};

export default handler;
```

## Agent Communication Example

This example demonstrates how agents can communicate with each other:

```typescript
import { AgentHandler } from '@agentuity/sdk';

const handler: AgentHandler = async (request, response, context) => {
  const { task, data } = await request.data.json();
  
  // Log the incoming request
  context.logger.info(`Received task: ${task}`);
  
  switch (task) {
    case 'process-data': {
      // Get a reference to the data processing agent
      const processingAgent = await context.getAgent({ 
        name: 'data-processor'
      });
      
      // Invoke the data processing agent
      const processingResult = await processingAgent.run(
        { data },
        'application/json'
      );
      
      // Get a reference to the notification agent
      const notificationAgent = await context.getAgent({
        name: 'notification-sender'
      });
      
      // Invoke the notification agent with the processing result
      await notificationAgent.run(
        { 
          message: 'Data processing completed',
          result: processingResult
        },
        'application/json'
      );
      
      return response.json({ 
        message: 'Task orchestrated successfully',
        processingResult
      });
    }
    
    case 'handoff': {
      // Handoff to another agent
      return response.handoff(
        { name: 'data-processor' },
        { data },
        'application/json',
        { source: 'orchestrator' }
      );
    }
    
    default:
      return response.json({ error: 'Unknown task' });
  }
};

export default handler;
```

## Error Handling Example

This example demonstrates comprehensive error handling in an agent:

```typescript
import { AgentHandler } from '@agentuity/sdk';

// Custom error classes
class ValidationError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'ValidationError';
  }
}

class ResourceNotFoundError extends Error {
  constructor(resourceId: string) {
    super(`Resource not found: ${resourceId}`);
    this.name = 'ResourceNotFoundError';
  }
}

const handler: AgentHandler = async (request, response, context) => {
  try {
    // Get the request data
    const data = await request.data.json();
    
    // Validate the request
    if (!data.resourceId) {
      throw new ValidationError('resourceId is required');
    }
    
    // Log the request
    context.logger.info(`Processing resource: ${data.resourceId}`);
    
    // Simulate resource lookup
    const resource = await lookupResource(data.resourceId, context);
    
    // Process the resource
    const result = await processResource(resource, context);
    
    // Return the result
    return response.json({ 
      message: 'Resource processed successfully',
      result
    });
  } catch (error) {
    // Handle different types of errors
    if (error instanceof ValidationError) {
      context.logger.warn(`Validation error: ${error.message}`);
      return response.json({ 
        error: 'Validation error',
        message: error.message
      });
    }
    
    if (error instanceof ResourceNotFoundError) {
      context.logger.warn(`Resource not found: ${error.message}`);
      return response.json({ 
        error: 'Resource not found',
        message: error.message
      });
    }
    
    // Handle unexpected errors
    context.logger.error('Unexpected error', error);
    return response.json({ 
      error: 'Internal server error',
      message: 'An unexpected error occurred'
    });
  }
};

// Helper functions
async function lookupResource(resourceId: string, context: any) {
  // Simulate resource lookup
  const resource = await context.kv.get('resources', resourceId);
  
  if (!resource) {
    throw new ResourceNotFoundError(resourceId);
  }
  
  return JSON.parse(new TextDecoder().decode(resource));
}

async function processResource(resource: any, context: any) {
  // Simulate resource processing
  context.logger.debug('Processing resource', resource);
  
  // Add processing logic here
  
  return {
    id: resource.id,
    status: 'processed',
    timestamp: new Date().toISOString()
  };
}

export default handler;
```

## Telemetry Example

This example demonstrates how to use OpenTelemetry for tracing and metrics:

```typescript
import { AgentHandler } from '@agentuity/sdk';
import { SpanStatusCode } from '@opentelemetry/api';

const handler: AgentHandler = async (request, response, context) => {
  return context.tracer.startActiveSpan('process-request', async (span) => {
    try {
      // Add attributes to the span
      span.setAttribute('trigger', request.trigger());
      
      // Get the request data
      const data = await request.data.json();
      span.setAttribute('data.type', typeof data);
      
      // Create a child span for data processing
      return await context.tracer.startActiveSpan('process-data', async (childSpan) => {
        try {
          // Add event to the span
          childSpan.addEvent('processing-started', {
            timestamp: Date.now()
          });
          
          // Simulate data processing
          const result = await processData(data, context);
          
          // Add event to the span
          childSpan.addEvent('processing-completed', {
            timestamp: Date.now(),
            resultSize: JSON.stringify(result).length
          });
          
          // Set span status
          childSpan.setStatus({ code: SpanStatusCode.OK });
          
          return response.json(result);
        } catch (error) {
          // Record exception in the span
          childSpan.recordException(error as Error);
          childSpan.setStatus({
            code: SpanStatusCode.ERROR,
            message: (error as Error).message
          });
          
          throw error;
        } finally {
          // End the child span
          childSpan.end();
        }
      });
    } catch (error) {
      // Record exception in the parent span
      span.recordException(error as Error);
      span.setStatus({
        code: SpanStatusCode.ERROR,
        message: (error as Error).message
      });
      
      // Log the error
      context.logger.error('Error processing request', error);
      
      // Return error response
      return response.json({
        error: 'Failed to process request',
        message: (error as Error).message
      });
    } finally {
      // End the parent span
      span.end();
    }
  });
};

async function processData(data: any, context: any) {
  // Simulate data processing
  await new Promise(resolve => setTimeout(resolve, 100));
  
  return {
    processed: true,
    input: data,
    timestamp: new Date().toISOString()
  };
}

export default handler;
```

## Welcome Function Example

This example demonstrates how to customize the initial appearance of DevMode when it starts interacting with your agents:

```typescript
// agent.ts
import type { AgentHandler, AgentWelcomeResult } from '@agentuity/sdk';

export const welcome = (): AgentWelcomeResult => {
  return {
    welcome: "Welcome to my Agent! How can I help you today?",
    prompts: [
      {
        data: "What can you do?",
        contentType: "text/plain",
      },
      {
        data: "Tell me about yourself",
        contentType: "text/plain",
      }
    ],
  };
};

const handler: AgentHandler = async (request, response, context) => {
  // Agent logic
  return response.text('Hello, World!');
};

export default handler;
```

### Real-World Example

Here's a more comprehensive example from the React Miami 2025 Concierge template:

```typescript
// ConciergeHost/index.ts
import type { AgentWelcomeResult } from "@agentuity/sdk";

export const welcome = (): AgentWelcomeResult => {
  return {
    welcome: "Welcome to the React Miami 2025 Concierge! How can I help you today?",
    prompts: [
      {
        data: "Where should I go for dinner in Miami, tonight?",
        contentType: "text/plain",
      },
      {
        data: "What sessions about React hooks are happening today?",
        contentType: "text/plain",
      },
      {
        data: "Tell me more about [Speaker Name]'s background",
        contentType: "text/plain",
      },
      {
        data: "I'm hungry and looking for Cuban food near the conference",
        contentType: "text/plain",
      },
      {
        data: "What is Agentuity all about?",
        contentType: "text/plain",
      },
      {
        data: "What can I do?",
        contentType: "text/plain",
      },
    ],
  };
};
```

Note that in this example, some prompts use plain text directly while others use base64 encoding. Both approaches work, but using base64 encoding is recommended for consistency.

## OpenAI Streaming Example

This example demonstrates how to stream responses from OpenAI models in your Agentuity agent. Streaming allows for a more responsive user experience by displaying the AI's response as it's being generated, rather than waiting for the entire response to complete.

```javascript
import type { AgentRequest, AgentResponse, AgentContext } from "@agentuity/sdk";
import { streamText } from "ai";
import { openai } from "@ai-sdk/openai";

export default async function Agent(
  req: AgentRequest,
  resp: AgentResponse,
  ctx: AgentContext,
) {
  const { textStream } = streamText({
    model: openai("gpt-4o"),
    prompt: "Invent a new holiday and describe its traditions.",
  });

  return resp.stream(textStream);
}
```

### How It Works

1. We import the necessary types from `@agentuity/sdk` and utilities from the Vercel AI SDK (`ai` and `@ai-sdk/openai`).
2. The `streamText` function from the Vercel AI SDK creates a streaming text response from OpenAI.
3. We configure the stream with the `gpt-4o` model and a prompt.
4. The `textStream` object contains the streaming response from OpenAI.
5. We return the stream using `resp.stream()`, which handles the streaming response in the Agentuity platform.

### Dependencies

To use this example, you'll need to install the following dependencies:

```bash
npm install ai @ai-sdk/openai
```

## Agent-to-Agent Streaming Example

This example demonstrates how to call another agent and stream its response back to the client. This is useful for creating agent workflows where one agent processes a request and streams the response through another agent.

```typescript
import type { AgentRequest, AgentResponse, AgentContext } from "@agentuity/sdk";

export default async function Agent(
	req: AgentRequest,
	resp: AgentResponse,
	ctx: AgentContext,
) {
	// Setup to talk to another agent
	const agent = await ctx.getAgent({
		name: 'HistoryExpert',
	});

	// Invoke the agent
	const agentResponse = await agent.run({
		data: 'What engine did a P-51D Mustang use?',
	});

	// Get the stream from the agent
	const stream = await agentResponse.data.stream();

	// Return the stream to the client
	return resp.stream(stream);
}
```

### How It Works

1. We use `ctx.getAgent()` to get a reference to another agent named 'HistoryExpert'.
2. We invoke the agent with `agent.run()`, passing the data we want to process.
3. We retrieve the stream from the agent's response using `agentResponse.data.stream()`.
4. Finally, we return the stream to the client using `resp.stream()`, which passes the streaming response through our agent.

This pattern allows you to:
- Chain multiple agents together in a workflow
- Maintain a streaming experience end-to-end
- Process or transform streaming data between agents

### Learn More About Streaming

For more information about agent streaming, check out these resources:

- [Agents just want to have streams](https://agentuity.com/blog/agent-streaming) - Blog post explaining the importance and implementation of streaming in agents
- [Streams for agents!](https://youtu.be/HN_ElBfsWtE) - YouTube video demonstration of agent streaming capabilities


file: SDKs/javascript/examples/langchain.mdx
meta: {
  "title": "Langchain/LangGraph",
  "description": "Examples of using the Agentuity JavaScript SDK with Langchain (LangGraph)"
}

## Simple LangGraph Agent with structured output

Below is an example of how you can take a LangGraph example, empower it with Agentuity's SDK, 
and deploy it to Agentuity, all in one go.

<div className="my-6 aspect-w-16 aspect-h-9">
  <iframe
    width="100%"
    height="400"
    src="https://www.youtube.com/embed/lxoeD9VJJjs"
    title="LangGraph Agent with structured output"
    frameBorder="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowFullScreen
  ></iframe>
</div>

```typescript
// Example borrowed from https://langchain-ai.github.io/langgraphjs/how-tos/react-return-structured-output/

import type { AgentRequest, AgentResponse, AgentContext } from "@agentuity/sdk";
import { ChatOpenAI } from "@langchain/openai";
import { createReactAgent } from "@langchain/langgraph/prebuilt";
import { tool } from "@langchain/core/tools";
import { z } from "zod";

// Tools for the agent
const weatherTool = tool(
	async (input): Promise<string> => {
		if (input.city === "nyc") {
			return "It might be cloudy in nyc";
		} else if (input.city === "sf") {
			return "It's always sunny in sf";
		} else {
			throw new Error("Unknown city");
		}
	},
	{
		name: "get_weather",
		description: "Use this to get weather information.",
		schema: z.object({
			city: z.enum(["nyc", "sf"]).describe("The city to get weather for"),
		}),
	}
);

const langGraphAgent = createReactAgent({
	llm: new ChatOpenAI({ model: "gpt-4o", temperature: 0 }),
	tools: [weatherTool],
	responseFormat: z.object({
		conditions: z.string().describe("Weather conditions"),
	}),
});

export default async function AgentHandler(
	req: AgentRequest,
	resp: AgentResponse,
	ctx: AgentContext,
) {
	const response = await langGraphAgent.invoke({
		messages: [
			{
				role: "user",
				content: (await req.data.text()) ?? "What's the weather in NYC?",
			},
		],
	})

	return resp.json(response.structuredResponse);
}	
```


file: SDKs/javascript/frameworks.mdx
meta: {
  "title": "Frameworks",
  "description": "Framework integration for the Agentuity JavaScript SDK"
}

The Agentuity JavaScript SDK provides a flexible and powerful way to integrate other frameworks with your Agent.

The following frameworks are currently supported:

- [Vercel AI SDK](https://www.vercel.com/ai)

## Using Frameworks with Agentuity

The use a framework with Agentuity, choose the framework template when creating a new project.

```bash
agentuity new
```

When you select one of the framework templates, the Agentuity CLI will install the necessary dependencies and create a new project with the framework already configured.

## Vercel AI SDK

Example Agent using Vercel AI SDK:

```typescript
import type { AgentRequest, AgentResponse, AgentContext } from "@agentuity/sdk";
import { generateText } from "ai";
import { openai } from "@ai-sdk/openai";

export default async function Agent(
	req: AgentRequest,
	resp: AgentResponse,
	ctx: AgentContext,
) {
	const res = await generateText({
		model: openai("gpt-4o"),
		system: "You are a friendly assistant!",
		prompt: req.text() ?? "Why is the sky blue?",
	});
	return resp.text(res.text);
}
```


file: SDKs/javascript/index.mdx
meta: {
  "title": "JavaScript SDK",
  "description": "Documentation for the Agentuity JavaScript SDK"
}

The [Agentuity JavaScript SDK](https://github.com/agentuity/sdk-js) provides a powerful framework for building AI agents in JavaScript and TypeScript. It offers a comprehensive set of tools for creating, deploying, and managing agents with features like key-value storage, vector storage, and OpenTelemetry integration.

## Installation

When you create a project with Agentuity, you will automatically have access to the Agentuity JavaScript SDK.

```bash
agentuity new
```

The SDK currently works with Bun and Node.js and the project will automatically install the correct dependencies.

## Prerequisites

Before using the Agentuity JavaScript SDK, ensure you have the following prerequisites installed:

- **Node.js**: Version 22 or higher is required
- **Bun** (optional): Version 1.2.4 or higher is required

### Installing Node.js

You can download and install Node.js from the [official website](https://nodejs.org/). Make sure to install version 22 or higher.

### Installing Bun

Bun is an optional but recommended runtime for the Agentuity SDK. You can install it using the following command:

```bash
curl -fsSL https://bun.sh/install | bash
```

For more information, visit the [Bun installation documentation](https://bun.sh/docs/installation).

## Development

You can start your project by running the following command:

```bash
agentuity dev
```

This will start your project in development mode and open a new browser window connecting your Agent to the Agentuity Console in Live Mode.

You can also start your project in development mode without connecting to the Agentuity Console by running the following command:

```bash
npm start
```

Or for Bun:

```bash
bun start
```

If you would like to manually test your Agents locally, you can do so by running the following command:

```bash
curl -v http://localhost:3500/run/agent_ID --json '{"input": "Hello, world!"}'
```

Make sure you replace `agent_ID` with the ID of your Agent.


## Next Steps

- [Core Concepts](/SDKs/javascript/core-concepts) - Learn about the fundamental concepts of the Agentuity JavaScript SDK
- [LLM](/SDKs/javascript/llm) - Learn about the LLM integrations available in the Agentuity JavaScript SDK
- [Frameworks](/SDKs/javascript/frameworks) - Learn about using frameworks with the Agentuity JavaScript SDK
- [API Reference](/SDKs/javascript/api-reference) - Explore the detailed API documentation
- [Error Handling](/SDKs/javascript/error-handling) - Learn about the error handling in the Agentuity JavaScript SDK
- [Examples](/SDKs/javascript/examples) - See practical examples of using the SDK


file: SDKs/javascript/llm.mdx
meta: {
  "title": "LLM",
  "description": "LLM integration for the Agentuity JavaScript SDK"
}

The Agentuity JavaScript SDK provides a flexible and powerful way to integrate with LLMs.

## AI Gateway

The Agentuity Cloud includes an AI Gateway to make it easy to integrate LLMs with your Agent with zero configuration. The following LLM integrations are supported:

- [OpenAI](https://openai.com/)
- [Anthropic](https://www.anthropic.com/)
- [Cohere](https://cohere.com/)
- [DeepSeek](https://www.deepseek.com/)
- [Google AI Studio](https://ai.google.dev/)
- [Grok](https://grok.x.ai/)
- [Groq](https://groq.com/)
- [Mistral](https://mistral.ai/)
- [Perplexity AI](https://www.perplexity.ai/)

## SDK Integrations

To use the zero config LLM integrations, you can use the following SDK integrations:

- [OpenAI JavaScript SDK](https://github.com/openai/openai-node)
- [Anthropic JavaScript SDK](https://github.com/anthropics/anthropic-sdk-node)
- [Vercel AI SDK](https://github.com/vercel/ai)

When any of the above SDKs are installed, the Agentuity Project will automatically detect it and route your requests to the AI Gateway.  However, we will only route requests if you do not provide your own LLM API Key.  By providing your own LLM API Key, the AI Gateway detection will be disabled and you will need to manually configure the LLM integration in the Agentuity Console.



file: SDKs/javascript/troubleshooting.mdx
meta: {
  "title": "Troubleshooting",
  "description": "Common issues and solutions when working with the Agentuity JavaScript SDK"
}

This section covers common issues you might encounter when working with the Agentuity JavaScript SDK and provides solutions to help you resolve them.

### Node.js Version Issues

**Issue**: Errors related to unsupported JavaScript features or syntax.

**Solution**:
1. Verify your Node.js version meets the minimum requirement (v22+):
   ```bash
   node --version
   ```
2. If you're using an older version, upgrade Node.js:
   ```bash
   # Using nvm (recommended)
   nvm install 22
   nvm use 22
   
   # Or download from nodejs.org
   ```
3. If you can't upgrade Node.js, consider using a transpiler like Babel to support newer syntax in older environments.


## Getting Additional Help

If you're still experiencing issues after trying the troubleshooting steps above:

1. Check the [Agentuity documentation](https://agentuity.dev) for updates and additional information.
2. Join the [Agentuity Discord](https://discord.com/invite/vtn3hgUfuc) to ask questions and get help from other developers.
4. File an issue on the [GitHub repository](https://github.com/agentuity/sdk-js/issues) if you believe you've found a bug.


file: SDKs/python/api-reference.mdx
meta: {
  "title": "API Reference",
  "description": "Complete reference documentation for the Agentuity Python SDK, including request handling, response types, data storage, and agent communication."
}

This section provides detailed documentation for the Agentuity Python SDK API, including method signatures, parameters, return values, and example usage.

## Table of Contents

- [Agent Lifecycle](#agent-lifecycle)
- [Storage APIs](#storage-apis)
  - [Key-Value Storage](#key-value-storage)
  - [Vector Storage](#vector-storage)
- [Agent Communication](#agent-communication)
- [Response Types](#response-types)
  - [JSON Responses](#json-responses)
  - [Text Responses](#text-responses)
  - [Binary Responses](#binary-responses)
  - [Media Type Responses](#media-type-responses)
  - [HTML Responses](#html-responses)
  - [Empty Responses](#empty-responses)
- [Request Handling](#request-handling)
- [Logging](#logging)
- [Telemetry](#telemetry)

> **Note:** This documentation applies to Agentuity Python SDK version 1.0 and above.

## Welcome Function

The Agentuity SDK allows you to customize the initial appearance of DevMode when it starts interacting with your agents by defining a `welcome()` function in your agent module. This function should return a dictionary containing a welcome message and optional example prompts.

### welcome()

Defines a welcome message and optional example prompts for DevMode.

#### Return Value

Returns a dictionary with a welcome message and optional prompts.

```python
def welcome():
    return {
        "welcome": "Welcome message to display",
        "prompts": [
            {
                "data": "Example prompt text",
                "contentType": "text/plain"
            }
        ]
    }
```

#### Example

```python
def welcome():
    return {
        "welcome": "Welcome to my Python Agent! How can I help you today?",
        "prompts": [
            {
                "data": "What can you do?",
                "contentType": "text/plain"
            }
        ]
    }
```

## Agent Lifecycle

The Agentuity SDK provides a structured way to define and handle agents. An agent consists of a handler function, with its configuration managed by the Agentuity CLI.


### Agent Handler

The agent handler is a function that processes requests and returns responses:

```python
from agentuity import AgentRequest, AgentResponse, AgentContext

async def agent_handler(
    request: AgentRequest,
    response: AgentResponse,
    context: AgentContext
) -> AgentResponseType:
    """
    Handler function for an agent.
    
    Args:
        request: An AgentRequest object containing the request data
        response: An AgentResponse object for creating responses
        context: An AgentContext object providing access to various capabilities
        
    Returns:
        An AgentResponseType object representing the response
    """
    return response.json({"message": "Hello, world!"})
```

#### Parameters

- `request`: An `AgentRequest` object containing the request data
- `response`: An `AgentResponse` object for creating responses
- `context`: An `AgentContext` object providing access to various capabilities

#### Return Value

The handler function should return an `AgentResponseType` object.

#### Example

```python
from agentuity import AgentRequest, AgentResponse, AgentContext

# Agent handler function
async def handler(request: AgentRequest, response: AgentResponse, context: AgentContext):
    try:
        # Get the request data
        data = request.data.json
        name = data.get("name")
        
        # Log the request
        context.logger.info(f"Received greeting request for {name}")
        
        # Return a personalized greeting
        return response.json({
            "message": f"Hello, {name}! Welcome to Agentuity."
        })
    except Exception as error:
        # Handle errors
        context.logger.error("Error processing request", error)
        return response.json({"error": "Failed to process request"})
```

## Storage APIs

The Agentuity SDK provides two storage APIs: Key-Value Storage and Vector Storage.


### Key-Value Storage

The Key-Value Storage API provides a simple way to store and retrieve data. It is accessed through the `context.kv` object.

#### `async get(name: str, key: str) -> "DataResult"`

Retrieves a value from the key-value storage.

##### Parameters

- `name`: The name of the key-value storage
- `key`: The key to retrieve the value for

##### Return Value

Returns a DataResult object that has an `exists` property to check if the value exists and a `data` property with accessors like `data.json` and `data.text`.

##### Example

```python
from agentuity.sdk import AgentContext

# Retrieve a value from key-value storage with error handling
try:
    value = await context.kv.get("user-preferences", "user-123")
    if value.exists:
        # Access data using the appropriate accessor
        user_prefs = value.data.json
        context.logger.info(f"User preferences: {user_prefs}")
        
        # Or access as text if needed
        # text_data = value.data.text
        # context.logger.info(f"User preferences (text): {text_data}")
    else:
        context.logger.info("User preferences not found, using defaults")
        user_prefs = {"theme": "light"}
except Exception as e:
    context.logger.error(f"Failed to retrieve user preferences: {str(e)}")
    # Use default value or re-raise exception
    user_prefs = {"theme": "light"}
```

#### `async set(name: str, key: str, value: Union[str, int, float, bool, list, dict, bytes, "Data"], params: Optional[dict] = None) -> None`

Stores a value in the key-value storage.

##### Parameters

- `name`: The name of the key-value storage
- `key`: The key to store the value under
- `value`: The value to store (Union[str, int, float, bool, list, dict, bytes, "Data"])
- `params` (optional): Can have `ttl` (time-to-live in seconds)

##### Return Value

None

##### Example

```python
import json

# Store a string value
await context.kv.set("user-preferences", "user-123", json.dumps({"theme": "dark"}))

# Store a dictionary value (automatically serialized to JSON)
await context.kv.set("user-preferences", "user-123", {"theme": "dark"})

# Store binary data
binary_data = bytes([1, 2, 3, 4])
await context.kv.set("user-data", "user-123", binary_data)

# Store a value with TTL (expires after 1 hour)
await context.kv.set("session", "user-123", "active", {"ttl":3600})
```

#### `async delete(name: str, key: str) -> None`

Deletes a value from the key-value storage.

##### Parameters

- `name`: The name of the key-value storage
- `key`: The key to delete

##### Return Value

None

##### Example

```python
# Delete a value
await context.kv.delete("user-preferences", "user-123")
```

### Vector Storage

The Vector Storage API provides a way to store and search for data using vector embeddings. It is accessed through the `context.vector` object.

#### `async upsert(name: str, *documents: VectorUpsertParams) -> list[str]`

Inserts or updates vectors in the vector storage.

##### Parameters

- `name`: The name of the vector storage
- `documents`: One or more documents to upsert, each with either embeddings or text

##### Return Value

Returns a list of string IDs for the upserted vectors.

##### Example

```python
from agentuity.sdk import AgentContext
from typing import List, Dict, Any

async def index_products(context: AgentContext, products: List[Dict[str, Any]]) -> List[str]:
    """
    Index product descriptions in vector storage for semantic search.
    
    Args:
        context: The agent context
        products: List of product dictionaries with name, description, and category
        
    Returns:
        List of vector IDs for the indexed products
    """
    # Prepare documents for vector storage
    documents = []
    for product in products:
        documents.append({
            "document": product["description"],
            "metadata": {
                "product_id": product["id"],
                "name": product["name"],
                "category": product["category"],
                "price": product["price"]
            }
        })
    
    # Upsert documents to vector storage
    try:
        ids = await context.vector.upsert("product-descriptions", *documents)
        context.logger.info(f"Indexed {len(ids)} products in vector storage")
        return ids
    except Exception as e:
        context.logger.error(f"Failed to index products: {str(e)}")
        raise

# Simple example
# Upsert documents with text
ids = await context.vector.upsert(
    "product-descriptions",
    {"document": "Ergonomic office chair with lumbar support", "metadata": {"category": "furniture"}},
    {"document": "Wireless noise-cancelling headphones", "metadata": {"category": "electronics"}}
)

# Upsert documents with embeddings
ids2 = await context.vector.upsert(
    "product-embeddings",
    {"embeddings": [0.1, 0.2, 0.3, 0.4], "metadata": {"productId": "123"}},
    {"embeddings": [0.5, 0.6, 0.7, 0.8], "metadata": {"productId": "456"}}
)
```

#### `async search(name: str, params: VectorSearchParams) -> list[VectorSearchResult]`

Searches for vectors in the vector storage.

##### Parameters

- `name`: The name of the vector storage
- `params`: Search parameters including query, limit, similarity threshold, and metadata filters

##### Return Value

Returns a list of search results, each containing an ID, metadata, and distance score.

##### Example

```python
from agentuity.sdk import AgentContext
from typing import List, Dict, Any

# Search for similar products with error handling
try:
    results = await context.vector.search("product-descriptions", {
        "query": "comfortable office chair",
        "limit": 5,
        "similarity": 0.7,
        "metadata": {"category": "furniture"}
    })
    
    # Process search results
    if results:
        context.logger.info(f"Found {len(results)} matching products")
        for result in results:
            print(f"Product ID: {result.id}, Similarity: {result.distance}")
            print(f"Metadata: {result.metadata}")
    else:
        context.logger.info("No matching products found")
except Exception as e:
    context.logger.error(f"Vector search failed: {str(e)}")
    # Handle the error appropriately
```

#### `async delete(name: str, *ids: str) -> int`

Deletes vectors from the vector storage.

##### Parameters

- `name`: The name of the vector storage
- `ids`: One or more IDs of vectors to delete

##### Return Value

Returns the number of vectors that were deleted.

##### Example

```python
from agentuity.sdk import AgentContext

# Delete vectors with error handling
try:
    deleted_count = await context.vector.delete("product-descriptions", "id1", "id2", "id3")
    context.logger.info(f"Deleted {deleted_count} vectors")
except Exception as e:
    context.logger.error(f"Failed to delete vectors: {str(e)}")
    # Handle the error appropriately
```

## Agent Communication

The Agentuity SDK allows agents to communicate with each other through the `context.get_agent()` method and agent redirection.

### `async get_agent(params: GetAgentRequestParams) -> RemoteAgent`

Retrieves a handle to a remote agent that can be invoked.

#### Parameters

- `params`: Parameters to identify the agent, either by ID or by name and project ID

#### Return Value

Returns a `RemoteAgent` object that can be used to invoke the agent.

#### Example

```python
from agentuity.sdk import AgentContext, RemoteAgent

# Get an agent by ID
agent = await context.get_agent({"id": "agent-123"})

# Get an agent by name
agent2 = await context.get_agent({
    "name": "data-processing-agent",
    "project_id": "project-456"
})

# Invoke the agent with error handling
try:
    result = await agent.run({"data": "process this"}, "application/json")
    # Process the result
    print(f"Agent response: {result}")
except Exception as e:
    context.logger.error(f"Failed to invoke agent: {str(e)}")
    # Handle the error appropriately
```

### Agent Handoff

The `response.handoff()` method allows an agent to handoff the request to another agent.

#### `handoff(agent: GetAgentRequestParams, payload: dict | bytes | str = None, content_type: str = None, metadata: dict = None) -> AgentRedirectResponse`

Redirects the current request to another agent.

<Callout type="warn" title="Handoff">
  Handoff is currently only supported for handoff to other agents in the same project. However, we are working on remote agent handoff and should have that working soon.
</Callout>

##### Parameters

- `agent`: Parameters to identify the target agent
- `payload` (optional): The payload to send to the target agent
- `content_type` (optional): The content type of the payload
- `metadata` (optional): Additional metadata to include with the request

##### Return Value

Returns an `AgentRedirectResponse` object.

##### Example

```python
# Handoff to another agent
return response.handoff(
    {"name": "data-processing-agent"},
    {"data": "process this"},
    "application/json",
    {"source": "web-agent"}
)
```

## Response Types

The Agentuity SDK provides various methods for creating different types of responses through the `response` object.

### JSON Responses

#### `json(data: dict, metadata: dict = None) -> AgentResponseType`

Creates a JSON response.

##### Parameters

- `data`: The JSON data to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the JSON data.

##### Example

```python
return response.json({
    "message": "Success",
    "data": {"id": 123, "name": "Example"}
})
```

### Text Responses

#### `text(data: str, metadata: dict = None) -> AgentResponseType`

Creates a text response.

##### Parameters

- `data`: The text to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the text data.

##### Example

```python
return response.text("Hello, world!")
```

### Binary Responses

#### `binary(data: bytes, metadata: dict = None) -> AgentResponseType`

Creates a binary response.

##### Parameters

- `data`: The binary data to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the binary data.

##### Example

```python
binary_data = bytes([1, 2, 3, 4])
return response.binary(binary_data, {"filename": "data.bin"})
```

### Media Type Responses

The SDK provides specialized methods for various media types:

- `pdf(data: bytes, metadata: dict = None) -> AgentResponseType`
- `png(data: bytes, metadata: dict = None) -> AgentResponseType`
- `jpeg(data: bytes, metadata: dict = None) -> AgentResponseType`
- `gif(data: bytes, metadata: dict = None) -> AgentResponseType`
- `webp(data: bytes, metadata: dict = None) -> AgentResponseType`
- `mp3(data: bytes, metadata: dict = None) -> AgentResponseType`
- `mp4(data: bytes, metadata: dict = None) -> AgentResponseType`
- `wav(data: bytes, metadata: dict = None) -> AgentResponseType`
- `ogg(data: bytes, metadata: dict = None) -> AgentResponseType`
- `data(data: Any, content_type: str, metadata: dict = None) -> AgentResponseType`
- `markdown(content: str, metadata: dict = None) -> AgentResponseType`

Each method works similarly to the `binary()` method but sets the appropriate content type. The `data` method allows setting specific data with an exact content type, while the `markdown` method provides a convenient way to return markdown content.

#### Example

```python
# Return a PNG image
return response.png(image_data, {"filename": "chart.png"})

# Return an MP3 audio file
return response.mp3(audio_data, {"duration": 120})
```

### HTML Responses

#### `html(data: str, metadata: dict = None) -> AgentResponseType`

Creates an HTML response.

##### Parameters

- `data`: The HTML content to include in the response
- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with the HTML content.

##### Example

```python
return response.html("<h1>Hello, world!</h1><p>This is an HTML response.</p>")
```

### Empty Responses

#### `empty(metadata: dict = None) -> AgentResponseType`

Creates an empty response.

##### Parameters

- `metadata` (optional): Additional metadata to include with the response

##### Return Value

Returns an `AgentResponseType` object with no payload.

##### Example

```python
return response.empty({"status": 204})
```

## Request Handling

The Agentuity SDK provides various methods for accessing request data through the `request` object.

### Accessing Request Data

#### `trigger() -> str`

Gets the trigger type of the request.

##### Return Value

Returns a string representing the trigger type (webhook, cron, manual, agent, etc.).

##### Example

```python
trigger_type = request.trigger()
print(f"Request triggered by: {trigger_type}")
```

#### `metadata(key: str, default_value = None) -> Any`

Gets metadata associated with the request.

##### Parameters

- `key`: The metadata key to retrieve
- `default_value` (optional): A default value to return if the key does not exist

##### Return Value

Returns the metadata value for the specified key, or the default value if the key does not exist.

##### Example

```python
user_id = request.metadata("userId", "anonymous")
print(f"User ID: {user_id}")
```

#### `json() -> dict`

Gets the payload of the request as a JSON object.

##### Return Value

Returns the request payload as a dictionary.

##### Example

```python
data = request.data.json
print(f"Request data: {data}")
```

#### `text() -> str`

Gets the payload of the request as a string.

##### Return Value

Returns the request payload as a string.

##### Example

```python
text = request.data.text
print(f"Request text: {text}")
```

#### `binary() -> bytes`

Gets the payload of the request as bytes.

##### Return Value

Returns the request payload as bytes.

##### Example

```python
binary_data = request.binary()
print(f"Binary data size: {len(binary_data)} bytes")
```

### Media-Specific Methods

The SDK provides specialized methods for various media types:

- `pdf() -> bytes`
- `png() -> bytes`
- `jpeg() -> bytes`
- `gif() -> bytes`
- `webp() -> bytes`
- `mp3() -> bytes`
- `wav() -> bytes`
- `ogg() -> bytes`

Each method returns the request payload as bytes with the appropriate content type validation.

#### Example

```python
# Get an image from the request
image = request.png()
# Process the image...

# Get audio from the request
audio = request.mp3()
# Process the audio...
```

## Logging

The Agentuity SDK provides logging functionality through the `context.logger` object.

### Logger Interface

The `Logger` class defines the following methods:

```python
class Logger:
    """
    Logger for agent execution.
    """
    def debug(self, message: str, *args, **kwargs) -> None:
        """Log a debug message."""
        pass
        
    def info(self, message: str, *args, **kwargs) -> None:
        """Log an informational message."""
        pass
        
    def warn(self, message: str, *args, **kwargs) -> None:
        """Log a warning message."""
        pass
        
    def error(self, message: str, *args, **kwargs) -> None:
        """Log an error message."""
        pass
        
    def child(self, **kwargs) -> 'Logger':
        """Create a child logger with additional context."""
        pass
```

### Logging Methods

#### `debug(message: str, *args, **kwargs) -> None`

Logs a debug message.

##### Parameters

- `message`: The message to log
- `args`, `kwargs`: Additional arguments to include in the log

##### Example

```python
context.logger.debug("Processing request", request_id="123")
```

#### `info(message: str, *args, **kwargs) -> None`

Logs an informational message.

##### Parameters

- `message`: The message to log
- `args`, `kwargs`: Additional arguments to include in the log

##### Example

```python
context.logger.info("Request processed successfully", request_id="123")
```

#### `warn(message: str, *args, **kwargs) -> None`

Logs a warning message.

##### Parameters

- `message`: The message to log
- `args`, `kwargs`: Additional arguments to include in the log

##### Example

```python
context.logger.warn("Resource not found", resource_id="456")
```

#### `error(message: str, *args, **kwargs) -> None`

Logs an error message.

##### Parameters

- `message`: The message to log
- `args`, `kwargs`: Additional arguments to include in the log

##### Example

```python
try:
    # Some code that might raise an exception
    result = process_data()
except Exception as e:
    context.logger.error("Failed to process request", error=str(e))
```

### Creating Child Loggers

#### `child(**kwargs) -> Logger`

Creates a child logger with additional context.

##### Parameters

- `kwargs`: Additional context to include in all logs from the child logger

##### Return Value

Returns a new `Logger` instance with the additional context.

##### Example

```python
request_logger = context.logger.child(request_id="123", user_id="456")
request_logger.info("Processing request")  # Includes request_id and user_id
```

## Telemetry

The Agentuity SDK integrates with OpenTelemetry for tracing and metrics.

### Tracing

The SDK provides access to OpenTelemetry tracing through the `context.tracer` object.

#### Example

```python
from agentuity.sdk import AgentContext
from opentelemetry.trace.status import Status, StatusCode

# Create a span
async with context.tracer.start_as_current_span("process-data") as span:
    try:
        # Add attributes to the span
        span.set_attribute("userId", "123")
        
        # Perform some work
        result = await process_data()
        
        # Add events to the span
        span.add_event("data-processed", {"itemCount": len(result)})
        
        return result
    except Exception as error:
        # Record the error
        span.record_exception(error)
        span.set_status(Status(StatusCode.ERROR))
        context.logger.error(f"Error processing data: {str(error)}")
        raise error
```


file: SDKs/python/core-concepts.mdx
meta: {
  "title": "Core Concepts",
  "description": "Learn about the fundamental concepts of the Agentuity Python SDK"
}

The Agentuity Python SDK is built around several key concepts that form the foundation of agent development. Understanding these concepts is essential for effectively using the SDK.

## Agent Architecture

Agents in the Agentuity SDK are modular components that can process requests and generate responses. Each agent:

- Has a unique identifier and name
- Can be triggered by various events (webhooks, cron jobs, manual invocation, etc.)
- Processes requests through a handler function
- Has access to a context object with various capabilities

The basic structure of an agent looks like this:

```python
from agentuity import AgentRequest, AgentResponse, AgentContext

# Agent handler function
async def handler(request: AgentRequest, response: AgentResponse, context: AgentContext):
  # Process the request
  data = request.data.json
  
  # Use the context (logging, storage, etc.)
  context.logger.info('Processing request', data)
  
  # Return a response
  return response.json({ message: 'Hello from my agent!' })
```

<Callout type="warn" title="Configuration">
  Agent configuration (name, description, etc.) is managed by the Agentuity CLI and stored in the project configuration file.
  Use the `agentuity project` and `agentuity agent` commands to manage your configuration.
</Callout>

## Request and Response Handling

The Agentuity SDK provides a structured way to handle requests and generate responses:

### Requests

Requests contain information about the trigger event and payload data. The `AgentRequest` interface provides methods to access this data in various formats:

- `request.trigger` - Get the trigger type (webhook, manual,cron, etc.)
- `request.metadata` - Access metadata associated with the request
- `request.get(key, defval)` - Get a value from the request metadata
- `request.data` - Get a Data object from the request
- `request.data.contentType` - The content type (or mime type) of the request
- `request.data.text` - Get the payload as a string
- `request.data.json` - Get the payload as a JSON object
- `request.data.binary` - Get the payload as a binary object
- `request.data.base64` - Get the payload as a base64 encoded string

### Responses

Responses are created using the `AgentResponse` interface, which provides methods for different response types:

- `response.json()` - Return a JSON response
- `response.text()` - Return a text response
- `response.binary()` - Return a binary response
- `response.html()` - Return an HTML response
- `response.empty()` - Return an empty response
- Various media-specific methods (pdf(), png(), jpeg(), etc.)
- `response.handoff()` - Redirect to another agent

## Agent Context

The context object provides access to various capabilities and services:

- `context.logger` - Logging functionality
- `context.kv` - Key-value storage
- `context.vector` - Vector storage
- `context.get_agent()` - Access to other agents both locally and remotely
- `context.tracer` - OpenTelemetry tracing
- Metadata about the current execution (runId, projectId, etc.)

## Triggers and Event Types

Agents can be triggered by various event types:

- `webhook` - HTTP webhook calls
- `cron` - Scheduled cron jobs
- `manual` - Manual invocation
- `agent` - Calls from other agents
- `sms` - SMS messages
- `queue` - Queue processing
- `voice` - Voice calls
- `email` - Email messages

Each trigger type may provide different metadata and payload formats, which can be accessed through the request object.


file: SDKs/python/examples/index.mdx
meta: {
  "title": "Examples",
  "description": "Examples of using the Agentuity Python SDK"
}

## Basic Agent

A simple agent that returns a greeting.

```python
from agentuity import AgentRequest, AgentResponse, AgentContext
from datetime import datetime

async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    # Get the request data
    data = request.data.json
    name = data.get("name", "Guest")
    
    # Log the request
    context.logger.info(f"Received greeting request for {name}")
    
    # Return a personalized greeting
    return response.json({
        "message": f"Hello, {name}! Welcome to Agentuity.",
        "timestamp": datetime.now().isoformat()
    })
```

## Key-Value Storage

An agent that uses key-value storage to store and retrieve user preferences.

```python
from agentuity import AgentRequest, AgentResponse, AgentContext
import json

async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    data = request.data.json
    action = data.get("action")
    user_id = data.get("userId")
    preferences = data.get("preferences")

    if action == "get":
        # Retrieve user preferences
        result = await context.kv.get("user-preferences", user_id)

        if not result.exists:
            return response.json({"message": "No preferences found"})

        # Access the data
        user_prefs = result.data.json

        return response.json({"preferences": user_prefs})
    
    elif action == "set":
        # Store user preferences
        await context.kv.set(
            "user-preferences",
            user_id,
            preferences,
            {"ttl": 60 * 60 * 24 * 30}  # 30 days in seconds
        )

        return response.json({"message": "Preferences saved successfully!"})
    
    elif action == "delete":
        # Delete user preferences
        await context.kv.delete("user-preferences", user_id)
        
        return response.json({"message": "Preferences deleted successfully!"})
    
    else:
        return response.json({"error": 'Invalid action. Use "get", "set", or "delete".'})
```

## Welcome Function Example

This example demonstrates how to customize the initial appearance of DevMode when it starts interacting with your agents:

```python
# agent.py

def welcome():
    return {
        "welcome": "Welcome to my Python Agent! How can I help you today?",
        "prompts": [
            {
                "data": "What can you do?",
                "contentType": "text/plain"
            },
            {
                "data": "Tell me about yourself",
                "contentType": "text/plain"
            }
        ]
    }

def run(request, response, context):
    # Agent logic
    return response.text("Hello, World!")
```

### Real-World Example

Here's a more comprehensive example inspired by the React Miami 2025 Concierge template:

```python
# concierge_agent.py

def welcome():
    return {
        "welcome": "Welcome to the Python Concierge! How can I help you today?",
        "prompts": [
            {
                "data": "Where should I go for dinner in Miami, tonight?",
                "contentType": "text/plain"
            },
            {
                "data": "What sessions about Python are happening today?",
                "contentType": "text/plain"
            },
            {
                "data": "Tell me more about the conference speakers",
                "contentType": "text/plain"
            },
            {
                "data": "I'm looking for good restaurants near the venue",
                "contentType": "text/plain"
            },
            {
                "data": "What is Agentuity all about?",
                "contentType": "text/plain"
            }
        ]
    }

def run(request, response, context):
    # Agent logic implementation
    return response.text("Hello, I'm your Python Concierge!")
```

## Vector Storage

An agent that uses vector storage for semantic search.

```python
from agentuity import AgentRequest, AgentResponse, AgentContext

async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    data = request.data.json
    action = data.get("action")
    query = data.get("query")
    products = data.get("products")

    if action == "index":
        # Index products in vector storage
        if not isinstance(products, list) or len(products) == 0:
            return response.json({"error": "No products to index"})

        # Prepare documents for vector storage
        documents = [
            {
                "key": product["id"],
                "document": product["description"],
                "metadata": {
                    "id": product["id"],
                    "name": product["name"],
                    "price": product["price"],
                    "category": product["category"]
                }
            }
            for product in products
        ]

        # Store in vector database
        ids = await context.vector.upsert("products", documents)

        return response.json({
            "message": f"Indexed {len(ids)} products successfully",
            "ids": ids
        })
    
    elif action == "search":
        # Search for products by semantic similarity
        if not query:
            return response.json({"error": "Query is required for search"})

        # Perform semantic search
        results = await context.vector.search(
            "products",
            query,
            limit=5,
            similarity=0.5,
            metadata={}
        )

        # Format results
        formatted_results = [
            {
                "id": result.id,
                "key": result.key,
                "similarity": 1.0 - result.distance,
                "metadata": result.metadata
            }
            for result in results
        ]

        return response.json({
            "message": f"Found {len(results)} matching products",
            "results": formatted_results
        })
    
    elif action == "delete":
        # Delete products from vector storage
        if not isinstance(products, list) or len(products) == 0:
            return response.json({"error": "No product IDs to delete"})

        # Extract product IDs
        product_ids = [p["id"] for p in products]
        
        # Delete from vector database
        count = await context.vector.delete("products", product_ids[0])
        
        return response.json({
            "message": f"Deleted {count} products successfully",
            "ids": product_ids
        })
    
    else:
        return response.json({"error": 'Invalid action. Use "index", "search", or "delete".'})
```

## Agent Communication

An agent that demonstrates communication between agents.

```python
from agentuity import AgentRequest, AgentResponse, AgentContext
from datetime import datetime

async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    data = request.data.json
    action = data.get("action")
    message = data.get("message")
    agent_id = data.get("agentId")

    if action == "send":
        # Send a message to another agent
        if not agent_id:
            return response.json({"error": "Agent ID is required"})

        if not message:
            return response.json({"error": "Message is required"})

        # Send message to the specified agent using handoff
        result = await response.handoff(
            {"id": agent_id},
            {
                "message": message,
                "sender": context.agent.id,
                "timestamp": datetime.now().isoformat()
            }
        )

        return result
    
    elif action == "receive":
        # This is a handler for receiving messages from other agents
        data = request.data.json
        
        context.logger.info(f"Received message from agent {data.get('sender')}: {data.get('message')}")
        
        # Process the received message
        return response.json({
            "message": "Message received and processed",
            "echo": data.get("message"),
            "receivedAt": datetime.now().isoformat()
        })
    
    else:
        return response.json({"error": 'Invalid action. Use "send" or "receive".'})
```

## Streaming Responses from OpenAI

This example demonstrates how to stream a response from OpenAI using the Agentuity Python SDK:

```python
from openai import OpenAI
from agentuity import AgentRequest, AgentResponse, AgentContext

client = OpenAI()


async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    chat_completion = client.chat.completions.create(
        messages=[
            {
                "role": "system",
                "content": "You are a friendly assistant!",
            },
            {
                "role": "user",
                "content": request.data.text or "Why is the sky blue?",
            },
        ],
        model="gpt-4o",
        stream=True,
    )
    return response.stream(chat_completion, lambda x: x.choices[0].delta.content)
```

This example:
1. Imports the necessary libraries from OpenAI and Agentuity
2. Creates an OpenAI client
3. Defines an async `run` function that:
   - Creates a chat completion with streaming enabled
   - Uses the user's input text or defaults to "Why is the sky blue?"
   - Returns a streamed response using Agentuity's `response.stream()` method
   - Uses a lambda function to extract the content from each chunk of the stream

The `response.stream()` method handles the complexity of streaming the response back to the user, making it easy to implement streaming in your agents.


file: SDKs/python/examples/pydantic.mdx
meta: {
  "title": "Pydantic AI Agent",
  "description": "Examples of using the Agentuity Python SDK with Pydantic"
}

## Basic Pydantic AI Agent

Example taken from: https://ai.pydantic.dev/agents/#introduction


```python
import random # Added for random number generation
from pydantic_ai import Agent, RunContext
from agentuity import AgentRequest, AgentResponse, AgentContext

# A pydantic agent
roulette_agent = Agent(
    'openai:gpt-4o',
    deps_type=int,
    output_type=bool,
    system_prompt=(
        'Use the `roulette_wheel` function to see if the '
        'customer has won based on the number they provide.'
    ),
)

# A tool for the pydantic agent
@roulette_agent.tool
async def roulette_wheel(ctx: RunContext[int], square: int) -> str:
    """check if the square is a winner"""
    return 'winner' if square == ctx.deps else 'loser'


async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
		# Spin that wheel!
    success_number = random.randint(0, 20)  

		# Pull out the user query from the request
    user_query = await request.data.text()
    if not user_query:
        user_query = random.randint(0, 20)

    context.logger.info("User query: %s, Winning number: %s", user_query, success_number)

    try:
        context.logger.info("Calling PydanticAI roulette agent with query: '%s' and deps: %s", user_query, success_number)
        
        pydantic_ai_result = await roulette_agent.run(
            user_query,
            deps=success_number
        )
        context.logger.info("PydanticAI result output: %s", pydantic_ai_result.output)

        return response.json({
            "won": pydantic_ai_result.output, 
            "details": "Bet processed by PydanticAI roulette agent.",
            "user_query": user_query,
            "success_number": success_number
        })

    except Exception as e:
        context.logger.error("Error running PydanticAI agent: %s", e)
        return response.json({"error": str(e)}, status_code=500)

```

## More advanced Pydantic AI agent - Bank support agent

Taken from: https://ai.pydantic.dev/examples/bank-support/#example-code


```python
from dataclasses import dataclass
from pydantic import BaseModel, Field
from pydantic_ai import Agent, RunContext
from agentuity import AgentRequest, AgentResponse, AgentContext

class DatabaseConn:
    """This is a fake database for example purposes.

    In reality, you'd be connecting to an external database
    (e.g. PostgreSQL) to get information about customers.
    """

    @classmethod
    async def customer_name(cls, *, id: int) -> str | None:
        if id == 123:
            return "John"
        # Return None or raise an error for other IDs if needed
        return None

    @classmethod
    async def customer_balance(cls, *, id: int, include_pending: bool) -> float:
        if (
            id == 123
        ):  # and include_pending: # Example always shows balance if id is 123
            return 123.45
        else:
            # PydanticAI example raises ValueError, which is fine for tools
            # if the LLM is expected to handle/retry based on it.
            raise ValueError("Customer not found or query parameters invalid")


@dataclass
class SupportDependencies:
    customer_id: int
    db: DatabaseConn


class SupportOutput(BaseModel):
    support_advice: str = Field(description="Advice returned to the customer")
    block_card: bool = Field(description="Whether to block their card or not")
    risk: int = Field(description="Risk level of query", ge=0, le=10)


# --- PydanticAI Agent Definition (from Example) ---

support_agent = Agent(
    "openai:gpt-4o",  # Or your preferred LLM
    deps_type=SupportDependencies,
    output_type=SupportOutput,
    system_prompt=(
        "You are a support agent in our bank, give the "
        "customer support and judge the risk level of their query. "
        "Reply using the customer's name."
    ),
)


@support_agent.system_prompt
async def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:
    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)
    if customer_name:
        return f"The customer's name is {customer_name!r}."
    return "The customer's name could not be determined."


@support_agent.tool
async def customer_balance(
    ctx: RunContext[SupportDependencies], include_pending: bool
) -> str:
    """Returns the customer's current account balance."""
    try:
        balance = await ctx.deps.db.customer_balance(
            id=ctx.deps.customer_id,
            include_pending=include_pending,
        )
        return f"${balance:.2f}"
    except ValueError as e:
        # Let the LLM know the tool failed and why
        return f"Could not retrieve balance: {e}"


# --- Agentuity Agent Entry Point ---
async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    context.logger.info("BankSupport agent initiated.")

    user_query = await request.data.text()
    if not user_query:
        user_query = "What is my balance?"  # Default query
        context.logger.info("No user query provided, using default: '%s'", user_query)

    # For this example, we'll use a hardcoded customer ID and instantiate the DB.
    # In a real scenario, customer_id might come from the request or session.
    customer_id = 123
    db_instance = DatabaseConn()

    dependencies = SupportDependencies(customer_id=customer_id, db=db_instance)

    context.logger.info(
        "Calling PydanticAI support_agent with query: '%s' for customer_id: %s",
        user_query,
        customer_id,
    )

    try:
        pydantic_ai_result = await support_agent.run(user_query, deps=dependencies)

        output_data = pydantic_ai_result.output
        context.logger.info("PydanticAI support_agent output: %s", output_data)

        return response.json(output_data.model_dump())

    except Exception as e:
        context.logger.error(
            "Error running PydanticAI support_agent: %s", e, exc_info=True
        )
        return response.json(
            {
                "error": str(e),
                "details": "An unexpected error occurred in the BankSupport agent.",
            },
            status_code=500,
        )

```




file: SDKs/python/frameworks.mdx
meta: {
  "title": "Frameworks",
  "description": "Framework integration for the Agentuity Python SDK"
}

The Agentuity Python SDK provides a flexible and powerful way to integrate other frameworks with your Agent.

The following frameworks are currently supported:

- [LlamaIndex](https://www.llamaindex.ai/)
- [LangChain](https://www.langchain.com/)
- [CrewAI](https://www.crewai.com/)

## Using Frameworks with Agentuity

The use a framework with Agentuity, choose the framework template when creating a new project.

```bash
agentuity new
```

When you select one of the framework templates, the Agentuity CLI will install the necessary dependencies and create a new project with the framework already configured.

## LlamaIndex

Example Agent using LlamaIndex:

```python
from llama_index.core.agent.workflow import AgentWorkflow
from llama_index.llms.openai import OpenAI
from agentuity import AgentRequest, AgentResponse, AgentContext


# Define a simple calculator tool
def multiply(a: float, b: float) -> float:
    """Useful for multiplying two numbers."""
    return a * b


# Create an agent workflow with our calculator tool
agent = AgentWorkflow.from_tools_or_functions(
    [multiply],
    llm=OpenAI(model="gpt-4o-mini"),
    system_prompt="You are a helpful assistant that can multiply two numbers.",
)


async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    result = await agent.run(request.text or "What is 1234 * 4567?")
    return response.text(str(result))
```

## LangChain

Example Agent using LangChain:

```python
from agentuity import AgentRequest, AgentResponse, AgentContext
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

llm = ChatOpenAI()


async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                "You are an expert in world knowledge and all things in general.",
            ),
            ("user", "{input}"),
        ]
    )
    output_parser = StrOutputParser()
    chain = prompt | llm | output_parser
    result = chain.invoke({"input": request.text})

    return response.text(result)
```

### CrewAI

Example Agent using CrewAI:

```python
from agentuity import AgentRequest, AgentResponse, AgentContext
from agents.mycrew.crew import MyCrew


async def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    inputs = {"topic": request.text or "AI LLMs"}
    result = MyCrew().crew().kickoff(inputs=inputs)
    return response.text(str(result))
```

Then for your Crew, you might hvave the following:

```python
from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task

# If you want to run a snippet of code before or after the crew starts,
# you can use the @before_kickoff and @after_kickoff decorators
# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators


@CrewBase
class MyCrew:
    """MyCrew crew"""

    # Learn more about YAML configuration files here:
    # Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended
    # Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended
    agents_config = "config/agents.yaml"
    tasks_config = "config/tasks.yaml"

    # If you would like to add tools to your agents, you can learn more about it here:
    # https://docs.crewai.com/concepts/agents#agent-tools
    @agent
    def researcher(self) -> Agent:
        return Agent(config=self.agents_config["researcher"], verbose=True)

    @agent
    def reporting_analyst(self) -> Agent:
        return Agent(config=self.agents_config["reporting_analyst"], verbose=True)

    # To learn more about structured task outputs,
    # task dependencies, and task callbacks, check out the documentation:
    # https://docs.crewai.com/concepts/tasks#overview-of-a-task
    @task
    def research_task(self) -> Task:
        return Task(
            config=self.tasks_config["research_task"],
        )

    @task
    def reporting_task(self) -> Task:
        return Task(config=self.tasks_config["reporting_task"], output_file="report.md")

    @crew
    def crew(self) -> Crew:
        """Creates the MyagentCrew crew"""
        # To learn how to add knowledge sources to your crew, check out the documentation:
        # https://docs.crewai.com/concepts/knowledge#what-is-knowledge

        return Crew(
            agents=self.agents,  # Automatically created by the @agent decorator
            tasks=self.tasks,  # Automatically created by the @task decorator
            process=Process.sequential,
            verbose=True,
            # process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/
        )
```


file: SDKs/python/index.mdx
meta: {
  "title": "Python SDK",
  "description": "Documentation for the Agentuity Python SDK"
}

The [Agentuity Python SDK](https://github.com/agentuity/sdk-py) provides a powerful framework for building AI agents in Python. It offers a comprehensive set of tools for creating, deploying, and managing agents with features like key-value storage, vector storage, and OpenTelemetry integration.

## Installation

When you create a project with Agentuity, you will automatically have access to the Agentuity Python SDK.

```bash
agentuity new
```

The SDK currently works with Python and the project will automatically install the correct dependencies.

## Prerequisites

Before using the Agentuity Python SDK, ensure you have the following prerequisites installed:

- **Python**: Version 3.10 or higher is required

### Installing Python

You can download and install Python from the [official website](https://www.python.org/). Make sure to install version 3.10 or higher.

### Installing UV

[UV](https://docs.astral.sh/uv/) is an optional but recommended package manager for Python. You can install it using the following command:

```bash
curl -LsSf https://astral.sh/uv/install.sh | sh
```

For more information, visit the [UV installation documentation](https://docs.astral.sh/uv/getting-started/installation/).

## Development

You can start your project by running the following command:

```bash
agentuity dev
```

This will start your project in development mode and open a new browser window connecting your Agent to the Agentuity Console in Live Mode.

You can also start your project in development mode without connecting to the Agentuity Console by running the following command:

```bash
uv run server.py
```

If you would like to manually test your Agents locally, you can do so by running the following command:

```bash
curl -v http://localhost:3500/run/agent_ID --json '{"input": "Hello, world!"}'
```

Make sure you replace `agent_ID` with the ID of your Agent.


## Next Steps

- [Core Concepts](/SDKs/python/core-concepts) - Learn about the fundamental concepts of the Agentuity Python SDK
- [LLM](/SDKs/python/llm) - Learn about the LLM integrations available in the Agentuity Python SDK
- [Frameworks](/SDKs/python/frameworks) - Learn about using frameworks with the Agentuity Python SDK
- [API Reference](/SDKs/python/api-reference) - Explore the detailed API documentation


file: SDKs/python/llm.mdx
meta: {
  "title": "LLM",
  "description": "LLM integration for the Agentuity Python SDK"
}

The Agentuity Python SDK provides a flexible and powerful way to integrate with LLMs.

## AI Gateway

The Agentuity Cloud includes an AI Gateway to make it easy to integrate LLMs with your Agent with zero configuration. The following LLM integrations are supported:

- [OpenAI](https://openai.com/)
- [Anthropic](https://www.anthropic.com/)
- [Cohere](https://cohere.com/)
- [DeepSeek](https://www.deepseek.com/)
- [Google AI Studio](https://ai.google.dev/)
- [Grok](https://grok.x.ai/)
- [Groq](https://groq.com/)
- [Mistral](https://mistral.ai/)
- [Perplexity AI](https://www.perplexity.ai/)

## SDK Integrations

To use the zero config LLM integrations, you can use the following SDK integrations:

- [OpenAI Python SDK](https://github.com/openai/openai-python)
- [Anthropic Python SDK](https://github.com/anthropics/anthropic-sdk-python)
- [LiteLLM Python SDK](https://github.com/BerriAI/litellm)

When any of the above SDKs are installed, the Agentuity Project will automatically detect it and route your requests to the AI Gateway.  However, we will only route requests if you do not provide your own LLM API Key.  By providing your own LLM API Key, the AI Gateway detection will be disabled and you will need to manually configure the LLM integration in the Agentuity Console.



file: Troubleshooting/error-codes/authentication.mdx
meta: {
  "title": "Authentication Errors",
  "description": "Reference for authentication-related error codes (AUTH-XXX)"
}

import { Callout } from 'fumadocs-ui/components/callout';

<Callout type="warn" title="Document Status">
  This document is being worked on, information may change a lot over the next few weeks.
</Callout>

## AUTH-001

**Error Message**: Invalid username or password

**Cause**: The provided credentials are incorrect or do not exist.

**Solution**: 
- Verify your username and password
- Reset your password if necessary
- Check for any typos in your credentials

## AUTH-002

**Error Message**: Authentication token has expired

**Cause**: Your authentication token has exceeded its validity period.

**Solution**: 
- Log out and log back in
- Request a new authentication token
- Check your system time is correct

## AUTH-003

**Error Message**: Invalid authentication token

**Cause**: The provided token is malformed or has been tampered with.

**Solution**: 
- Generate a new authentication token
- Verify the token format
- Check token transmission process

[Content coming soon - Additional authentication error codes]        

file: Troubleshooting/error-codes/cli.mdx
meta: {
  "title": "CLI Errors",
  "description": "Reference for CLI-related error codes (CLI-XXXX)"
}

## CLI-0001

**Error Message**: Failed to delete agents

**Cause**: The system encountered an error when attempting to delete one or more agents.

**Solution**: 
- Verify you have the correct permissions
- Check if the agents still exist
- Try deleting agents one by one
- Check the logs for more specific error details

## CLI-0002

**Error Message**: Failed to create project

**Cause**: The system encountered an error when attempting to create a new project.

**Solution**: 
- Verify you have the correct permissions
- Check if a project with the same name already exists
- Ensure all required project parameters are valid
- Check the logs for more specific error details

## CLI-0003

**Error Message**: Unable to authenticate user

**Cause**: The system could not authenticate your user credentials.

**Solution**: 
- Verify your username and password
- Check if your authentication token is valid
- Try logging in again
- Ensure your account has not been locked or disabled

## CLI-0004

**Error Message**: Environment variables not set

**Cause**: Required environment variables are missing or not properly set.

**Solution**: 
- Check which environment variables are required
- Set the missing environment variables
- Verify the environment variables have the correct values
- Consider using a .env file for local development

## CLI-0005

**Error Message**: API request failed

**Cause**: A request to the Agentuity API failed.

**Solution**: 
- Check your internet connection
- Verify the API endpoint is correct
- Ensure your authentication token is valid
- Check the logs for more specific error details

## CLI-0006

**Error Message**: Invalid configuration

**Cause**: The configuration file or parameters contain invalid values.

**Solution**: 
- Review your configuration file
- Check for syntax errors
- Ensure all required fields are present
- Validate the values against the expected format

## CLI-0007

**Error Message**: Failed to save project

**Cause**: The system encountered an error when attempting to save project changes.

**Solution**: 
- Verify you have the correct permissions
- Check if the project still exists
- Ensure all project parameters are valid
- Check the logs for more specific error details

## CLI-0008

**Error Message**: Failed to deploy project

**Cause**: The system encountered an error when attempting to deploy a project.

**Solution**: 
- Verify you have the correct permissions
- Check if the project is valid and complete
- Ensure all dependencies are available
- Check the logs for more specific error details

## CLI-0009

**Error Message**: Failed to upload project

**Cause**: The system encountered an error when attempting to upload project files.

**Solution**: 
- Check your internet connection
- Verify you have the correct permissions
- Ensure the project files are not too large
- Check the logs for more specific error details

## CLI-0010

**Error Message**: Failed to parse environment file

**Cause**: The system could not parse the environment file (.env).

**Solution**: 
- Check the syntax of your environment file
- Ensure the file exists and is readable
- Verify the file format is correct
- Remove any invalid characters or formatting

## CLI-0011

**Error Message**: Invalid command flag error

**Cause**: One or more command flags provided are invalid or incompatible.

**Solution**: 
- Check the command documentation
- Verify the flag names and values
- Ensure flags are compatible with each other
- Use the help command for correct usage

## CLI-0012

**Error Message**: Failed to list files and directories

**Cause**: The system could not list files or directories in the specified location.

**Solution**: 
- Verify the path exists
- Check if you have permission to access the location
- Ensure the path is correctly formatted
- Check for any file system errors

## CLI-0013

**Error Message**: Failed to write configuration file

**Cause**: The system could not write to the configuration file.

**Solution**: 
- Check if you have write permissions
- Verify the directory exists
- Ensure there is enough disk space
- Check if the file is locked by another process

## CLI-0014

**Error Message**: Failed to read configuration file

**Cause**: The system could not read the configuration file.

**Solution**: 
- Verify the file exists
- Check if you have read permissions
- Ensure the file is not corrupted
- Check if the file format is correct

## CLI-0015

**Error Message**: Failed to create directory

**Cause**: The system could not create a directory.

**Solution**: 
- Check if you have write permissions
- Verify the parent directory exists
- Ensure there is enough disk space
- Check if a file with the same name already exists

## CLI-0016

**Error Message**: Failed to create temporary file

**Cause**: The system could not create a temporary file.

**Solution**: 
- Check if you have write permissions to the temp directory
- Ensure there is enough disk space
- Verify the temp directory exists
- Check system temporary file limits

## CLI-0017

**Error Message**: Failed to create zip file

**Cause**: The system could not create a zip archive.

**Solution**: 
- Check if you have write permissions
- Ensure there is enough disk space
- Verify all files to be zipped exist and are readable
- Check if the zip utility is installed correctly

## CLI-0018

**Error Message**: Failed to open file

**Cause**: The system could not open the specified file.

**Solution**: 
- Verify the file exists
- Check if you have permission to access the file
- Ensure the file is not locked by another process
- Check if the file path is correct

## CLI-0019

**Error Message**: Failed to load templates

**Cause**: The system could not load the required templates.

**Solution**: 
- Verify the templates exist
- Check if you have permission to access the templates
- Ensure the template format is correct
- Check if the template path is correct

## CLI-0020

**Error Message**: Failed to authenticate with otel server

**Cause**: The system could not authenticate with the OpenTelemetry server.

**Solution**: 
- Verify your OTEL server credentials
- Check if the OTEL server is running
- Ensure the OTEL server URL is correct
- Check your network connection to the OTEL server

## CLI-0021

**Error Message**: Failed to install dependencies

**Cause**: The system could not install the required dependencies.

**Solution**: 
- Check your internet connection
- Verify you have the necessary permissions
- Ensure the package manager is working correctly
- Check for conflicts with existing packages

## CLI-0022

**Error Message**: Error importing project

**Cause**: The system encountered an error when attempting to import a project.

**Solution**: 
- Verify the project structure is valid
- Ensure all required files are present
- Check if the project is compatible with the current CLI version
- Verify you have the necessary permissions to import the project

## CLI-0023

**Error Message**: Error encrypting deployment zip file

**Cause**: The system could not encrypt the deployment zip file.

**Solution**: 
- Check if encryption keys are valid
- Verify you have the necessary permissions
- Ensure the zip file was created successfully
- Check if the encryption library is working correctly


file: Troubleshooting/error-codes/datastores.mdx
meta: {
  "title": "Datastore Errors",
  "description": "Reference for datastore-related error codes (DATA-XXX)"
}

import { Callout } from 'fumadocs-ui/components/callout';

<Callout type="warn" title="Document Status">
  This document is being worked on, information may change a lot over the next few weeks.
</Callout>

## DATA-001

**Error Message**: Datastore not found

**Cause**: The specified datastore ID does not exist or has been deleted.

**Solution**: 
- Verify the datastore ID is correct
- Check if the datastore still exists in the project
- Contact support if you believe this is an error

## DATA-002

**Error Message**: Invalid datastore configuration

**Cause**: The datastore configuration contains invalid or missing required fields.

**Solution**: 
- Review the datastore configuration
- Ensure all required fields are provided
- Validate the configuration format

## DATA-003

**Error Message**: Unable to connect to datastore

**Cause**: The system cannot establish a connection to the datastore.

**Solution**: 
- Check the datastore connection settings
- Verify the datastore is running and accessible
- Check network connectivity

## DATA-004

**Error Message**: Datastore capacity exceeded

**Cause**: The datastore has reached its storage capacity limit.

**Solution**: 
- Review current data usage
- Delete unnecessary data
- Upgrade storage capacity

## DATA-005

**Error Message**: Invalid datastore query

**Cause**: The query syntax or parameters are invalid.

**Solution**: 
- Check the query syntax
- Verify parameter types and values
- Review the query documentation                                        

file: Troubleshooting/error-codes/index.mdx
meta: {
  "title": "Error Codes",
  "description": "Complete reference for all Agentuity error codes and their solutions"
}

import { Callout } from 'fumadocs-ui/components/callout';

<Callout type="warn" title="Document Status">
  This document is being worked on, information may change a lot over the next few weeks.
</Callout>

This section provides detailed information about all error codes you might encounter while using Agentuity.

## Error Categories

- Authentication Errors (AUTH-XXX)
- Project Errors (PROJ-XXX)
- Agent Errors (AGENT-XXX)
- Datastore Errors (DATA-XXX)
- Integration Errors (INT-XXX)
- System Errors (SYS-XXX)
- CLI Errors (CLI-XXXX)

## Reading Error Codes

[Content coming soon - How to interpret error codes and find solutions]

## Common Error Patterns

[Content coming soon - Common patterns in error codes and general troubleshooting approaches]        

file: Troubleshooting/error-codes/integration.mdx
meta: {
  "title": "Integration Errors",
  "description": "Reference for integration-related error codes (INT-XXX)"
}

import { Callout } from 'fumadocs-ui/components/callout';

<Callout type="warn" title="Document Status">
  This document is being worked on, information may change a lot over the next few weeks.
</Callout>

## INT-001

**Error Message**: Integration not found

**Cause**: The specified integration does not exist or has been deleted.

**Solution**: 
- Verify the integration ID is correct
- Check if the integration is still configured
- Set up the integration again if necessary

## INT-002

**Error Message**: Invalid webhook URL

**Cause**: The webhook URL is not properly formatted or accessible.

**Solution**: 
- Verify the webhook URL is correct
- Ensure the endpoint is publicly accessible
- Check URL formatting and protocol

## INT-003

**Error Message**: Integration authentication failed

**Cause**: Unable to authenticate with the integrated service.

**Solution**: 
- Check integration credentials
- Verify API keys or tokens
- Ensure the integration service is available

## INT-004

**Error Message**: Integration request timeout

**Cause**: The integrated service did not respond within the expected time.

**Solution**: 
- Check the integrated service status
- Verify network connectivity
- Adjust timeout settings if possible

## INT-005

**Error Message**: Invalid integration configuration

**Cause**: The integration configuration is invalid or incomplete.

**Solution**: 
- Review integration settings
- Complete all required configuration fields
- Check integration documentation        

file: Troubleshooting/error-codes/projects.mdx
meta: {
  "title": "Project Errors",
  "description": "Reference for project-related error codes (PROJ-XXX)"
}

import { Callout } from 'fumadocs-ui/components/callout';

<Callout type="warn" title="Document Status">
  This document is being worked on, information may change a lot over the next few weeks.
</Callout>

## PROJ-001

**Error Message**: Project not found

**Cause**: The specified project ID does not exist or has been deleted.

**Solution**: 
- Verify the project ID is correct
- Check if you have access to the project
- Contact support if you believe this is an error

## PROJ-002

**Error Message**: Invalid project configuration

**Cause**: The project configuration contains invalid or missing required fields.

**Solution**: 
- Review the project configuration
- Ensure all required fields are provided
- Validate the configuration format

## PROJ-003

**Error Message**: Project limit exceeded

**Cause**: You have reached the maximum number of projects allowed for your subscription.

**Solution**: 
- Review your current projects
- Delete unused projects
- Upgrade your subscription plan

## PROJ-004

**Error Message**: Invalid project name

**Cause**: The project name contains invalid characters or is too long/short.

**Solution**: 
- Use only alphanumeric characters, hyphens, and underscores
- Keep the name between 3-64 characters
- Remove any special characters        

file: Troubleshooting/error-codes/system.mdx
meta: {
  "title": "System Errors",
  "description": "Reference for system-related error codes (SYS-XXX)"
}

import { Callout } from 'fumadocs-ui/components/callout';

<Callout type="warn" title="Document Status">
  This document is being worked on, information may change a lot over the next few weeks.
</Callout>

## SYS-001

**Error Message**: Internal server error

**Cause**: An unexpected error occurred in the system.

**Solution**: 
- Retry the operation
- Check system status page
- Contact support if the issue persists

## SYS-002

**Error Message**: Rate limit exceeded

**Cause**: Too many requests in a short period.

**Solution**: 
- Reduce request frequency
- Implement request throttling
- Review rate limit documentation

## SYS-003

**Error Message**: Service temporarily unavailable

**Cause**: The service is currently unavailable or under maintenance.

**Solution**: 
- Check system status page
- Wait and retry later
- Subscribe to status updates

## SYS-004

**Error Message**: Invalid API version

**Cause**: The requested API version is not supported or deprecated.

**Solution**: 
- Update to a supported API version
- Check API version compatibility
- Review API migration guide

## SYS-005

**Error Message**: Resource conflict

**Cause**: Concurrent modification of the same resource.

**Solution**: 
- Implement proper locking mechanisms
- Retry the operation
- Handle conflicts in your application                                        

file: docs/SDKs/python/agent-to-agent.mdx
meta: {
  "title": "Agent-to-Agent Communication",
  "description": "Enable communication between agents in the Agentuity Python SDK"
}

# Agent-to-Agent Communication

The Agentuity Python SDK enables seamless communication between agents, whether they are running locally or in different environments.

## Local Agent Communication

You can easily communicate between agents running in the same process:

```python
async def run(request, response, context):
    # Call another agent by ID
    return await response.handoff({"id": "other_agent_id"})
    
    # Or call by name
    # return response.handoff({"name": "OtherAgentName"})
```

## Remote Agent Communication

The SDK now supports communication with agents running in different environments:

```python
async def run(request, response, context):
    # Resolve an agent (local or remote)
    agent = context.get_agent({"id": "remote_agent_id"})
    
    # Create data for the remote agent
    from agentuity.server.data import Data, StringStreamReader
    data = Data("text/plain", StringStreamReader("Hello from another agent"))
    
    # Call the remote agent
    result = await agent.run(data, metadata={"key": "value"})
    
    # Process the response
    text = await result.data.text()
    return response.text(f"Got response: {text}")
```

## Agent Resolution

The `AgentContext` provides methods for resolving agents, whether they are local or remote:

```python
async def run(request, response, context):
    # Resolve by ID
    agent = context.get_agent({"id": "agent_id"})
    
    # Resolve by name
    agent = context.get_agent({"name": "AgentName"})
    
    # Resolve by name in a specific project
    agent = context.get_agent({"name": "AgentName", "projectId": "proj_123"})
    
    # Call the resolved agent
    result = await agent.run(request.data)
    return result
```

## Agent Context

The `AgentContext` class provides methods for agent resolution and management:

```python
async def run(request, response, context):
    # Get agent information
    current_agent = context.agent
    all_agents = context.agents
    
    # Get the current scope (local or remote)
    scope = context.scope
    
    # Get the current run ID
    run_id = context.runId
    
    # Use key-value store
    await context.kv.set("key", "value")
    value = await context.kv.get("key")
    
    # Use vector store
    await context.vector.add("collection", "id", [0.1, 0.2, 0.3], {"metadata": "value"})
    results = await context.vector.search("collection", [0.1, 0.2, 0.3], 5)
    
    return response.text("Agent context example")
```


file: docs/SDKs/python/async-api.mdx
meta: {
  "title": "Async API",
  "description": "Working with Asynchronous Agents in the Agentuity Python SDK"
}

# Async API

The Agentuity Python SDK now supports fully asynchronous operations, enabling more efficient handling of concurrent requests and streaming responses.

## Agent Request

The `AgentRequest` class now uses async patterns to handle incoming data:

```python
from agentuity.server import AgentRequest

async def run(request: AgentRequest, response, context):
    # Access request data asynchronously
    data = await request.data.text()
    
    # Access request metadata
    metadata = request.metadata
    
    # Get the trigger type
    trigger = request.trigger
    
    # Return a response
    return response.text(f"Received: {data}")
```

## Agent Response

The `AgentResponse` class supports async streaming and iteration:

```python
from agentuity.server import AgentResponse

async def run(request, response: AgentResponse, context):
    # Stream response data
    async def data_generator():
        for i in range(5):
            yield f"Data chunk {i}\n"
    
    # Return a streaming response
    return response.stream(data_generator(), contentType="text/plain")
```

### Async Iteration

Responses can be iterated over asynchronously:

```python
async def process_response(response):
    async for chunk in response:
        print(chunk)
```

## Data Streaming

The SDK provides several specialized stream readers for different data types:

```python
from agentuity.server.data import (
    StringStreamReader,
    BytesStreamReader,
    EmptyDataReader
)

# Create a stream from a string
string_stream = StringStreamReader("Hello, world!")

# Create a stream from bytes
bytes_stream = BytesStreamReader(b"Binary data")

# Create an empty stream
empty_stream = EmptyDataReader()
```

## Performance Benefits

The async implementation provides several advantages:

- Efficient handling of concurrent requests
- Streaming of large data payloads without blocking
- Reduced memory usage for processing large files
- Better integration with modern async Python applications


file: docs/SDKs/python/data-handling.mdx
meta: {
  "title": "Data Handling",
  "description": "Working with various data types in the Agentuity Python SDK"
}

# Data Handling

The Agentuity Python SDK provides a flexible system for working with different types of data, from text and JSON to binary formats like images and audio.

## The Data Class

The `Data` class serves as a container for all types of content:

```python
from agentuity.server.data import Data, StringStreamReader, BytesStreamReader

# Create a text Data object
text_data = Data("text/plain", StringStreamReader("Hello, world!"))

# Create a binary Data object
binary_data = Data("application/octet-stream", BytesStreamReader(b"\x00\x01\x02\x03"))
```

## Accessing Data Content

Data content can be accessed in various formats:

```python
async def process_data(data: Data):
    # Get as text
    text = await data.text()
    
    # Get as JSON
    json_data = await data.json()
    
    # Get as binary
    binary = await data.binary()
    
    # Get as base64 encoded string
    base64_str = await data.base64()
    
    # Access as a stream
    stream = await data.stream()
    async for chunk in stream:
        process_chunk(chunk)
```

## Working with Responses

The `AgentResponse` class provides methods for various content types:

```python
async def run(request, response, context):
    # Text response
    return response.text("Hello, world!")
    
    # JSON response
    return response.json({"message": "Hello, world!"})
    
    # Markdown response
    return response.markdown("# Hello, world!")
    
    # Binary response
    return response.binary(b"\x00\x01\x02\x03", "application/octet-stream")
```

## Media Type Helpers

The SDK includes helpers for common media types:

```python
async def run(request, response, context):
    # Image responses
    with open("image.png", "rb") as f:
        image_data = f.read()
        return response.png(image_data)
    
    # Other image formats
    return response.jpeg(jpeg_data)
    return response.gif(gif_data)
    return response.webp(webp_data)
    
    # Document formats
    return response.pdf(pdf_data)
    
    # Audio/Video formats
    return response.mp3(mp3_data)
    return response.mp4(mp4_data)
    return response.wav(wav_data)
    return response.ogg(ogg_data)
    return response.webm(webm_data)
    return response.m4a(m4a_data)
```

## Streaming Data

For large responses or real-time data, use streaming:

```python
async def run(request, response, context):
    # Stream data from a generator
    async def generator():
        for i in range(10):
            yield f"Item {i}\n"
    
    # Return the stream
    return response.stream(generator(), contentType="text/plain")
    
    # Transform items during streaming
    def transform(item):
        return f"Transformed: {item}"
    
    return response.stream(generator(), transform=transform)
    
    # Stream responses from another agent
    other_response = await context.get_agent("other_agent").run(request.data)
    return response.stream(other_response)
```


file: docs/SDKs/python/index.mdx
meta: {
  "title": "Python SDK",
  "description": "Agentuity Python SDK Documentation"
}

# Agentuity Python SDK

The Agentuity Python SDK is a powerful toolkit for building, deploying, and managing AI agents in Python environments. This SDK provides developers with a comprehensive set of tools to create intelligent agents that can process various types of content, communicate with each other, and integrate with external systems.

## Prerequisites

- [Python](https://www.python.org/) (3.10 or 3.11)
- [uv](https://docs.astral.sh/uv/) (latest version recommended)

## Installation

First, install the Agentuity CLI:

```bash
curl -fsS https://agentuity.sh | sh
```

Then create a new project:

```bash
agentuity new
```

This will create a new project with a default `agentuity.yaml` configuration file and agent structure.

## Creating Your First Agent

Navigate to the agent file created by the CLI:

```bash
cd agents/myfirstagent
```

Edit the `agent.py` file and add the following code:

```python
from agentuity.server import AgentRequest, AgentResponse, AgentContext

def run(request: AgentRequest, response: AgentResponse, context: AgentContext):
    return response.text("Hello, world")
```

## Running Your Agent

Start the local development server:

```bash
agentuity dev
```

When the server starts, you'll see a local URL in the console output. Open this URL in your browser to access the Agentuity development UI, where you can test your agent and view the responses.

## Key Features

<div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '1rem', padding: '1rem' }}>
  <Card href="/docs/SDKs/python/async-api">
    <h3>Async API</h3>
    <p>Work with fully asynchronous agents</p>
  </Card>
  
  <Card href="/docs/SDKs/python/agent-to-agent">
    <h3>Agent-to-Agent Communication</h3>
    <p>Enable communication between local and remote agents</p>
  </Card>
  
  <Card href="/docs/SDKs/python/data-handling">
    <h3>Data Handling</h3>
    <p>Work with various data types and streaming capabilities</p>
  </Card>
</div>
